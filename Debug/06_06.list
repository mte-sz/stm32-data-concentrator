
06_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008be0  08008be0  00018be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff4  08008ff4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008ff4  08008ff4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ff4  08008ff4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000248  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f17a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e3  00000000  00000000  0002f386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  00031970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00032488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221bb  00000000  00000000  00032e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010833  00000000  00000000  00055043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cacfa  00000000  00000000  00065876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130570  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b94  00000000  00000000  001305c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008bc8 	.word	0x08008bc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008bc8 	.word	0x08008bc8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bda:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000bdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000be0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000be2:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000be8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf6:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfc:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c26:	2204      	movs	r2, #4
 8000c28:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c38:	f000 fdca 	bl	80017d0 <HAL_ADC_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c42:	f000 fad3 	bl	80011ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c52:	f001 fbbf 	bl	80023d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000c5c:	f000 fac6 	bl	80011ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_ADC1_Init+0xdc>)
 8000c7e:	f001 f8bd 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000c88:	f000 fab0 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200001f8 	.word	0x200001f8

08000c98 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000cbc:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <MX_ADC3_Init+0xdc>)
 8000cbe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ccc:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000cd2:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000d02:	2204      	movs	r2, #4
 8000d04:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d12:	4817      	ldr	r0, [pc, #92]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000d14:	f000 fd5c 	bl	80017d0 <HAL_ADC_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000d1e:	f000 fa65 	bl	80011ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000d2e:	f001 fb51 	bl	80023d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000d38:	f000 fa58 	bl	80011ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_ADC3_Init+0xd8>)
 8000d5a:	f001 f84f 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000d64:	f000 fa42 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000248 	.word	0x20000248
 8000d74:	50000400 	.word	0x50000400

08000d78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d98:	d14d      	bne.n	8000e36 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a3c      	ldr	r2, [pc, #240]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	4b3a      	ldr	r3, [pc, #232]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	61bb      	str	r3, [r7, #24]
 8000db0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	4a36      	ldr	r2, [pc, #216]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	6153      	str	r3, [r2, #20]
 8000dbe:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f002 f856 	bl	8002e90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000de6:	4a2c      	ldr	r2, [pc, #176]	; (8000e98 <HAL_ADC_MspInit+0x120>)
 8000de8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e18:	481e      	ldr	r0, [pc, #120]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000e1a:	f001 fe0e 	bl	8002a3a <HAL_DMA_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000e24:	f000 f9e2 	bl	80011ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e2e:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <HAL_ADC_MspInit+0x11c>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000e34:	e028      	b.n	8000e88 <HAL_ADC_MspInit+0x110>
  else if(adcHandle->Instance==ADC3)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_ADC_MspInit+0x124>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d123      	bne.n	8000e88 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000e46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e4a:	6153      	str	r3, [r2, #20]
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	4a0c      	ldr	r2, [pc, #48]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e62:	6153      	str	r3, [r2, #20]
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_ADC_MspInit+0x118>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <HAL_ADC_MspInit+0x128>)
 8000e84:	f002 f804 	bl	8002e90 <HAL_GPIO_Init>
}
 8000e88:	bf00      	nop
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	20000298 	.word	0x20000298
 8000e98:	40020008 	.word	0x40020008
 8000e9c:	50000400 	.word	0x50000400
 8000ea0:	48000400 	.word	0x48000400

08000ea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_DMA_Init+0x48>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <MX_DMA_Init+0x48>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6153      	str	r3, [r2, #20]
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <MX_DMA_Init+0x48>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2010      	movs	r0, #16
 8000ec8:	f001 fd81 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ecc:	2010      	movs	r0, #16
 8000ece:	f001 fd9a 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2011      	movs	r0, #17
 8000ed8:	f001 fd79 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000edc:	2011      	movs	r0, #17
 8000ede:	f001 fd92 	bl	8002a06 <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a2e      	ldr	r2, [pc, #184]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f10:	6153      	str	r3, [r2, #20]
 8000f12:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1e:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f28:	6153      	str	r3, [r2, #20]
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	6153      	str	r3, [r2, #20]
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_GPIO_Init+0xd4>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2120      	movs	r1, #32
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f002 f919 	bl	80031a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f78:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	480f      	ldr	r0, [pc, #60]	; (8000fc8 <MX_GPIO_Init+0xd8>)
 8000f8a:	f001 ff81 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f8e:	2320      	movs	r3, #32
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f001 ff72 	bl	8002e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2108      	movs	r1, #8
 8000fb0:	2028      	movs	r0, #40	; 0x28
 8000fb2:	f001 fd0c 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fb6:	2028      	movs	r0, #40	; 0x28
 8000fb8:	f001 fd25 	bl	8002a06 <HAL_NVIC_EnableIRQ>

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800

08000fcc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0a      	cmp	r3, #10
 8000fd8:	d102      	bne.n	8000fe0 <__io_putchar+0x14>
    __io_putchar('\r');
 8000fda:	200d      	movs	r0, #13
 8000fdc:	f7ff fff6 	bl	8000fcc <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000fe0:	1d39      	adds	r1, r7, #4
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <__io_putchar+0x2c>)
 8000fea:	f003 fe01 	bl	8004bf0 <HAL_UART_Transmit>

  return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000304 	.word	0x20000304

08000ffc <HAL_UART_TxHalfCpltCallback>:
uint8_t Rx_data[10];
uint8_t HalfTransmit[] = "halfTransmit";


void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	  for(int i=0; i<10; i++){
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e007      	b.n	800101a <HAL_UART_TxHalfCpltCallback+0x1e>
		  data[i]='a';
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <HAL_UART_TxHalfCpltCallback+0x34>)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	2261      	movs	r2, #97	; 0x61
 8001012:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<10; i++){
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b09      	cmp	r3, #9
 800101e:	ddf4      	ble.n	800100a <HAL_UART_TxHalfCpltCallback+0xe>
	  }

}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200002dc 	.word	0x200002dc

08001034 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	  for(int i=10;i<20;i++){
 800103c:	230a      	movs	r3, #10
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e007      	b.n	8001052 <HAL_UART_TxCpltCallback+0x1e>
		  data[i]='b';
 8001042:	4a09      	ldr	r2, [pc, #36]	; (8001068 <HAL_UART_TxCpltCallback+0x34>)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	2262      	movs	r2, #98	; 0x62
 800104a:	701a      	strb	r2, [r3, #0]
	  for(int i=10;i<20;i++){
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3301      	adds	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b13      	cmp	r3, #19
 8001056:	ddf4      	ble.n	8001042 <HAL_UART_TxCpltCallback+0xe>
	  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200002dc 	.word	0x200002dc

0800106c <HAL_UART_RxHalfCpltCallback>:


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
		//HAL_UART_Transmit_DMA(&huart2, HalfTransmit, sizeof(HalfTransmit));


}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	 HAL_UART_Receive_DMA(&huart2, Rx_data, 10);
 8001088:	220a      	movs	r2, #10
 800108a:	4904      	ldr	r1, [pc, #16]	; (800109c <HAL_UART_RxCpltCallback+0x1c>)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <HAL_UART_RxCpltCallback+0x20>)
 800108e:	f003 fed3 	bl	8004e38 <HAL_UART_Receive_DMA>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200002f0 	.word	0x200002f0
 80010a0:	20000304 	.word	0x20000304

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a8:	f000 faea 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ac:	f000 f826 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b0:	f7ff ff1e 	bl	8000ef0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b4:	f7ff fef6 	bl	8000ea4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010b8:	f000 f9ea 	bl	8001490 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010bc:	f7ff fd7c 	bl	8000bb8 <MX_ADC1_Init>
  MX_ADC3_Init();
 80010c0:	f7ff fdea 	bl	8000c98 <MX_ADC3_Init>
   {
     data[i] = 'x';
   }*/
  volatile static uint16_t value[2];

	HAL_UART_Receive_DMA(&huart2, Rx_data, 10);
 80010c4:	220a      	movs	r2, #10
 80010c6:	4909      	ldr	r1, [pc, #36]	; (80010ec <main+0x48>)
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <main+0x4c>)
 80010ca:	f003 feb5 	bl	8004e38 <HAL_UART_Receive_DMA>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);
 80010ce:	2202      	movs	r2, #2
 80010d0:	4908      	ldr	r1, [pc, #32]	; (80010f4 <main+0x50>)
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <main+0x54>)
 80010d4:	f000 fd76 	bl	8001bc4 <HAL_ADC_Start_DMA>
  while (1)
  {

	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	 //HAL_Delay(250);
	  HAL_UART_Transmit_DMA(&huart2, value, 2);
 80010d8:	2202      	movs	r2, #2
 80010da:	4906      	ldr	r1, [pc, #24]	; (80010f4 <main+0x50>)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <main+0x4c>)
 80010de:	f003 fe1b 	bl	8004d18 <HAL_UART_Transmit_DMA>

	  HAL_Delay(250);
 80010e2:	20fa      	movs	r0, #250	; 0xfa
 80010e4:	f000 fb32 	bl	800174c <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, value, 2);
 80010e8:	e7f6      	b.n	80010d8 <main+0x34>
 80010ea:	bf00      	nop
 80010ec:	200002f0 	.word	0x200002f0
 80010f0:	20000304 	.word	0x20000304
 80010f4:	200002fc 	.word	0x200002fc
 80010f8:	200001f8 	.word	0x200001f8

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0a6      	sub	sp, #152	; 0x98
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f005 f83c 	bl	8006188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2258      	movs	r2, #88	; 0x58
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f005 f82e 	bl	8006188 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112c:	2302      	movs	r3, #2
 800112e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	2310      	movs	r3, #16
 8001136:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001148:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800114c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800115a:	4618      	mov	r0, r3
 800115c:	f002 f852 	bl	8003204 <HAL_RCC_OscConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001166:	f000 f841 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	230f      	movs	r3, #15
 800116c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116e:	2302      	movs	r3, #2
 8001170:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001180:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001184:	2102      	movs	r1, #2
 8001186:	4618      	mov	r0, r3
 8001188:	f003 f890 	bl	80042ac <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001192:	f000 f82b 	bl	80011ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC34;
 8001196:	f44f 7381 	mov.w	r3, #258	; 0x102
 800119a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80011a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fab5 	bl	8004718 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80011b4:	f000 f81a 	bl	80011ec <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3798      	adds	r7, #152	; 0x98
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void	HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d0:	d104      	bne.n	80011dc <HAL_GPIO_EXTI_Callback+0x1c>
	 	HAL_UART_Transmit_DMA(&huart2, data, sizeof(data));
 80011d2:	2214      	movs	r2, #20
 80011d4:	4903      	ldr	r1, [pc, #12]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x24>)
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x28>)
 80011d8:	f003 fd9e 	bl	8004d18 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart2, value, sizeof(value));
	}
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200002dc 	.word	0x200002dc
 80011e8:	20000304 	.word	0x20000304

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_MspInit+0x44>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_MspInit+0x44>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_MspInit+0x44>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_MspInit+0x44>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <HAL_MspInit+0x44>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	61d3      	str	r3, [r2, #28]
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_MspInit+0x44>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <NMI_Handler+0x4>

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128c:	f000 fa3e 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <DMA1_Channel6_IRQHandler+0x10>)
 800129a:	f001 fceb 	bl	8002c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200003cc 	.word	0x200003cc

080012a8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <DMA1_Channel7_IRQHandler+0x10>)
 80012ae:	f001 fce1 	bl	8002c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000388 	.word	0x20000388

080012bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <USART2_IRQHandler+0x10>)
 80012c2:	f003 fe07 	bl	8004ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000304 	.word	0x20000304

080012d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012d8:	f001 ff7c 	bl	80031d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	return 1;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <_kill>:

int _kill(int pid, int sig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012fa:	f004 ff1b 	bl	8006134 <__errno>
 80012fe:	4603      	mov	r3, r0
 8001300:	2216      	movs	r2, #22
 8001302:	601a      	str	r2, [r3, #0]
	return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_exit>:

void _exit (int status)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffe7 	bl	80012f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001322:	e7fe      	b.n	8001322 <_exit+0x12>

08001324 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e00a      	b.n	800134c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001336:	f3af 8000 	nop.w
 800133a:	4601      	mov	r1, r0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	60ba      	str	r2, [r7, #8]
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbf0      	blt.n	8001336 <_read+0x12>
	}

return len;
 8001354:	687b      	ldr	r3, [r7, #4]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e009      	b.n	8001384 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe27 	bl	8000fcc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf1      	blt.n	8001370 <_write+0x12>
	}
	return len;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_close>:

int _close(int file)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
	return -1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013be:	605a      	str	r2, [r3, #4]
	return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_isatty>:

int _isatty(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	return 1;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f004 fe80 	bl	8006134 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20010000 	.word	0x20010000
 8001460:	00000400 	.word	0x00000400
 8001464:	20000300 	.word	0x20000300
 8001468:	20000428 	.word	0x20000428

0800146c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <MX_USART2_UART_Init+0x5c>)
 8001498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014d4:	f003 fb3e 	bl	8004b54 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014de:	f7ff fe85 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000304 	.word	0x20000304
 80014ec:	40004400 	.word	0x40004400

080014f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a41      	ldr	r2, [pc, #260]	; (8001614 <HAL_UART_MspInit+0x124>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d17c      	bne.n	800160c <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001512:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_UART_MspInit+0x128>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a40      	ldr	r2, [pc, #256]	; (8001618 <HAL_UART_MspInit+0x128>)
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b3e      	ldr	r3, [pc, #248]	; (8001618 <HAL_UART_MspInit+0x128>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <HAL_UART_MspInit+0x128>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	4a3a      	ldr	r2, [pc, #232]	; (8001618 <HAL_UART_MspInit+0x128>)
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <HAL_UART_MspInit+0x128>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001542:	230c      	movs	r3, #12
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001552:	2307      	movs	r3, #7
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f001 fc96 	bl	8002e90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_UART_MspInit+0x12c>)
 8001566:	4a2e      	ldr	r2, [pc, #184]	; (8001620 <HAL_UART_MspInit+0x130>)
 8001568:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156a:	4b2c      	ldr	r3, [pc, #176]	; (800161c <HAL_UART_MspInit+0x12c>)
 800156c:	2210      	movs	r2, #16
 800156e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_UART_MspInit+0x12c>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_UART_MspInit+0x12c>)
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_UART_MspInit+0x12c>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_UART_MspInit+0x12c>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_UART_MspInit+0x12c>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_UART_MspInit+0x12c>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001594:	4821      	ldr	r0, [pc, #132]	; (800161c <HAL_UART_MspInit+0x12c>)
 8001596:	f001 fa50 	bl	8002a3a <HAL_DMA_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80015a0:	f7ff fe24 	bl	80011ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_UART_MspInit+0x12c>)
 80015a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <HAL_UART_MspInit+0x12c>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_UART_MspInit+0x138>)
 80015b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015d6:	2220      	movs	r2, #32
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015e0:	4810      	ldr	r0, [pc, #64]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015e2:	f001 fa2a 	bl	8002a3a <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80015ec:	f7ff fdfe 	bl	80011ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015f4:	671a      	str	r2, [r3, #112]	; 0x70
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_UART_MspInit+0x134>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	210c      	movs	r1, #12
 8001600:	2026      	movs	r0, #38	; 0x26
 8001602:	f001 f9e4 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001606:	2026      	movs	r0, #38	; 0x26
 8001608:	f001 f9fd 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40004400 	.word	0x40004400
 8001618:	40021000 	.word	0x40021000
 800161c:	20000388 	.word	0x20000388
 8001620:	40020080 	.word	0x40020080
 8001624:	200003cc 	.word	0x200003cc
 8001628:	4002006c 	.word	0x4002006c

0800162c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopForever+0xe>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001656:	f7ff ff09 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f004 fd71 	bl	8006140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800165e:	f7ff fd21 	bl	80010a4 <main>

08001662 <LoopForever>:

LoopForever:
    b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001664:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001670:	08008ffc 	.word	0x08008ffc
  ldr r2, =_sbss
 8001674:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001678:	20000424 	.word	0x20000424

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>
	...

08001680 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x28>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x28>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f001 f991 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fdac 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 f9a9 	bl	8002a22 <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f001 f971 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000000 	.word	0x20000000
 8001704:	20000008 	.word	0x20000008
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008
 8001730:	20000410 	.word	0x20000410

08001734 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;  
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000410 	.word	0x20000410

0800174c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000008 	.word	0x20000008

08001794 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b09a      	sub	sp, #104	; 0x68
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e1e3      	b.n	8001bb8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d176      	bne.n	80018f0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	2b00      	cmp	r3, #0
 8001808:	d152      	bne.n	80018b0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff faa7 	bl	8000d78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d13b      	bne.n	80018b0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 ff87 	bl	800274c <ADC_Disable>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d12f      	bne.n	80018b0 <HAL_ADC_Init+0xe0>
 8001850:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001854:	2b00      	cmp	r3, #0
 8001856:	d12b      	bne.n	80018b0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001860:	f023 0302 	bic.w	r3, r3, #2
 8001864:	f043 0202 	orr.w	r2, r3, #2
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800187a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800188a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800188c:	4b92      	ldr	r3, [pc, #584]	; (8001ad8 <HAL_ADC_Init+0x308>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a92      	ldr	r2, [pc, #584]	; (8001adc <HAL_ADC_Init+0x30c>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0c9a      	lsrs	r2, r3, #18
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018a2:	e002      	b.n	80018aa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f9      	bne.n	80018a4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018cc:	d110      	bne.n	80018f0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f023 0312 	bic.w	r3, r3, #18
 80018d6:	f043 0210 	orr.w	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f043 0201 	orr.w	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f040 8150 	bne.w	8001b9e <HAL_ADC_Init+0x3ce>
 80018fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 814b 	bne.w	8001b9e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 8143 	bne.w	8001b9e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001920:	f043 0202 	orr.w	r2, r3, #2
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001930:	d004      	beq.n	800193c <HAL_ADC_Init+0x16c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6a      	ldr	r2, [pc, #424]	; (8001ae0 <HAL_ADC_Init+0x310>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_ADC_Init+0x170>
 800193c:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <HAL_ADC_Init+0x314>)
 800193e:	e000      	b.n	8001942 <HAL_ADC_Init+0x172>
 8001940:	4b69      	ldr	r3, [pc, #420]	; (8001ae8 <HAL_ADC_Init+0x318>)
 8001942:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800194c:	d102      	bne.n	8001954 <HAL_ADC_Init+0x184>
 800194e:	4b64      	ldr	r3, [pc, #400]	; (8001ae0 <HAL_ADC_Init+0x310>)
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e01a      	b.n	800198a <HAL_ADC_Init+0x1ba>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a61      	ldr	r2, [pc, #388]	; (8001ae0 <HAL_ADC_Init+0x310>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d103      	bne.n	8001966 <HAL_ADC_Init+0x196>
 800195e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	e011      	b.n	800198a <HAL_ADC_Init+0x1ba>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a60      	ldr	r2, [pc, #384]	; (8001aec <HAL_ADC_Init+0x31c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d102      	bne.n	8001976 <HAL_ADC_Init+0x1a6>
 8001970:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <HAL_ADC_Init+0x320>)
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e009      	b.n	800198a <HAL_ADC_Init+0x1ba>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5d      	ldr	r2, [pc, #372]	; (8001af0 <HAL_ADC_Init+0x320>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d102      	bne.n	8001986 <HAL_ADC_Init+0x1b6>
 8001980:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <HAL_ADC_Init+0x31c>)
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e001      	b.n	800198a <HAL_ADC_Init+0x1ba>
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_ADC_Init+0x1da>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Init+0x1da>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_ADC_Init+0x1dc>
 80019aa:	2300      	movs	r3, #0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d11c      	bne.n	80019ea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d010      	beq.n	80019d8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_ADC_Init+0x202>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Init+0x202>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_ADC_Init+0x204>
 80019d2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d108      	bne.n	80019ea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80019d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7e5b      	ldrb	r3, [r3, #25]
 80019ee:	035b      	lsls	r3, r3, #13
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019f4:	2a01      	cmp	r2, #1
 80019f6:	d002      	beq.n	80019fe <HAL_ADC_Init+0x22e>
 80019f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019fc:	e000      	b.n	8001a00 <HAL_ADC_Init+0x230>
 80019fe:	2200      	movs	r2, #0
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a10:	4313      	orrs	r3, r2
 8001a12:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d11b      	bne.n	8001a56 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7e5b      	ldrb	r3, [r3, #25]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d109      	bne.n	8001a3a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	045a      	lsls	r2, r3, #17
 8001a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a30:	4313      	orrs	r3, r2
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
 8001a38:	e00d      	b.n	8001a56 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001a42:	f043 0220 	orr.w	r2, r3, #32
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d054      	beq.n	8001b08 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a22      	ldr	r2, [pc, #136]	; (8001aec <HAL_ADC_Init+0x31c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d004      	beq.n	8001a72 <HAL_ADC_Init+0x2a2>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <HAL_ADC_Init+0x320>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d140      	bne.n	8001af4 <HAL_ADC_Init+0x324>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001a7a:	d02a      	beq.n	8001ad2 <HAL_ADC_Init+0x302>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a84:	d022      	beq.n	8001acc <HAL_ADC_Init+0x2fc>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001a8e:	d01a      	beq.n	8001ac6 <HAL_ADC_Init+0x2f6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001a98:	d012      	beq.n	8001ac0 <HAL_ADC_Init+0x2f0>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001aa2:	d00a      	beq.n	8001aba <HAL_ADC_Init+0x2ea>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001aac:	d002      	beq.n	8001ab4 <HAL_ADC_Init+0x2e4>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	e023      	b.n	8001afc <HAL_ADC_Init+0x32c>
 8001ab4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ab8:	e020      	b.n	8001afc <HAL_ADC_Init+0x32c>
 8001aba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001abe:	e01d      	b.n	8001afc <HAL_ADC_Init+0x32c>
 8001ac0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ac4:	e01a      	b.n	8001afc <HAL_ADC_Init+0x32c>
 8001ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aca:	e017      	b.n	8001afc <HAL_ADC_Init+0x32c>
 8001acc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ad0:	e014      	b.n	8001afc <HAL_ADC_Init+0x32c>
 8001ad2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ad6:	e011      	b.n	8001afc <HAL_ADC_Init+0x32c>
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	431bde83 	.word	0x431bde83
 8001ae0:	50000100 	.word	0x50000100
 8001ae4:	50000300 	.word	0x50000300
 8001ae8:	50000700 	.word	0x50000700
 8001aec:	50000400 	.word	0x50000400
 8001af0:	50000500 	.word	0x50000500
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b00:	4313      	orrs	r3, r2
 8001b02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b04:	4313      	orrs	r3, r2
 8001b06:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d114      	bne.n	8001b40 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b24:	f023 0302 	bic.w	r3, r3, #2
 8001b28:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e1b      	ldrb	r3, [r3, #24]
 8001b2e:	039a      	lsls	r2, r3, #14
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <HAL_ADC_Init+0x3f0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b50:	430b      	orrs	r3, r1
 8001b52:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d10c      	bne.n	8001b76 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f023 010f 	bic.w	r1, r3, #15
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	1e5a      	subs	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
 8001b74:	e007      	b.n	8001b86 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 020f 	bic.w	r2, r2, #15
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f023 0303 	bic.w	r3, r3, #3
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b9c:	e00a      	b.n	8001bb4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f023 0312 	bic.w	r3, r3, #18
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001bb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3768      	adds	r7, #104	; 0x68
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	fff0c007 	.word	0xfff0c007

08001bc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 80f7 	bne.w	8001dd2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Start_DMA+0x2e>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e0f2      	b.n	8001dd8 <HAL_ADC_Start_DMA+0x214>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c02:	d004      	beq.n	8001c0e <HAL_ADC_Start_DMA+0x4a>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a75      	ldr	r2, [pc, #468]	; (8001de0 <HAL_ADC_Start_DMA+0x21c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d109      	bne.n	8001c22 <HAL_ADC_Start_DMA+0x5e>
 8001c0e:	4b75      	ldr	r3, [pc, #468]	; (8001de4 <HAL_ADC_Start_DMA+0x220>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	e008      	b.n	8001c34 <HAL_ADC_Start_DMA+0x70>
 8001c22:	4b71      	ldr	r3, [pc, #452]	; (8001de8 <HAL_ADC_Start_DMA+0x224>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80c5 	beq.w	8001dc4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 fd22 	bl	8002684 <ADC_Enable>
 8001c40:	4603      	mov	r3, r0
 8001c42:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 80b7 	bne.w	8001dba <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c68:	d004      	beq.n	8001c74 <HAL_ADC_Start_DMA+0xb0>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5c      	ldr	r2, [pc, #368]	; (8001de0 <HAL_ADC_Start_DMA+0x21c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d106      	bne.n	8001c82 <HAL_ADC_Start_DMA+0xbe>
 8001c74:	4b5b      	ldr	r3, [pc, #364]	; (8001de4 <HAL_ADC_Start_DMA+0x220>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d010      	beq.n	8001ca2 <HAL_ADC_Start_DMA+0xde>
 8001c80:	e005      	b.n	8001c8e <HAL_ADC_Start_DMA+0xca>
 8001c82:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <HAL_ADC_Start_DMA+0x224>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_ADC_Start_DMA+0xde>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c96:	d004      	beq.n	8001ca2 <HAL_ADC_Start_DMA+0xde>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a53      	ldr	r2, [pc, #332]	; (8001dec <HAL_ADC_Start_DMA+0x228>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d115      	bne.n	8001cce <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d036      	beq.n	8001d2a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ccc:	e02d      	b.n	8001d2a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce2:	d004      	beq.n	8001cee <HAL_ADC_Start_DMA+0x12a>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3d      	ldr	r2, [pc, #244]	; (8001de0 <HAL_ADC_Start_DMA+0x21c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10a      	bne.n	8001d04 <HAL_ADC_Start_DMA+0x140>
 8001cee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	e008      	b.n	8001d16 <HAL_ADC_Start_DMA+0x152>
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <HAL_ADC_Start_DMA+0x228>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf14      	ite	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	2300      	moveq	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d36:	d106      	bne.n	8001d46 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	f023 0206 	bic.w	r2, r3, #6
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <HAL_ADC_Start_DMA+0x22c>)
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <HAL_ADC_Start_DMA+0x230>)
 8001d62:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <HAL_ADC_Start_DMA+0x234>)
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	221c      	movs	r2, #28
 8001d72:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0210 	orr.w	r2, r2, #16
 8001d82:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3340      	adds	r3, #64	; 0x40
 8001d9e:	4619      	mov	r1, r3
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f000 fe90 	bl	8002ac8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0204 	orr.w	r2, r2, #4
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	e00d      	b.n	8001dd6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001dc2:	e008      	b.n	8001dd6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001dd0:	e001      	b.n	8001dd6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	50000100 	.word	0x50000100
 8001de4:	50000300 	.word	0x50000300
 8001de8:	50000700 	.word	0x50000700
 8001dec:	50000400 	.word	0x50000400
 8001df0:	080025b9 	.word	0x080025b9
 8001df4:	08002633 	.word	0x08002633
 8001df8:	0800264f 	.word	0x0800264f

08001dfc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b09b      	sub	sp, #108	; 0x6c
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x22>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e2ca      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x5b8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f040 82ae 	bne.w	8002392 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d81c      	bhi.n	8001e78 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	461a      	mov	r2, r3
 8001e52:	231f      	movs	r3, #31
 8001e54:	4093      	lsls	r3, r2
 8001e56:	43db      	mvns	r3, r3
 8001e58:	4019      	ands	r1, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
 8001e76:	e063      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	d81e      	bhi.n	8001ebe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	3b1e      	subs	r3, #30
 8001e94:	221f      	movs	r2, #31
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4019      	ands	r1, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	3b1e      	subs	r3, #30
 8001eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34
 8001ebc:	e040      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b0e      	cmp	r3, #14
 8001ec4:	d81e      	bhi.n	8001f04 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	3b3c      	subs	r3, #60	; 0x3c
 8001eda:	221f      	movs	r2, #31
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4019      	ands	r1, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	3b3c      	subs	r3, #60	; 0x3c
 8001ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
 8001f02:	e01d      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	3b5a      	subs	r3, #90	; 0x5a
 8001f18:	221f      	movs	r2, #31
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	4019      	ands	r1, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	3b5a      	subs	r3, #90	; 0x5a
 8001f34:	fa00 f203 	lsl.w	r2, r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80e5 	bne.w	800211a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	d91c      	bls.n	8001f92 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6999      	ldr	r1, [r3, #24]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	3b1e      	subs	r3, #30
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4019      	ands	r1, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6898      	ldr	r0, [r3, #8]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	3b1e      	subs	r3, #30
 8001f84:	fa00 f203 	lsl.w	r2, r0, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	619a      	str	r2, [r3, #24]
 8001f90:	e019      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6959      	ldr	r1, [r3, #20]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4019      	ands	r1, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6898      	ldr	r0, [r3, #8]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d84f      	bhi.n	8002088 <HAL_ADC_ConfigChannel+0x28c>
 8001fe8:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <HAL_ADC_ConfigChannel+0x1f4>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002023 	.word	0x08002023
 8001ff8:	08002045 	.word	0x08002045
 8001ffc:	08002067 	.word	0x08002067
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002006:	4b9a      	ldr	r3, [pc, #616]	; (8002270 <HAL_ADC_ConfigChannel+0x474>)
 8002008:	4013      	ands	r3, r2
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	0691      	lsls	r1, r2, #26
 8002010:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002012:	430a      	orrs	r2, r1
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800201e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002020:	e07e      	b.n	8002120 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002028:	4b91      	ldr	r3, [pc, #580]	; (8002270 <HAL_ADC_ConfigChannel+0x474>)
 800202a:	4013      	ands	r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	0691      	lsls	r1, r2, #26
 8002032:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002034:	430a      	orrs	r2, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002040:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002042:	e06d      	b.n	8002120 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800204a:	4b89      	ldr	r3, [pc, #548]	; (8002270 <HAL_ADC_ConfigChannel+0x474>)
 800204c:	4013      	ands	r3, r2
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	0691      	lsls	r1, r2, #26
 8002054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002056:	430a      	orrs	r2, r1
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002062:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002064:	e05c      	b.n	8002120 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800206c:	4b80      	ldr	r3, [pc, #512]	; (8002270 <HAL_ADC_ConfigChannel+0x474>)
 800206e:	4013      	ands	r3, r2
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	0691      	lsls	r1, r2, #26
 8002076:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002078:	430a      	orrs	r2, r1
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002084:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002086:	e04b      	b.n	8002120 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	069b      	lsls	r3, r3, #26
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020aa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	069b      	lsls	r3, r3, #26
 80020bc:	429a      	cmp	r2, r3
 80020be:	d107      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020ce:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	069b      	lsls	r3, r3, #26
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d107      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020f2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	069b      	lsls	r3, r3, #26
 8002104:	429a      	cmp	r2, r3
 8002106:	d10a      	bne.n	800211e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002116:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002118:	e001      	b.n	800211e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800211a:	bf00      	nop
 800211c:	e000      	b.n	8002120 <HAL_ADC_ConfigChannel+0x324>
      break;
 800211e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d108      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x344>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x344>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_ADC_ConfigChannel+0x346>
 8002140:	2300      	movs	r3, #0
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 8130 	bne.w	80023a8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d00f      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	400a      	ands	r2, r1
 800216a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800216e:	e049      	b.n	8002204 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2201      	movs	r2, #1
 800217e:	409a      	lsls	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b09      	cmp	r3, #9
 8002190:	d91c      	bls.n	80021cc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6999      	ldr	r1, [r3, #24]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	3b1b      	subs	r3, #27
 80021a4:	2207      	movs	r2, #7
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	4019      	ands	r1, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6898      	ldr	r0, [r3, #8]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	3b1b      	subs	r3, #27
 80021be:	fa00 f203 	lsl.w	r2, r0, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	619a      	str	r2, [r3, #24]
 80021ca:	e01b      	b.n	8002204 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6959      	ldr	r1, [r3, #20]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	2207      	movs	r2, #7
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4019      	ands	r1, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6898      	ldr	r0, [r3, #8]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	fa00 f203 	lsl.w	r2, r0, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800220c:	d004      	beq.n	8002218 <HAL_ADC_ConfigChannel+0x41c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a18      	ldr	r2, [pc, #96]	; (8002274 <HAL_ADC_ConfigChannel+0x478>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x420>
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_ADC_ConfigChannel+0x47c>)
 800221a:	e000      	b.n	800221e <HAL_ADC_ConfigChannel+0x422>
 800221c:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_ADC_ConfigChannel+0x480>)
 800221e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b10      	cmp	r3, #16
 8002226:	d105      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d015      	beq.n	8002260 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002238:	2b11      	cmp	r3, #17
 800223a:	d105      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800223c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00b      	beq.n	8002260 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800224c:	2b12      	cmp	r3, #18
 800224e:	f040 80ab 	bne.w	80023a8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 80a4 	bne.w	80023a8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002268:	d10a      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x484>
 800226a:	4b02      	ldr	r3, [pc, #8]	; (8002274 <HAL_ADC_ConfigChannel+0x478>)
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e022      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x4ba>
 8002270:	83fff000 	.word	0x83fff000
 8002274:	50000100 	.word	0x50000100
 8002278:	50000300 	.word	0x50000300
 800227c:	50000700 	.word	0x50000700
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a4e      	ldr	r2, [pc, #312]	; (80023c0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d103      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x496>
 800228a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e011      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x4ba>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a4b      	ldr	r2, [pc, #300]	; (80023c4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d102      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x4a6>
 800229c:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_ADC_ConfigChannel+0x5cc>)
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e009      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x4ba>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a48      	ldr	r2, [pc, #288]	; (80023c8 <HAL_ADC_ConfigChannel+0x5cc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d102      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x4b6>
 80022ac:	4b45      	ldr	r3, [pc, #276]	; (80023c4 <HAL_ADC_ConfigChannel+0x5c8>)
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e001      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x4ba>
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d108      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x4da>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x4da>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x4dc>
 80022d6:	2300      	movs	r3, #0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d150      	bne.n	800237e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022dc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x502>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x502>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_ADC_ConfigChannel+0x504>
 80022fe:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002300:	2b00      	cmp	r3, #0
 8002302:	d13c      	bne.n	800237e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b10      	cmp	r3, #16
 800230a:	d11d      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x54c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002314:	d118      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800231e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002320:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_ADC_ConfigChannel+0x5d0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	0c9a      	lsrs	r2, r3, #18
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002338:	e002      	b.n	8002340 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3b01      	subs	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f9      	bne.n	800233a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002346:	e02e      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b11      	cmp	r3, #17
 800234e:	d10b      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x56c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002358:	d106      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800235a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002364:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002366:	e01e      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b12      	cmp	r3, #18
 800236e:	d11a      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800237c:	e013      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f043 0220 	orr.w	r2, r3, #32
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002390:	e00a      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f043 0220 	orr.w	r2, r3, #32
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80023a4:	e000      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023a6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	376c      	adds	r7, #108	; 0x6c
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	50000100 	.word	0x50000100
 80023c4:	50000400 	.word	0x50000400
 80023c8:	50000500 	.word	0x50000500
 80023cc:	20000000 	.word	0x20000000
 80023d0:	431bde83 	.word	0x431bde83

080023d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b099      	sub	sp, #100	; 0x64
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ec:	d102      	bne.n	80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80023ee:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	e01a      	b.n	800242a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6a      	ldr	r2, [pc, #424]	; (80025a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d103      	bne.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80023fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	e011      	b.n	800242a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a67      	ldr	r2, [pc, #412]	; (80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d102      	bne.n	8002416 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002410:	4b66      	ldr	r3, [pc, #408]	; (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	e009      	b.n	800242a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a64      	ldr	r2, [pc, #400]	; (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d102      	bne.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002420:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	e001      	b.n	800242a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0b0      	b.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800243e:	2302      	movs	r3, #2
 8002440:	e0a9      	b.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 808d 	bne.w	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8086 	bne.w	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002470:	d004      	beq.n	800247c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a4b      	ldr	r2, [pc, #300]	; (80025a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d101      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800247c:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800247e:	e000      	b.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002482:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d040      	beq.n	800250e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800248c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800249e:	035b      	lsls	r3, r3, #13
 80024a0:	430b      	orrs	r3, r1
 80024a2:	431a      	orrs	r2, r3
 80024a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80024c8:	2300      	movs	r3, #0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d15c      	bne.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80024ea:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d14b      	bne.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024f8:	f023 030f 	bic.w	r3, r3, #15
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	6811      	ldr	r1, [r2, #0]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	6892      	ldr	r2, [r2, #8]
 8002504:	430a      	orrs	r2, r1
 8002506:	431a      	orrs	r2, r3
 8002508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800250a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800250c:	e03c      	b.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800250e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002518:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d108      	bne.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800253a:	2300      	movs	r3, #0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d123      	bne.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800255c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800255e:	2b00      	cmp	r3, #0
 8002560:	d112      	bne.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800256a:	f023 030f 	bic.w	r3, r3, #15
 800256e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002570:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002572:	e009      	b.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002586:	e000      	b.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002588:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002592:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002596:	4618      	mov	r0, r3
 8002598:	3764      	adds	r7, #100	; 0x64
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	50000100 	.word	0x50000100
 80025a8:	50000400 	.word	0x50000400
 80025ac:	50000500 	.word	0x50000500
 80025b0:	50000300 	.word	0x50000300
 80025b4:	50000700 	.word	0x50000700

080025b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d126      	bne.n	8002620 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d115      	bne.n	8002618 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d111      	bne.n	8002618 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff f8bb 	bl	8001794 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800261e:	e004      	b.n	800262a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	4798      	blx	r3
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff f8b1 	bl	80017a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f043 0204 	orr.w	r2, r3, #4
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff f8a1 	bl	80017bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d108      	bne.n	80026b0 <ADC_Enable+0x2c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <ADC_Enable+0x2c>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <ADC_Enable+0x2e>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d143      	bne.n	800273e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	4b22      	ldr	r3, [pc, #136]	; (8002748 <ADC_Enable+0xc4>)
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	f043 0210 	orr.w	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e02f      	b.n	8002740 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80026f0:	f7ff f820 	bl	8001734 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026f6:	e01b      	b.n	8002730 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026f8:	f7ff f81c 	bl	8001734 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d914      	bls.n	8002730 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d00d      	beq.n	8002730 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f043 0210 	orr.w	r2, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e007      	b.n	8002740 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d1dc      	bne.n	80026f8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	8000003f 	.word	0x8000003f

0800274c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d108      	bne.n	8002778 <ADC_Disable+0x2c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <ADC_Disable+0x2c>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <ADC_Disable+0x2e>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d047      	beq.n	800280e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030d 	and.w	r3, r3, #13
 8002788:	2b01      	cmp	r3, #1
 800278a:	d10f      	bne.n	80027ac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0202 	orr.w	r2, r2, #2
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2203      	movs	r2, #3
 80027a2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80027a4:	f7fe ffc6 	bl	8001734 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027aa:	e029      	b.n	8002800 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0210 	orr.w	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e023      	b.n	8002810 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027c8:	f7fe ffb4 	bl	8001734 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d914      	bls.n	8002800 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10d      	bne.n	8002800 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f043 0210 	orr.w	r2, r3, #16
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d0dc      	beq.n	80027c8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <__NVIC_GetPriorityGrouping+0x18>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0307 	and.w	r3, r3, #7
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db0b      	blt.n	80028a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4907      	ldr	r1, [pc, #28]	; (80028b4 <__NVIC_EnableIRQ+0x38>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2001      	movs	r0, #1
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff8e 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff29 	bl	8002818 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff3e 	bl	8002860 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff8e 	bl	800290c <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5d 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff31 	bl	800287c <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa2 	bl	8002974 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e037      	b.n	8002ac0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f9b8 	bl	8002e18 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}  
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_DMA_Start_IT+0x20>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e04a      	b.n	8002b7e <HAL_DMA_Start_IT+0xb6>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d13a      	bne.n	8002b70 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f94b 	bl	8002dba <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 020e 	orr.w	r2, r2, #14
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e00f      	b.n	8002b5e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 020a 	orr.w	r2, r2, #10
 8002b4c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0204 	bic.w	r2, r2, #4
 8002b5c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e005      	b.n	8002b7c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d008      	beq.n	8002baa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e020      	b.n	8002bec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 020e 	bic.w	r2, r2, #14
 8002bb8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d005      	beq.n	8002c1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2204      	movs	r2, #4
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	e027      	b.n	8002c6a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 020e 	bic.w	r2, r2, #14
 8002c28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
    } 
  }
  return status;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	2204      	movs	r2, #4
 8002c92:	409a      	lsls	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d024      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x72>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01f      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0204 	bic.w	r2, r2, #4
 8002cc2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ccc:	2104      	movs	r1, #4
 8002cce:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d06a      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ce4:	e065      	b.n	8002db2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2202      	movs	r2, #2
 8002cec:	409a      	lsls	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02c      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xdc>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d027      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10b      	bne.n	8002d26 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 020a 	bic.w	r2, r2, #10
 8002d1c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	2102      	movs	r1, #2
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d035      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002d4e:	e030      	b.n	8002db2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2208      	movs	r2, #8
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d028      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x13e>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d023      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 020e 	bic.w	r2, r2, #14
 8002d78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
    }
  }
}  
 8002db0:	e7ff      	b.n	8002db2 <HAL_DMA_IRQHandler+0x13e>
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d108      	bne.n	8002dfa <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002df8:	e007      	b.n	8002e0a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	60da      	str	r2, [r3, #12]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <DMA_CalcBaseAndBitshift+0x60>)
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d80f      	bhi.n	8002e4c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <DMA_CalcBaseAndBitshift+0x64>)
 8002e34:	4413      	add	r3, r2
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <DMA_CalcBaseAndBitshift+0x68>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	009a      	lsls	r2, r3, #2
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <DMA_CalcBaseAndBitshift+0x6c>)
 8002e48:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002e4a:	e00e      	b.n	8002e6a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <DMA_CalcBaseAndBitshift+0x70>)
 8002e54:	4413      	add	r3, r2
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <DMA_CalcBaseAndBitshift+0x68>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	009a      	lsls	r2, r3, #2
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <DMA_CalcBaseAndBitshift+0x74>)
 8002e68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40020407 	.word	0x40020407
 8002e7c:	bffdfff8 	.word	0xbffdfff8
 8002e80:	cccccccd 	.word	0xcccccccd
 8002e84:	40020000 	.word	0x40020000
 8002e88:	bffdfbf8 	.word	0xbffdfbf8
 8002e8c:	40020400 	.word	0x40020400

08002e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e9e:	e160      	b.n	8003162 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	4013      	ands	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8152 	beq.w	800315c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d005      	beq.n	8002ed0 <HAL_GPIO_Init+0x40>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d130      	bne.n	8002f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2203      	movs	r2, #3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f06:	2201      	movs	r2, #1
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f003 0201 	and.w	r2, r3, #1
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d017      	beq.n	8002f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2203      	movs	r2, #3
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d123      	bne.n	8002fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	08da      	lsrs	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3208      	adds	r2, #8
 8002f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	08da      	lsrs	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	6939      	ldr	r1, [r7, #16]
 8002fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2203      	movs	r2, #3
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0203 	and.w	r2, r3, #3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80ac 	beq.w	800315c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003004:	4b5e      	ldr	r3, [pc, #376]	; (8003180 <HAL_GPIO_Init+0x2f0>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	4a5d      	ldr	r2, [pc, #372]	; (8003180 <HAL_GPIO_Init+0x2f0>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6193      	str	r3, [r2, #24]
 8003010:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <HAL_GPIO_Init+0x2f0>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800301c:	4a59      	ldr	r2, [pc, #356]	; (8003184 <HAL_GPIO_Init+0x2f4>)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	3302      	adds	r3, #2
 8003024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	220f      	movs	r2, #15
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003046:	d025      	beq.n	8003094 <HAL_GPIO_Init+0x204>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a4f      	ldr	r2, [pc, #316]	; (8003188 <HAL_GPIO_Init+0x2f8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d01f      	beq.n	8003090 <HAL_GPIO_Init+0x200>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a4e      	ldr	r2, [pc, #312]	; (800318c <HAL_GPIO_Init+0x2fc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d019      	beq.n	800308c <HAL_GPIO_Init+0x1fc>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a4d      	ldr	r2, [pc, #308]	; (8003190 <HAL_GPIO_Init+0x300>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_GPIO_Init+0x1f8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a4c      	ldr	r2, [pc, #304]	; (8003194 <HAL_GPIO_Init+0x304>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00d      	beq.n	8003084 <HAL_GPIO_Init+0x1f4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a4b      	ldr	r2, [pc, #300]	; (8003198 <HAL_GPIO_Init+0x308>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <HAL_GPIO_Init+0x1f0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a4a      	ldr	r2, [pc, #296]	; (800319c <HAL_GPIO_Init+0x30c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_GPIO_Init+0x1ec>
 8003078:	2306      	movs	r3, #6
 800307a:	e00c      	b.n	8003096 <HAL_GPIO_Init+0x206>
 800307c:	2307      	movs	r3, #7
 800307e:	e00a      	b.n	8003096 <HAL_GPIO_Init+0x206>
 8003080:	2305      	movs	r3, #5
 8003082:	e008      	b.n	8003096 <HAL_GPIO_Init+0x206>
 8003084:	2304      	movs	r3, #4
 8003086:	e006      	b.n	8003096 <HAL_GPIO_Init+0x206>
 8003088:	2303      	movs	r3, #3
 800308a:	e004      	b.n	8003096 <HAL_GPIO_Init+0x206>
 800308c:	2302      	movs	r3, #2
 800308e:	e002      	b.n	8003096 <HAL_GPIO_Init+0x206>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_GPIO_Init+0x206>
 8003094:	2300      	movs	r3, #0
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	f002 0203 	and.w	r2, r2, #3
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	4093      	lsls	r3, r2
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030a6:	4937      	ldr	r1, [pc, #220]	; (8003184 <HAL_GPIO_Init+0x2f4>)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3302      	adds	r3, #2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b4:	4b3a      	ldr	r3, [pc, #232]	; (80031a0 <HAL_GPIO_Init+0x310>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43db      	mvns	r3, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030d8:	4a31      	ldr	r2, [pc, #196]	; (80031a0 <HAL_GPIO_Init+0x310>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_GPIO_Init+0x310>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003102:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <HAL_GPIO_Init+0x310>)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_GPIO_Init+0x310>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43db      	mvns	r3, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800312c:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <HAL_GPIO_Init+0x310>)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003132:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_GPIO_Init+0x310>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003156:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <HAL_GPIO_Init+0x310>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	f47f ae97 	bne.w	8002ea0 <HAL_GPIO_Init+0x10>
  }
}
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40021000 	.word	0x40021000
 8003184:	40010000 	.word	0x40010000
 8003188:	48000400 	.word	0x48000400
 800318c:	48000800 	.word	0x48000800
 8003190:	48000c00 	.word	0x48000c00
 8003194:	48001000 	.word	0x48001000
 8003198:	48001400 	.word	0x48001400
 800319c:	48001800 	.word	0x48001800
 80031a0:	40010400 	.word	0x40010400

080031a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
 80031b0:	4613      	mov	r3, r2
 80031b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b4:	787b      	ldrb	r3, [r7, #1]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031c0:	e002      	b.n	80031c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd ffe4 	bl	80011c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40010400 	.word	0x40010400

08003204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800320a:	af00      	add	r7, sp, #0
 800320c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003210:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003214:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800321a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	f001 b83a 	b.w	800429e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 816f 	beq.w	800351e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003240:	4bb5      	ldr	r3, [pc, #724]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b04      	cmp	r3, #4
 800324a:	d00c      	beq.n	8003266 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800324c:	4bb2      	ldr	r3, [pc, #712]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d15c      	bne.n	8003312 <HAL_RCC_OscConfig+0x10e>
 8003258:	4baf      	ldr	r3, [pc, #700]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d155      	bne.n	8003312 <HAL_RCC_OscConfig+0x10e>
 8003266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800327a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <HAL_RCC_OscConfig+0x94>
 8003292:	4ba1      	ldr	r3, [pc, #644]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e015      	b.n	80032c4 <HAL_RCC_OscConfig+0xc0>
 8003298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800329c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80032ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80032b4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80032c0:	4b95      	ldr	r3, [pc, #596]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032c8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80032cc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80032d0:	fa92 f2a2 	rbit	r2, r2
 80032d4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80032d8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80032dc:	fab2 f282 	clz	r2, r2
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	f042 0220 	orr.w	r2, r2, #32
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	f002 021f 	and.w	r2, r2, #31
 80032ec:	2101      	movs	r1, #1
 80032ee:	fa01 f202 	lsl.w	r2, r1, r2
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8111 	beq.w	800351c <HAL_RCC_OscConfig+0x318>
 80032fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f040 8108 	bne.w	800351c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f000 bfc6 	b.w	800429e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003316:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003322:	d106      	bne.n	8003332 <HAL_RCC_OscConfig+0x12e>
 8003324:	4b7c      	ldr	r3, [pc, #496]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a7b      	ldr	r2, [pc, #492]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e036      	b.n	80033a0 <HAL_RCC_OscConfig+0x19c>
 8003332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003336:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x158>
 8003342:	4b75      	ldr	r3, [pc, #468]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a74      	ldr	r2, [pc, #464]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b72      	ldr	r3, [pc, #456]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a71      	ldr	r2, [pc, #452]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e021      	b.n	80033a0 <HAL_RCC_OscConfig+0x19c>
 800335c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003360:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x184>
 800336e:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a69      	ldr	r2, [pc, #420]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a66      	ldr	r2, [pc, #408]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e00b      	b.n	80033a0 <HAL_RCC_OscConfig+0x19c>
 8003388:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a62      	ldr	r2, [pc, #392]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 800338e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b60      	ldr	r3, [pc, #384]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5f      	ldr	r2, [pc, #380]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 800339a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d059      	beq.n	8003464 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe f9c0 	bl	8001734 <HAL_GetTick>
 80033b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b8:	e00a      	b.n	80033d0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ba:	f7fe f9bb 	bl	8001734 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d902      	bls.n	80033d0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	f000 bf67 	b.w	800429e <HAL_RCC_OscConfig+0x109a>
 80033d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80033e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d102      	bne.n	8003402 <HAL_RCC_OscConfig+0x1fe>
 80033fc:	4b46      	ldr	r3, [pc, #280]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	e015      	b.n	800342e <HAL_RCC_OscConfig+0x22a>
 8003402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003406:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800341a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800341e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003432:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003436:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800343a:	fa92 f2a2 	rbit	r2, r2
 800343e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003442:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003446:	fab2 f282 	clz	r2, r2
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	f042 0220 	orr.w	r2, r2, #32
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	f002 021f 	and.w	r2, r2, #31
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f202 	lsl.w	r2, r1, r2
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0ab      	beq.n	80033ba <HAL_RCC_OscConfig+0x1b6>
 8003462:	e05c      	b.n	800351e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe f966 	bl	8001734 <HAL_GetTick>
 8003468:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346c:	e00a      	b.n	8003484 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800346e:	f7fe f961 	bl	8001734 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d902      	bls.n	8003484 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	f000 bf0d 	b.w	800429e <HAL_RCC_OscConfig+0x109a>
 8003484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003488:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003498:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2b2>
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	e015      	b.n	80034e2 <HAL_RCC_OscConfig+0x2de>
 80034b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80034ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80034d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <HAL_RCC_OscConfig+0x314>)
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034e6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80034ea:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80034ee:	fa92 f2a2 	rbit	r2, r2
 80034f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80034f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034fa:	fab2 f282 	clz	r2, r2
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f042 0220 	orr.w	r2, r2, #32
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	f002 021f 	and.w	r2, r2, #31
 800350a:	2101      	movs	r1, #1
 800350c:	fa01 f202 	lsl.w	r2, r1, r2
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ab      	bne.n	800346e <HAL_RCC_OscConfig+0x26a>
 8003516:	e002      	b.n	800351e <HAL_RCC_OscConfig+0x31a>
 8003518:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003522:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 817f 	beq.w	8003832 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003534:	4ba7      	ldr	r3, [pc, #668]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00c      	beq.n	800355a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003540:	4ba4      	ldr	r3, [pc, #656]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b08      	cmp	r3, #8
 800354a:	d173      	bne.n	8003634 <HAL_RCC_OscConfig+0x430>
 800354c:	4ba1      	ldr	r3, [pc, #644]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003558:	d16c      	bne.n	8003634 <HAL_RCC_OscConfig+0x430>
 800355a:	2302      	movs	r3, #2
 800355c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800356c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d102      	bne.n	800358a <HAL_RCC_OscConfig+0x386>
 8003584:	4b93      	ldr	r3, [pc, #588]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	e013      	b.n	80035b2 <HAL_RCC_OscConfig+0x3ae>
 800358a:	2302      	movs	r3, #2
 800358c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800359c:	2302      	movs	r3, #2
 800359e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80035a2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80035ae:	4b89      	ldr	r3, [pc, #548]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2202      	movs	r2, #2
 80035b4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80035b8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80035bc:	fa92 f2a2 	rbit	r2, r2
 80035c0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80035c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80035c8:	fab2 f282 	clz	r2, r2
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f042 0220 	orr.w	r2, r2, #32
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f002 021f 	and.w	r2, r2, #31
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f202 	lsl.w	r2, r1, r2
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCC_OscConfig+0x3f6>
 80035e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d002      	beq.n	80035fa <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f000 be52 	b.w	800429e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fa:	4b76      	ldr	r3, [pc, #472]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003606:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	21f8      	movs	r1, #248	; 0xf8
 8003610:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003618:	fa91 f1a1 	rbit	r1, r1
 800361c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003620:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003624:	fab1 f181 	clz	r1, r1
 8003628:	b2c9      	uxtb	r1, r1
 800362a:	408b      	lsls	r3, r1
 800362c:	4969      	ldr	r1, [pc, #420]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	e0fe      	b.n	8003832 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003638:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8088 	beq.w	8003756 <HAL_RCC_OscConfig+0x552>
 8003646:	2301      	movs	r3, #1
 8003648:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003650:	fa93 f3a3 	rbit	r3, r3
 8003654:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003658:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003666:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	461a      	mov	r2, r3
 800366e:	2301      	movs	r3, #1
 8003670:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fe f85f 	bl	8001734 <HAL_GetTick>
 8003676:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367a:	e00a      	b.n	8003692 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367c:	f7fe f85a 	bl	8001734 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d902      	bls.n	8003692 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	f000 be06 	b.w	800429e <HAL_RCC_OscConfig+0x109a>
 8003692:	2302      	movs	r3, #2
 8003694:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80036a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0x4be>
 80036bc:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e013      	b.n	80036ea <HAL_RCC_OscConfig+0x4e6>
 80036c2:	2302      	movs	r3, #2
 80036c4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80036d4:	2302      	movs	r3, #2
 80036d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036da:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036e6:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2202      	movs	r2, #2
 80036ec:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80036f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80036f4:	fa92 f2a2 	rbit	r2, r2
 80036f8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80036fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003700:	fab2 f282 	clz	r2, r2
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f042 0220 	orr.w	r2, r2, #32
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f002 021f 	and.w	r2, r2, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f202 	lsl.w	r2, r1, r2
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0af      	beq.n	800367c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003728:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	21f8      	movs	r1, #248	; 0xf8
 8003732:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800373a:	fa91 f1a1 	rbit	r1, r1
 800373e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003742:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003746:	fab1 f181 	clz	r1, r1
 800374a:	b2c9      	uxtb	r1, r1
 800374c:	408b      	lsls	r3, r1
 800374e:	4921      	ldr	r1, [pc, #132]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]
 8003754:	e06d      	b.n	8003832 <HAL_RCC_OscConfig+0x62e>
 8003756:	2301      	movs	r3, #1
 8003758:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003768:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003776:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	461a      	mov	r2, r3
 800377e:	2300      	movs	r3, #0
 8003780:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fd ffd7 	bl	8001734 <HAL_GetTick>
 8003786:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800378c:	f7fd ffd2 	bl	8001734 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d902      	bls.n	80037a2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	f000 bd7e 	b.w	800429e <HAL_RCC_OscConfig+0x109a>
 80037a2:	2302      	movs	r3, #2
 80037a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80037b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d105      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5d4>
 80037cc:	4b01      	ldr	r3, [pc, #4]	; (80037d4 <HAL_RCC_OscConfig+0x5d0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	e016      	b.n	8003800 <HAL_RCC_OscConfig+0x5fc>
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	2302      	movs	r3, #2
 80037da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037ea:	2302      	movs	r3, #2
 80037ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037fc:	4bbf      	ldr	r3, [pc, #764]	; (8003afc <HAL_RCC_OscConfig+0x8f8>)
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	2202      	movs	r2, #2
 8003802:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003806:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800380a:	fa92 f2a2 	rbit	r2, r2
 800380e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003812:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003816:	fab2 f282 	clz	r2, r2
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f042 0220 	orr.w	r2, r2, #32
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f002 021f 	and.w	r2, r2, #31
 8003826:	2101      	movs	r1, #1
 8003828:	fa01 f202 	lsl.w	r2, r1, r2
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1ac      	bne.n	800378c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003836:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8113 	beq.w	8003a6e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d07c      	beq.n	8003952 <HAL_RCC_OscConfig+0x74e>
 8003858:	2301      	movs	r3, #1
 800385a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800386a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	4ba2      	ldr	r3, [pc, #648]	; (8003b00 <HAL_RCC_OscConfig+0x8fc>)
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	461a      	mov	r2, r3
 800387e:	2301      	movs	r3, #1
 8003880:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003882:	f7fd ff57 	bl	8001734 <HAL_GetTick>
 8003886:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388c:	f7fd ff52 	bl	8001734 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d902      	bls.n	80038a2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	f000 bcfe 	b.w	800429e <HAL_RCC_OscConfig+0x109a>
 80038a2:	2302      	movs	r3, #2
 80038a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ac:	fa93 f2a3 	rbit	r2, r3
 80038b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038c2:	2202      	movs	r2, #2
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	fa93 f2a3 	rbit	r2, r3
 80038d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038e6:	2202      	movs	r2, #2
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	fa93 f2a3 	rbit	r2, r3
 80038f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003900:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <HAL_RCC_OscConfig+0x8f8>)
 8003904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800390a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800390e:	2102      	movs	r1, #2
 8003910:	6019      	str	r1, [r3, #0]
 8003912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003916:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	fa93 f1a3 	rbit	r1, r3
 8003920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003924:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003928:	6019      	str	r1, [r3, #0]
  return result;
 800392a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800392e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	fab3 f383 	clz	r3, r3
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	2101      	movs	r1, #1
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d09d      	beq.n	800388c <HAL_RCC_OscConfig+0x688>
 8003950:	e08d      	b.n	8003a6e <HAL_RCC_OscConfig+0x86a>
 8003952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003956:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003962:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	fa93 f2a3 	rbit	r2, r3
 800396c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003970:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003974:	601a      	str	r2, [r3, #0]
  return result;
 8003976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800397e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <HAL_RCC_OscConfig+0x8fc>)
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	461a      	mov	r2, r3
 8003990:	2300      	movs	r3, #0
 8003992:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003994:	f7fd fece 	bl	8001734 <HAL_GetTick>
 8003998:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399e:	f7fd fec9 	bl	8001734 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d902      	bls.n	80039b4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	f000 bc75 	b.w	800429e <HAL_RCC_OscConfig+0x109a>
 80039b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80039bc:	2202      	movs	r2, #2
 80039be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	fa93 f2a3 	rbit	r2, r3
 80039ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039e0:	2202      	movs	r2, #2
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	fa93 f2a3 	rbit	r2, r3
 80039f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a04:	2202      	movs	r2, #2
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	fa93 f2a3 	rbit	r2, r3
 8003a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a1e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a20:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCC_OscConfig+0x8f8>)
 8003a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	6019      	str	r1, [r3, #0]
 8003a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a34:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	fa93 f1a3 	rbit	r1, r3
 8003a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a42:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a46:	6019      	str	r1, [r3, #0]
  return result;
 8003a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d197      	bne.n	800399e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 81a5 	beq.w	8003dce <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8a:	4b1c      	ldr	r3, [pc, #112]	; (8003afc <HAL_RCC_OscConfig+0x8f8>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d116      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	4b19      	ldr	r3, [pc, #100]	; (8003afc <HAL_RCC_OscConfig+0x8f8>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	4a18      	ldr	r2, [pc, #96]	; (8003afc <HAL_RCC_OscConfig+0x8f8>)
 8003a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	61d3      	str	r3, [r2, #28]
 8003aa2:	4b16      	ldr	r3, [pc, #88]	; (8003afc <HAL_RCC_OscConfig+0x8f8>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003abc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <HAL_RCC_OscConfig+0x900>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d121      	bne.n	8003b14 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <HAL_RCC_OscConfig+0x900>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <HAL_RCC_OscConfig+0x900>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003adc:	f7fd fe2a 	bl	8001734 <HAL_GetTick>
 8003ae0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	e010      	b.n	8003b08 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fd fe25 	bl	8001734 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	; 0x64
 8003af4:	d908      	bls.n	8003b08 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e3d1      	b.n	800429e <HAL_RCC_OscConfig+0x109a>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	10908120 	.word	0x10908120
 8003b04:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b8d      	ldr	r3, [pc, #564]	; (8003d40 <HAL_RCC_OscConfig+0xb3c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0e8      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x92e>
 8003b24:	4b87      	ldr	r3, [pc, #540]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4a86      	ldr	r2, [pc, #536]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6213      	str	r3, [r2, #32]
 8003b30:	e035      	b.n	8003b9e <HAL_RCC_OscConfig+0x99a>
 8003b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x958>
 8003b42:	4b80      	ldr	r3, [pc, #512]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4a7f      	ldr	r2, [pc, #508]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6213      	str	r3, [r2, #32]
 8003b4e:	4b7d      	ldr	r3, [pc, #500]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	4a7c      	ldr	r2, [pc, #496]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	6213      	str	r3, [r2, #32]
 8003b5a:	e020      	b.n	8003b9e <HAL_RCC_OscConfig+0x99a>
 8003b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_OscConfig+0x982>
 8003b6c:	4b75      	ldr	r3, [pc, #468]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a74      	ldr	r2, [pc, #464]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	6213      	str	r3, [r2, #32]
 8003b78:	4b72      	ldr	r3, [pc, #456]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4a71      	ldr	r2, [pc, #452]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6213      	str	r3, [r2, #32]
 8003b84:	e00b      	b.n	8003b9e <HAL_RCC_OscConfig+0x99a>
 8003b86:	4b6f      	ldr	r3, [pc, #444]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4a6e      	ldr	r2, [pc, #440]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6213      	str	r3, [r2, #32]
 8003b92:	4b6c      	ldr	r3, [pc, #432]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4a6b      	ldr	r2, [pc, #428]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8081 	beq.w	8003cb2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb0:	f7fd fdc0 	bl	8001734 <HAL_GetTick>
 8003bb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	e00b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fd fdbb 	bl	8001734 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e365      	b.n	800429e <HAL_RCC_OscConfig+0x109a>
 8003bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003bda:	2202      	movs	r2, #2
 8003bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bfa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bfe:	2202      	movs	r2, #2
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c06:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	fa93 f2a3 	rbit	r2, r3
 8003c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c18:	601a      	str	r2, [r3, #0]
  return result;
 8003c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c1e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f043 0302 	orr.w	r3, r3, #2
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d102      	bne.n	8003c3e <HAL_RCC_OscConfig+0xa3a>
 8003c38:	4b42      	ldr	r3, [pc, #264]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	e013      	b.n	8003c66 <HAL_RCC_OscConfig+0xa62>
 8003c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c46:	2202      	movs	r2, #2
 8003c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	fa93 f2a3 	rbit	r2, r3
 8003c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c5c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	4b38      	ldr	r3, [pc, #224]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c6e:	2102      	movs	r1, #2
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c76:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	fa92 f1a2 	rbit	r1, r2
 8003c80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c84:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c88:	6011      	str	r1, [r2, #0]
  return result;
 8003c8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c8e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	fab2 f282 	clz	r2, r2
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	f002 021f 	and.w	r2, r2, #31
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d084      	beq.n	8003bba <HAL_RCC_OscConfig+0x9b6>
 8003cb0:	e083      	b.n	8003dba <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fd3f 	bl	8001734 <HAL_GetTick>
 8003cb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fd fd3a 	bl	8001734 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e2e4      	b.n	800429e <HAL_RCC_OscConfig+0x109a>
 8003cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003cdc:	2202      	movs	r2, #2
 8003cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	fa93 f2a3 	rbit	r2, r3
 8003cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d00:	2202      	movs	r2, #2
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d08:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	fa93 f2a3 	rbit	r2, r3
 8003d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d1a:	601a      	str	r2, [r3, #0]
  return result;
 8003d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d20:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d24:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f043 0302 	orr.w	r3, r3, #2
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d106      	bne.n	8003d48 <HAL_RCC_OscConfig+0xb44>
 8003d3a:	4b02      	ldr	r3, [pc, #8]	; (8003d44 <HAL_RCC_OscConfig+0xb40>)
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	e017      	b.n	8003d70 <HAL_RCC_OscConfig+0xb6c>
 8003d40:	40007000 	.word	0x40007000
 8003d44:	40021000 	.word	0x40021000
 8003d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d4c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d50:	2202      	movs	r2, #2
 8003d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d58:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	fa93 f2a3 	rbit	r2, r3
 8003d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d66:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	4bb3      	ldr	r3, [pc, #716]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d74:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d78:	2102      	movs	r1, #2
 8003d7a:	6011      	str	r1, [r2, #0]
 8003d7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d80:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	fa92 f1a2 	rbit	r1, r2
 8003d8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d8e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003d92:	6011      	str	r1, [r2, #0]
  return result;
 8003d94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d98:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	fab2 f282 	clz	r2, r2
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	f002 021f 	and.w	r2, r2, #31
 8003dae:	2101      	movs	r1, #1
 8003db0:	fa01 f202 	lsl.w	r2, r1, r2
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d180      	bne.n	8003cbc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dba:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b9e      	ldr	r3, [pc, #632]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4a9d      	ldr	r2, [pc, #628]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 825e 	beq.w	800429c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de0:	4b96      	ldr	r3, [pc, #600]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	f000 821f 	beq.w	800422c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	f040 8170 	bne.w	80040e0 <HAL_RCC_OscConfig+0xedc>
 8003e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e04:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e12:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	fa93 f2a3 	rbit	r2, r3
 8003e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e20:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e24:	601a      	str	r2, [r3, #0]
  return result;
 8003e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e2a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e2e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e30:	fab3 f383 	clz	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	461a      	mov	r2, r3
 8003e42:	2300      	movs	r3, #0
 8003e44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e46:	f7fd fc75 	bl	8001734 <HAL_GetTick>
 8003e4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4e:	e009      	b.n	8003e64 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fd fc70 	bl	8001734 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e21c      	b.n	800429e <HAL_RCC_OscConfig+0x109a>
 8003e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e68:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e76:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	fa93 f2a3 	rbit	r2, r3
 8003e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e84:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e88:	601a      	str	r2, [r3, #0]
  return result;
 8003e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e94:	fab3 f383 	clz	r3, r3
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d102      	bne.n	8003eae <HAL_RCC_OscConfig+0xcaa>
 8003ea8:	4b64      	ldr	r3, [pc, #400]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	e027      	b.n	8003efe <HAL_RCC_OscConfig+0xcfa>
 8003eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	fa93 f2a3 	rbit	r2, r3
 8003eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ece:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003edc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fa93 f2a3 	rbit	r2, r3
 8003ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ef4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f02:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f0a:	6011      	str	r1, [r2, #0]
 8003f0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f10:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	fa92 f1a2 	rbit	r1, r2
 8003f1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f1e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003f22:	6011      	str	r1, [r2, #0]
  return result;
 8003f24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f28:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	fab2 f282 	clz	r2, r2
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	f042 0220 	orr.w	r2, r2, #32
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	f002 021f 	and.w	r2, r2, #31
 8003f3e:	2101      	movs	r1, #1
 8003f40:	fa01 f202 	lsl.w	r2, r1, r2
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d182      	bne.n	8003e50 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f4a:	4b3c      	ldr	r3, [pc, #240]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	f023 020f 	bic.w	r2, r3, #15
 8003f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	4937      	ldr	r1, [pc, #220]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003f64:	4b35      	ldr	r3, [pc, #212]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a19      	ldr	r1, [r3, #32]
 8003f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	492d      	ldr	r1, [pc, #180]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f90:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	fa93 f2a3 	rbit	r2, r3
 8003fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fb0:	601a      	str	r2, [r3, #0]
  return result;
 8003fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fba:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbc:	fab3 f383 	clz	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2301      	movs	r3, #1
 8003fd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fd fbaf 	bl	8001734 <HAL_GetTick>
 8003fd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fda:	e009      	b.n	8003ff0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fd fbaa 	bl	8001734 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e156      	b.n	800429e <HAL_RCC_OscConfig+0x109a>
 8003ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004002:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	fa93 f2a3 	rbit	r2, r3
 800400c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004010:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004014:	601a      	str	r2, [r3, #0]
  return result;
 8004016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800401e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d105      	bne.n	8004040 <HAL_RCC_OscConfig+0xe3c>
 8004034:	4b01      	ldr	r3, [pc, #4]	; (800403c <HAL_RCC_OscConfig+0xe38>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	e02a      	b.n	8004090 <HAL_RCC_OscConfig+0xe8c>
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
 8004040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004044:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800404c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004052:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	fa93 f2a3 	rbit	r2, r3
 800405c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004060:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800406a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800406e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004078:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	fa93 f2a3 	rbit	r2, r3
 8004082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004086:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	4b86      	ldr	r3, [pc, #536]	; (80042a8 <HAL_RCC_OscConfig+0x10a4>)
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004094:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004098:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800409c:	6011      	str	r1, [r2, #0]
 800409e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040a2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	fa92 f1a2 	rbit	r1, r2
 80040ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040b0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80040b4:	6011      	str	r1, [r2, #0]
  return result;
 80040b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040ba:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	fab2 f282 	clz	r2, r2
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	f042 0220 	orr.w	r2, r2, #32
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	f002 021f 	and.w	r2, r2, #31
 80040d0:	2101      	movs	r1, #1
 80040d2:	fa01 f202 	lsl.w	r2, r1, r2
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f43f af7f 	beq.w	8003fdc <HAL_RCC_OscConfig+0xdd8>
 80040de:	e0dd      	b.n	800429c <HAL_RCC_OscConfig+0x1098>
 80040e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	fa93 f2a3 	rbit	r2, r3
 80040fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004100:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004104:	601a      	str	r2, [r3, #0]
  return result;
 8004106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800410a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800410e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800411a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	461a      	mov	r2, r3
 8004122:	2300      	movs	r3, #0
 8004124:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004126:	f7fd fb05 	bl	8001734 <HAL_GetTick>
 800412a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800412e:	e009      	b.n	8004144 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004130:	f7fd fb00 	bl	8001734 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0ac      	b.n	800429e <HAL_RCC_OscConfig+0x109a>
 8004144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004148:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800414c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004156:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	fa93 f2a3 	rbit	r2, r3
 8004160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004164:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004168:	601a      	str	r2, [r3, #0]
  return result;
 800416a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800416e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004172:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004174:	fab3 f383 	clz	r3, r3
 8004178:	b2db      	uxtb	r3, r3
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d102      	bne.n	800418e <HAL_RCC_OscConfig+0xf8a>
 8004188:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <HAL_RCC_OscConfig+0x10a4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	e027      	b.n	80041de <HAL_RCC_OscConfig+0xfda>
 800418e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004192:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004196:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800419a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	fa93 f2a3 	rbit	r2, r3
 80041aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041b8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	fa93 f2a3 	rbit	r2, r3
 80041d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041d4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	4b33      	ldr	r3, [pc, #204]	; (80042a8 <HAL_RCC_OscConfig+0x10a4>)
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041e2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041ea:	6011      	str	r1, [r2, #0]
 80041ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041f0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	fa92 f1a2 	rbit	r1, r2
 80041fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041fe:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004202:	6011      	str	r1, [r2, #0]
  return result;
 8004204:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004208:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	fab2 f282 	clz	r2, r2
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	f042 0220 	orr.w	r2, r2, #32
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	f002 021f 	and.w	r2, r2, #31
 800421e:	2101      	movs	r1, #1
 8004220:	fa01 f202 	lsl.w	r2, r1, r2
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d182      	bne.n	8004130 <HAL_RCC_OscConfig+0xf2c>
 800422a:	e037      	b.n	800429c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800422c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004230:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e02e      	b.n	800429e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <HAL_RCC_OscConfig+0x10a4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <HAL_RCC_OscConfig+0x10a4>)
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004250:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004254:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800425c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	429a      	cmp	r2, r3
 8004266:	d117      	bne.n	8004298 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004268:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800426c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004274:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800427c:	429a      	cmp	r2, r3
 800427e:	d10b      	bne.n	8004298 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004280:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004284:	f003 020f 	and.w	r2, r3, #15
 8004288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800428c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021000 	.word	0x40021000

080042ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b09e      	sub	sp, #120	; 0x78
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e162      	b.n	800458a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b90      	ldr	r3, [pc, #576]	; (8004508 <HAL_RCC_ClockConfig+0x25c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d910      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b8d      	ldr	r3, [pc, #564]	; (8004508 <HAL_RCC_ClockConfig+0x25c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0207 	bic.w	r2, r3, #7
 80042da:	498b      	ldr	r1, [pc, #556]	; (8004508 <HAL_RCC_ClockConfig+0x25c>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b89      	ldr	r3, [pc, #548]	; (8004508 <HAL_RCC_ClockConfig+0x25c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e14a      	b.n	800458a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004300:	4b82      	ldr	r3, [pc, #520]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	497f      	ldr	r1, [pc, #508]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 800430e:	4313      	orrs	r3, r2
 8004310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80dc 	beq.w	80044d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d13c      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xf6>
 8004328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800432c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d102      	bne.n	8004352 <HAL_RCC_ClockConfig+0xa6>
 800434c:	4b6f      	ldr	r3, [pc, #444]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	e00f      	b.n	8004372 <HAL_RCC_ClockConfig+0xc6>
 8004352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004356:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800435a:	fa93 f3a3 	rbit	r3, r3
 800435e:	667b      	str	r3, [r7, #100]	; 0x64
 8004360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004364:	663b      	str	r3, [r7, #96]	; 0x60
 8004366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436e:	4b67      	ldr	r3, [pc, #412]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004376:	65ba      	str	r2, [r7, #88]	; 0x58
 8004378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800437a:	fa92 f2a2 	rbit	r2, r2
 800437e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004382:	fab2 f282 	clz	r2, r2
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	f042 0220 	orr.w	r2, r2, #32
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	f002 021f 	and.w	r2, r2, #31
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f202 	lsl.w	r2, r1, r2
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d17b      	bne.n	8004496 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e0f3      	b.n	800458a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d13c      	bne.n	8004424 <HAL_RCC_ClockConfig+0x178>
 80043aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b2:	fa93 f3a3 	rbit	r3, r3
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d102      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x128>
 80043ce:	4b4f      	ldr	r3, [pc, #316]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	e00f      	b.n	80043f4 <HAL_RCC_ClockConfig+0x148>
 80043d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	647b      	str	r3, [r7, #68]	; 0x44
 80043e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043e6:	643b      	str	r3, [r7, #64]	; 0x40
 80043e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ea:	fa93 f3a3 	rbit	r3, r3
 80043ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f0:	4b46      	ldr	r3, [pc, #280]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80043fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043fc:	fa92 f2a2 	rbit	r2, r2
 8004400:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004404:	fab2 f282 	clz	r2, r2
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	f042 0220 	orr.w	r2, r2, #32
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	f002 021f 	and.w	r2, r2, #31
 8004414:	2101      	movs	r1, #1
 8004416:	fa01 f202 	lsl.w	r2, r1, r2
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d13a      	bne.n	8004496 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0b2      	b.n	800458a <HAL_RCC_ClockConfig+0x2de>
 8004424:	2302      	movs	r3, #2
 8004426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	fab3 f383 	clz	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d102      	bne.n	800444c <HAL_RCC_ClockConfig+0x1a0>
 8004446:	4b31      	ldr	r3, [pc, #196]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	e00d      	b.n	8004468 <HAL_RCC_ClockConfig+0x1bc>
 800444c:	2302      	movs	r3, #2
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	fa93 f3a3 	rbit	r3, r3
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
 8004458:	2302      	movs	r3, #2
 800445a:	623b      	str	r3, [r7, #32]
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	fa93 f3a3 	rbit	r3, r3
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	4b29      	ldr	r3, [pc, #164]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2202      	movs	r2, #2
 800446a:	61ba      	str	r2, [r7, #24]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	fa92 f2a2 	rbit	r2, r2
 8004472:	617a      	str	r2, [r7, #20]
  return result;
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	fab2 f282 	clz	r2, r2
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	f042 0220 	orr.w	r2, r2, #32
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	f002 021f 	and.w	r2, r2, #31
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f202 	lsl.w	r2, r1, r2
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e079      	b.n	800458a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	491a      	ldr	r1, [pc, #104]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a8:	f7fd f944 	bl	8001734 <HAL_GetTick>
 80044ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b0:	f7fd f940 	bl	8001734 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e061      	b.n	800458a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	4b11      	ldr	r3, [pc, #68]	; (800450c <HAL_RCC_ClockConfig+0x260>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 020c 	and.w	r2, r3, #12
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1eb      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCC_ClockConfig+0x25c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d214      	bcs.n	8004510 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <HAL_RCC_ClockConfig+0x25c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 0207 	bic.w	r2, r3, #7
 80044ee:	4906      	ldr	r1, [pc, #24]	; (8004508 <HAL_RCC_ClockConfig+0x25c>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b04      	ldr	r3, [pc, #16]	; (8004508 <HAL_RCC_ClockConfig+0x25c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e040      	b.n	800458a <HAL_RCC_ClockConfig+0x2de>
 8004508:	40022000 	.word	0x40022000
 800450c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800451c:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_RCC_ClockConfig+0x2e8>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	491a      	ldr	r1, [pc, #104]	; (8004594 <HAL_RCC_ClockConfig+0x2e8>)
 800452a:	4313      	orrs	r3, r2
 800452c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <HAL_RCC_ClockConfig+0x2e8>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4912      	ldr	r1, [pc, #72]	; (8004594 <HAL_RCC_ClockConfig+0x2e8>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800454e:	f000 f829 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8004552:	4601      	mov	r1, r0
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <HAL_RCC_ClockConfig+0x2e8>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455c:	22f0      	movs	r2, #240	; 0xf0
 800455e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	fa92 f2a2 	rbit	r2, r2
 8004566:	60fa      	str	r2, [r7, #12]
  return result;
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	fab2 f282 	clz	r2, r2
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	40d3      	lsrs	r3, r2
 8004572:	4a09      	ldr	r2, [pc, #36]	; (8004598 <HAL_RCC_ClockConfig+0x2ec>)
 8004574:	5cd3      	ldrb	r3, [r2, r3]
 8004576:	fa21 f303 	lsr.w	r3, r1, r3
 800457a:	4a08      	ldr	r2, [pc, #32]	; (800459c <HAL_RCC_ClockConfig+0x2f0>)
 800457c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HAL_RCC_ClockConfig+0x2f4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7fd f892 	bl	80016ac <HAL_InitTick>
  
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3778      	adds	r7, #120	; 0x78
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	08008be0 	.word	0x08008be0
 800459c:	20000000 	.word	0x20000000
 80045a0:	20000004 	.word	0x20000004

080045a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b08b      	sub	sp, #44	; 0x2c
 80045a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	2300      	movs	r3, #0
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045be:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d002      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x30>
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d003      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x36>
 80045d2:	e03f      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045d4:	4b25      	ldr	r3, [pc, #148]	; (800466c <HAL_RCC_GetSysClockFreq+0xc8>)
 80045d6:	623b      	str	r3, [r7, #32]
      break;
 80045d8:	e03f      	b.n	800465a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80045e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	fa92 f2a2 	rbit	r2, r2
 80045ec:	607a      	str	r2, [r7, #4]
  return result;
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	fab2 f282 	clz	r2, r2
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	40d3      	lsrs	r3, r2
 80045f8:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045fa:	5cd3      	ldrb	r3, [r2, r3]
 80045fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045fe:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	220f      	movs	r2, #15
 8004608:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	fa92 f2a2 	rbit	r2, r2
 8004610:	60fa      	str	r2, [r7, #12]
  return result;
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	fab2 f282 	clz	r2, r2
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	40d3      	lsrs	r3, r2
 800461c:	4a15      	ldr	r2, [pc, #84]	; (8004674 <HAL_RCC_GetSysClockFreq+0xd0>)
 800461e:	5cd3      	ldrb	r3, [r2, r3]
 8004620:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800462c:	4a0f      	ldr	r2, [pc, #60]	; (800466c <HAL_RCC_GetSysClockFreq+0xc8>)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	fbb2 f2f3 	udiv	r2, r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
 800463c:	e007      	b.n	800464e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800463e:	4a0b      	ldr	r2, [pc, #44]	; (800466c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	fbb2 f2f3 	udiv	r2, r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	fb02 f303 	mul.w	r3, r2, r3
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	623b      	str	r3, [r7, #32]
      break;
 8004652:	e002      	b.n	800465a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004656:	623b      	str	r3, [r7, #32]
      break;
 8004658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800465a:	6a3b      	ldr	r3, [r7, #32]
}
 800465c:	4618      	mov	r0, r3
 800465e:	372c      	adds	r7, #44	; 0x2c
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40021000 	.word	0x40021000
 800466c:	007a1200 	.word	0x007a1200
 8004670:	08008bf8 	.word	0x08008bf8
 8004674:	08008c08 	.word	0x08008c08

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000000 	.word	0x20000000

08004690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004696:	f7ff ffef 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 800469a:	4601      	mov	r1, r0
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80046a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	fa92 f2a2 	rbit	r2, r2
 80046b0:	603a      	str	r2, [r7, #0]
  return result;
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	fab2 f282 	clz	r2, r2
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	40d3      	lsrs	r3, r2
 80046bc:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80046be:	5cd3      	ldrb	r3, [r2, r3]
 80046c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40021000 	.word	0x40021000
 80046d0:	08008bf0 	.word	0x08008bf0

080046d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046da:	f7ff ffcd 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046de:	4601      	mov	r1, r0
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80046e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80046ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	fa92 f2a2 	rbit	r2, r2
 80046f4:	603a      	str	r2, [r7, #0]
  return result;
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	fab2 f282 	clz	r2, r2
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	40d3      	lsrs	r3, r2
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004702:	5cd3      	ldrb	r3, [r2, r3]
 8004704:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000
 8004714:	08008bf0 	.word	0x08008bf0

08004718 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b092      	sub	sp, #72	; 0x48
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004728:	2300      	movs	r3, #0
 800472a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80d4 	beq.w	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473c:	4b4e      	ldr	r3, [pc, #312]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10e      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004748:	4b4b      	ldr	r3, [pc, #300]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	4a4a      	ldr	r2, [pc, #296]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004752:	61d3      	str	r3, [r2, #28]
 8004754:	4b48      	ldr	r3, [pc, #288]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	4b45      	ldr	r3, [pc, #276]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d118      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004772:	4b42      	ldr	r3, [pc, #264]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a41      	ldr	r2, [pc, #260]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477e:	f7fc ffd9 	bl	8001734 <HAL_GetTick>
 8004782:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004784:	e008      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004786:	f7fc ffd5 	bl	8001734 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b64      	cmp	r3, #100	; 0x64
 8004792:	d901      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e1d6      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	4b38      	ldr	r3, [pc, #224]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047a4:	4b34      	ldr	r3, [pc, #208]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8084 	beq.w	80048be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d07c      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047c4:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	fa93 f3a3 	rbit	r3, r3
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047de:	fab3 f383 	clz	r3, r3
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	4b26      	ldr	r3, [pc, #152]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	461a      	mov	r2, r3
 80047ee:	2301      	movs	r3, #1
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	461a      	mov	r2, r3
 8004812:	2300      	movs	r3, #0
 8004814:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004816:	4a18      	ldr	r2, [pc, #96]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800481c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d04b      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fc ff85 	bl	8001734 <HAL_GetTick>
 800482a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482c:	e00a      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482e:	f7fc ff81 	bl	8001734 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	; 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e180      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004844:	2302      	movs	r3, #2
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	fa93 f3a3 	rbit	r3, r3
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
 8004850:	2302      	movs	r3, #2
 8004852:	623b      	str	r3, [r7, #32]
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	61fb      	str	r3, [r7, #28]
  return result;
 800485c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	fab3 f383 	clz	r3, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f043 0302 	orr.w	r3, r3, #2
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d108      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004872:	4b01      	ldr	r3, [pc, #4]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	e00d      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004878:	40021000 	.word	0x40021000
 800487c:	40007000 	.word	0x40007000
 8004880:	10908100 	.word	0x10908100
 8004884:	2302      	movs	r3, #2
 8004886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	4b9a      	ldr	r3, [pc, #616]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	2202      	movs	r2, #2
 8004896:	613a      	str	r2, [r7, #16]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	fa92 f2a2 	rbit	r2, r2
 800489e:	60fa      	str	r2, [r7, #12]
  return result;
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	fab2 f282 	clz	r2, r2
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	f002 021f 	and.w	r2, r2, #31
 80048b2:	2101      	movs	r1, #1
 80048b4:	fa01 f202 	lsl.w	r2, r1, r2
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0b7      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048be:	4b8f      	ldr	r3, [pc, #572]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	498c      	ldr	r1, [pc, #560]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d105      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d8:	4b88      	ldr	r3, [pc, #544]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	4a87      	ldr	r2, [pc, #540]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048f0:	4b82      	ldr	r3, [pc, #520]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f023 0203 	bic.w	r2, r3, #3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	497f      	ldr	r1, [pc, #508]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800490e:	4b7b      	ldr	r3, [pc, #492]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	4978      	ldr	r1, [pc, #480]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491c:	4313      	orrs	r3, r2
 800491e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800492c:	4b73      	ldr	r3, [pc, #460]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	4970      	ldr	r1, [pc, #448]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800494a:	4b6c      	ldr	r3, [pc, #432]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f023 0210 	bic.w	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4969      	ldr	r1, [pc, #420]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004968:	4b64      	ldr	r3, [pc, #400]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004974:	4961      	ldr	r1, [pc, #388]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004986:	4b5d      	ldr	r3, [pc, #372]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f023 0220 	bic.w	r2, r3, #32
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	495a      	ldr	r1, [pc, #360]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004994:	4313      	orrs	r3, r2
 8004996:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049a4:	4b55      	ldr	r3, [pc, #340]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	4952      	ldr	r1, [pc, #328]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049c2:	4b4e      	ldr	r3, [pc, #312]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	494b      	ldr	r1, [pc, #300]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049e0:	4b46      	ldr	r3, [pc, #280]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	4943      	ldr	r1, [pc, #268]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049fe:	4b3f      	ldr	r3, [pc, #252]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	493c      	ldr	r1, [pc, #240]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a1c:	4b37      	ldr	r3, [pc, #220]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	4934      	ldr	r1, [pc, #208]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004a3a:	4b30      	ldr	r3, [pc, #192]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	492d      	ldr	r1, [pc, #180]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a58:	4b28      	ldr	r3, [pc, #160]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a64:	4925      	ldr	r1, [pc, #148]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a76:	4b21      	ldr	r3, [pc, #132]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	491e      	ldr	r1, [pc, #120]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004a94:	4b19      	ldr	r3, [pc, #100]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	4916      	ldr	r1, [pc, #88]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d008      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	490f      	ldr	r1, [pc, #60]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004adc:	4907      	ldr	r1, [pc, #28]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00c      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004aee:	4b03      	ldr	r3, [pc, #12]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	e002      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b02:	4913      	ldr	r1, [pc, #76]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b20:	490b      	ldr	r1, [pc, #44]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3e:	4904      	ldr	r1, [pc, #16]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3748      	adds	r7, #72	; 0x48
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000

08004b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e040      	b.n	8004be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc fcba 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	; 0x24
 8004b80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fc92 	bl	80054bc <UART_SetConfig>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e022      	b.n	8004be8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fe5c 	bl	8005868 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fee3 	bl	80059ac <UART_CheckIdleState>
 8004be6:	4603      	mov	r3, r0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	f040 8082 	bne.w	8004d0e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_UART_Transmit+0x26>
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e07a      	b.n	8004d10 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_UART_Transmit+0x38>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e073      	b.n	8004d10 <HAL_UART_Transmit+0x120>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2221      	movs	r2, #33	; 0x21
 8004c3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c3e:	f7fc fd79 	bl	8001734 <HAL_GetTick>
 8004c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	88fa      	ldrh	r2, [r7, #6]
 8004c48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d108      	bne.n	8004c70 <HAL_UART_Transmit+0x80>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	e003      	b.n	8004c78 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c80:	e02d      	b.n	8004cde <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2180      	movs	r1, #128	; 0x80
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fed6 	bl	8005a3e <UART_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e039      	b.n	8004d10 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	881a      	ldrh	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cae:	b292      	uxth	r2, r2
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	e008      	b.n	8004ccc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1cb      	bne.n	8004c82 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2140      	movs	r1, #64	; 0x40
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fea2 	bl	8005a3e <UART_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e005      	b.n	8004d10 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e000      	b.n	8004d10 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
  }
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d178      	bne.n	8004e20 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_UART_Transmit_DMA+0x22>
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e071      	b.n	8004e22 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Transmit_DMA+0x34>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e06a      	b.n	8004e22 <HAL_UART_Transmit_DMA+0x10a>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	88fa      	ldrh	r2, [r7, #6]
 8004d5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	88fa      	ldrh	r2, [r7, #6]
 8004d66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2221      	movs	r2, #33	; 0x21
 8004d76:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d02b      	beq.n	8004dd8 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d84:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <HAL_UART_Transmit_DMA+0x114>)
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8c:	4a28      	ldr	r2, [pc, #160]	; (8004e30 <HAL_UART_Transmit_DMA+0x118>)
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d94:	4a27      	ldr	r2, [pc, #156]	; (8004e34 <HAL_UART_Transmit_DMA+0x11c>)
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da8:	4619      	mov	r1, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3328      	adds	r3, #40	; 0x28
 8004db0:	461a      	mov	r2, r3
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	f7fd fe88 	bl	8002ac8 <HAL_DMA_Start_IT>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00c      	beq.n	8004dd8 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2210      	movs	r2, #16
 8004dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e024      	b.n	8004e22 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2240      	movs	r2, #64	; 0x40
 8004dde:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3308      	adds	r3, #8
 8004dee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	613b      	str	r3, [r7, #16]
   return(result);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3308      	adds	r3, #8
 8004e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e08:	623a      	str	r2, [r7, #32]
 8004e0a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	69f9      	ldr	r1, [r7, #28]
 8004e0e:	6a3a      	ldr	r2, [r7, #32]
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e5      	bne.n	8004de8 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3728      	adds	r7, #40	; 0x28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	08005e1f 	.word	0x08005e1f
 8004e30:	08005eb3 	.word	0x08005eb3
 8004e34:	08006025 	.word	0x08006025

08004e38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d13d      	bne.n	8004eca <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_UART_Receive_DMA+0x22>
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e036      	b.n	8004ecc <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_UART_Receive_DMA+0x34>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e02f      	b.n	8004ecc <HAL_UART_Receive_DMA+0x94>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d018      	beq.n	8004eba <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	613b      	str	r3, [r7, #16]
   return(result);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	623b      	str	r3, [r7, #32]
 8004ea8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	69f9      	ldr	r1, [r7, #28]
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e6      	bne.n	8004e88 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fe81 	bl	8005bc8 <UART_Start_Receive_DMA>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	e000      	b.n	8004ecc <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3728      	adds	r7, #40	; 0x28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b0ba      	sub	sp, #232	; 0xe8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004efa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004efe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f02:	4013      	ands	r3, r2
 8004f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d115      	bne.n	8004f3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00f      	beq.n	8004f3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 82a3 	beq.w	8005478 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
      }
      return;
 8004f3a:	e29d      	b.n	8005478 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8117 	beq.w	8005174 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f56:	4b85      	ldr	r3, [pc, #532]	; (800516c <HAL_UART_IRQHandler+0x298>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 810a 	beq.w	8005174 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d011      	beq.n	8004f90 <HAL_UART_IRQHandler+0xbc>
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f86:	f043 0201 	orr.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d011      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xec>
 8004f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2202      	movs	r2, #2
 8004fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb6:	f043 0204 	orr.w	r2, r3, #4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d011      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x11c>
 8004fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2204      	movs	r2, #4
 8004fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe6:	f043 0202 	orr.w	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d017      	beq.n	800502c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d105      	bne.n	8005014 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800500c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2208      	movs	r2, #8
 800501a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005022:	f043 0208 	orr.w	r2, r3, #8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800502c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005034:	2b00      	cmp	r3, #0
 8005036:	d012      	beq.n	800505e <HAL_UART_IRQHandler+0x18a>
 8005038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800503c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00c      	beq.n	800505e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800504c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005054:	f043 0220 	orr.w	r2, r3, #32
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8209 	beq.w	800547c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00d      	beq.n	8005092 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005098:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d005      	beq.n	80050b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d04f      	beq.n	8005156 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fe4e 	bl	8005d58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b40      	cmp	r3, #64	; 0x40
 80050c8:	d141      	bne.n	800514e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3308      	adds	r3, #8
 80050d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800510e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1d9      	bne.n	80050ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	2b00      	cmp	r3, #0
 800511c:	d013      	beq.n	8005146 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4a13      	ldr	r2, [pc, #76]	; (8005170 <HAL_UART_IRQHandler+0x29c>)
 8005124:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	4618      	mov	r0, r3
 800512c:	f7fd fd64 	bl	8002bf8 <HAL_DMA_Abort_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d017      	beq.n	8005166 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	e00f      	b.n	8005166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f9a2 	bl	8005490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	e00b      	b.n	8005166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f99e 	bl	8005490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	e007      	b.n	8005166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f99a 	bl	8005490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005164:	e18a      	b.n	800547c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005166:	bf00      	nop
    return;
 8005168:	e188      	b.n	800547c <HAL_UART_IRQHandler+0x5a8>
 800516a:	bf00      	nop
 800516c:	04000120 	.word	0x04000120
 8005170:	080060a1 	.word	0x080060a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005178:	2b01      	cmp	r3, #1
 800517a:	f040 8143 	bne.w	8005404 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 813c 	beq.w	8005404 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800518c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8135 	beq.w	8005404 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2210      	movs	r2, #16
 80051a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	f040 80b1 	bne.w	8005314 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 815c 	beq.w	8005480 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051d2:	429a      	cmp	r2, r3
 80051d4:	f080 8154 	bcs.w	8005480 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	f000 8085 	beq.w	80052f8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800521c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005224:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1da      	bne.n	80051ee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3308      	adds	r3, #8
 800523e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3308      	adds	r3, #8
 8005258:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800525c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005260:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005264:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800526e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e1      	bne.n	8005238 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3308      	adds	r3, #8
 800527a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3308      	adds	r3, #8
 8005294:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005298:	66fa      	str	r2, [r7, #108]	; 0x6c
 800529a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800529e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e3      	bne.n	8005274 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c8:	f023 0310 	bic.w	r3, r3, #16
 80052cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052da:	65bb      	str	r3, [r7, #88]	; 0x58
 80052dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e4      	bne.n	80052b8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd fc47 	bl	8002b86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005304:	b29b      	uxth	r3, r3
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	b29b      	uxth	r3, r3
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f8c9 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005312:	e0b5      	b.n	8005480 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005320:	b29b      	uxth	r3, r3
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80a7 	beq.w	8005484 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005336:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80a2 	beq.w	8005484 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005354:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005362:	647b      	str	r3, [r7, #68]	; 0x44
 8005364:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e4      	bne.n	8005340 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	623b      	str	r3, [r7, #32]
   return(result);
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	f023 0301 	bic.w	r3, r3, #1
 800538c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800539a:	633a      	str	r2, [r7, #48]	; 0x30
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e3      	bne.n	8005376 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f023 0310 	bic.w	r3, r3, #16
 80053d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	69b9      	ldr	r1, [r7, #24]
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	617b      	str	r3, [r7, #20]
   return(result);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e4      	bne.n	80053c0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f851 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005402:	e03f      	b.n	8005484 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00e      	beq.n	800542e <HAL_UART_IRQHandler+0x55a>
 8005410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d008      	beq.n	800542e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fe7a 	bl	8006120 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800542c:	e02d      	b.n	800548a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00e      	beq.n	8005458 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800543a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01c      	beq.n	8005488 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
    }
    return;
 8005456:	e017      	b.n	8005488 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d012      	beq.n	800548a <HAL_UART_IRQHandler+0x5b6>
 8005464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00c      	beq.n	800548a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fe2b 	bl	80060cc <UART_EndTransmit_IT>
    return;
 8005476:	e008      	b.n	800548a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005478:	bf00      	nop
 800547a:	e006      	b.n	800548a <HAL_UART_IRQHandler+0x5b6>
    return;
 800547c:	bf00      	nop
 800547e:	e004      	b.n	800548a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_UART_IRQHandler+0x5b6>
    return;
 8005488:	bf00      	nop
  }

}
 800548a:	37e8      	adds	r7, #232	; 0xe8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b92      	ldr	r3, [pc, #584]	; (8005730 <UART_SetConfig+0x274>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6812      	ldr	r2, [r2, #0]
 80054ee:	6979      	ldr	r1, [r7, #20]
 80054f0:	430b      	orrs	r3, r1
 80054f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	430a      	orrs	r2, r1
 800552c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a80      	ldr	r2, [pc, #512]	; (8005734 <UART_SetConfig+0x278>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d120      	bne.n	800557a <UART_SetConfig+0xbe>
 8005538:	4b7f      	ldr	r3, [pc, #508]	; (8005738 <UART_SetConfig+0x27c>)
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b03      	cmp	r3, #3
 8005542:	d817      	bhi.n	8005574 <UART_SetConfig+0xb8>
 8005544:	a201      	add	r2, pc, #4	; (adr r2, 800554c <UART_SetConfig+0x90>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	0800555d 	.word	0x0800555d
 8005550:	08005569 	.word	0x08005569
 8005554:	0800556f 	.word	0x0800556f
 8005558:	08005563 	.word	0x08005563
 800555c:	2301      	movs	r3, #1
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e0b5      	b.n	80056ce <UART_SetConfig+0x212>
 8005562:	2302      	movs	r3, #2
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e0b2      	b.n	80056ce <UART_SetConfig+0x212>
 8005568:	2304      	movs	r3, #4
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e0af      	b.n	80056ce <UART_SetConfig+0x212>
 800556e:	2308      	movs	r3, #8
 8005570:	77fb      	strb	r3, [r7, #31]
 8005572:	e0ac      	b.n	80056ce <UART_SetConfig+0x212>
 8005574:	2310      	movs	r3, #16
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e0a9      	b.n	80056ce <UART_SetConfig+0x212>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a6f      	ldr	r2, [pc, #444]	; (800573c <UART_SetConfig+0x280>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d124      	bne.n	80055ce <UART_SetConfig+0x112>
 8005584:	4b6c      	ldr	r3, [pc, #432]	; (8005738 <UART_SetConfig+0x27c>)
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800558c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005590:	d011      	beq.n	80055b6 <UART_SetConfig+0xfa>
 8005592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005596:	d817      	bhi.n	80055c8 <UART_SetConfig+0x10c>
 8005598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800559c:	d011      	beq.n	80055c2 <UART_SetConfig+0x106>
 800559e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a2:	d811      	bhi.n	80055c8 <UART_SetConfig+0x10c>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <UART_SetConfig+0xf4>
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ac:	d006      	beq.n	80055bc <UART_SetConfig+0x100>
 80055ae:	e00b      	b.n	80055c8 <UART_SetConfig+0x10c>
 80055b0:	2300      	movs	r3, #0
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e08b      	b.n	80056ce <UART_SetConfig+0x212>
 80055b6:	2302      	movs	r3, #2
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e088      	b.n	80056ce <UART_SetConfig+0x212>
 80055bc:	2304      	movs	r3, #4
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e085      	b.n	80056ce <UART_SetConfig+0x212>
 80055c2:	2308      	movs	r3, #8
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e082      	b.n	80056ce <UART_SetConfig+0x212>
 80055c8:	2310      	movs	r3, #16
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e07f      	b.n	80056ce <UART_SetConfig+0x212>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a5b      	ldr	r2, [pc, #364]	; (8005740 <UART_SetConfig+0x284>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d124      	bne.n	8005622 <UART_SetConfig+0x166>
 80055d8:	4b57      	ldr	r3, [pc, #348]	; (8005738 <UART_SetConfig+0x27c>)
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80055e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055e4:	d011      	beq.n	800560a <UART_SetConfig+0x14e>
 80055e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055ea:	d817      	bhi.n	800561c <UART_SetConfig+0x160>
 80055ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055f0:	d011      	beq.n	8005616 <UART_SetConfig+0x15a>
 80055f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055f6:	d811      	bhi.n	800561c <UART_SetConfig+0x160>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <UART_SetConfig+0x148>
 80055fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005600:	d006      	beq.n	8005610 <UART_SetConfig+0x154>
 8005602:	e00b      	b.n	800561c <UART_SetConfig+0x160>
 8005604:	2300      	movs	r3, #0
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e061      	b.n	80056ce <UART_SetConfig+0x212>
 800560a:	2302      	movs	r3, #2
 800560c:	77fb      	strb	r3, [r7, #31]
 800560e:	e05e      	b.n	80056ce <UART_SetConfig+0x212>
 8005610:	2304      	movs	r3, #4
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e05b      	b.n	80056ce <UART_SetConfig+0x212>
 8005616:	2308      	movs	r3, #8
 8005618:	77fb      	strb	r3, [r7, #31]
 800561a:	e058      	b.n	80056ce <UART_SetConfig+0x212>
 800561c:	2310      	movs	r3, #16
 800561e:	77fb      	strb	r3, [r7, #31]
 8005620:	e055      	b.n	80056ce <UART_SetConfig+0x212>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a47      	ldr	r2, [pc, #284]	; (8005744 <UART_SetConfig+0x288>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d124      	bne.n	8005676 <UART_SetConfig+0x1ba>
 800562c:	4b42      	ldr	r3, [pc, #264]	; (8005738 <UART_SetConfig+0x27c>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005634:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005638:	d011      	beq.n	800565e <UART_SetConfig+0x1a2>
 800563a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800563e:	d817      	bhi.n	8005670 <UART_SetConfig+0x1b4>
 8005640:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005644:	d011      	beq.n	800566a <UART_SetConfig+0x1ae>
 8005646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800564a:	d811      	bhi.n	8005670 <UART_SetConfig+0x1b4>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <UART_SetConfig+0x19c>
 8005650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005654:	d006      	beq.n	8005664 <UART_SetConfig+0x1a8>
 8005656:	e00b      	b.n	8005670 <UART_SetConfig+0x1b4>
 8005658:	2300      	movs	r3, #0
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e037      	b.n	80056ce <UART_SetConfig+0x212>
 800565e:	2302      	movs	r3, #2
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e034      	b.n	80056ce <UART_SetConfig+0x212>
 8005664:	2304      	movs	r3, #4
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e031      	b.n	80056ce <UART_SetConfig+0x212>
 800566a:	2308      	movs	r3, #8
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	e02e      	b.n	80056ce <UART_SetConfig+0x212>
 8005670:	2310      	movs	r3, #16
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e02b      	b.n	80056ce <UART_SetConfig+0x212>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a33      	ldr	r2, [pc, #204]	; (8005748 <UART_SetConfig+0x28c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d124      	bne.n	80056ca <UART_SetConfig+0x20e>
 8005680:	4b2d      	ldr	r3, [pc, #180]	; (8005738 <UART_SetConfig+0x27c>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800568c:	d011      	beq.n	80056b2 <UART_SetConfig+0x1f6>
 800568e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005692:	d817      	bhi.n	80056c4 <UART_SetConfig+0x208>
 8005694:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005698:	d011      	beq.n	80056be <UART_SetConfig+0x202>
 800569a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800569e:	d811      	bhi.n	80056c4 <UART_SetConfig+0x208>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <UART_SetConfig+0x1f0>
 80056a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a8:	d006      	beq.n	80056b8 <UART_SetConfig+0x1fc>
 80056aa:	e00b      	b.n	80056c4 <UART_SetConfig+0x208>
 80056ac:	2300      	movs	r3, #0
 80056ae:	77fb      	strb	r3, [r7, #31]
 80056b0:	e00d      	b.n	80056ce <UART_SetConfig+0x212>
 80056b2:	2302      	movs	r3, #2
 80056b4:	77fb      	strb	r3, [r7, #31]
 80056b6:	e00a      	b.n	80056ce <UART_SetConfig+0x212>
 80056b8:	2304      	movs	r3, #4
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e007      	b.n	80056ce <UART_SetConfig+0x212>
 80056be:	2308      	movs	r3, #8
 80056c0:	77fb      	strb	r3, [r7, #31]
 80056c2:	e004      	b.n	80056ce <UART_SetConfig+0x212>
 80056c4:	2310      	movs	r3, #16
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e001      	b.n	80056ce <UART_SetConfig+0x212>
 80056ca:	2310      	movs	r3, #16
 80056cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d6:	d16c      	bne.n	80057b2 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d838      	bhi.n	8005750 <UART_SetConfig+0x294>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <UART_SetConfig+0x228>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005711 	.word	0x08005711
 80056ec:	08005719 	.word	0x08005719
 80056f0:	08005751 	.word	0x08005751
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	08005751 	.word	0x08005751
 80056fc:	08005751 	.word	0x08005751
 8005700:	08005751 	.word	0x08005751
 8005704:	08005727 	.word	0x08005727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005708:	f7fe ffc2 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 800570c:	61b8      	str	r0, [r7, #24]
        break;
 800570e:	e024      	b.n	800575a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7fe ffe0 	bl	80046d4 <HAL_RCC_GetPCLK2Freq>
 8005714:	61b8      	str	r0, [r7, #24]
        break;
 8005716:	e020      	b.n	800575a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <UART_SetConfig+0x290>)
 800571a:	61bb      	str	r3, [r7, #24]
        break;
 800571c:	e01d      	b.n	800575a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571e:	f7fe ff41 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8005722:	61b8      	str	r0, [r7, #24]
        break;
 8005724:	e019      	b.n	800575a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572a:	61bb      	str	r3, [r7, #24]
        break;
 800572c:	e015      	b.n	800575a <UART_SetConfig+0x29e>
 800572e:	bf00      	nop
 8005730:	efff69f3 	.word	0xefff69f3
 8005734:	40013800 	.word	0x40013800
 8005738:	40021000 	.word	0x40021000
 800573c:	40004400 	.word	0x40004400
 8005740:	40004800 	.word	0x40004800
 8005744:	40004c00 	.word	0x40004c00
 8005748:	40005000 	.word	0x40005000
 800574c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	77bb      	strb	r3, [r7, #30]
        break;
 8005758:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d075      	beq.n	800584c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	005a      	lsls	r2, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	085b      	lsrs	r3, r3, #1
 800576a:	441a      	add	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	b29b      	uxth	r3, r3
 8005776:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b0f      	cmp	r3, #15
 800577c:	d916      	bls.n	80057ac <UART_SetConfig+0x2f0>
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005784:	d212      	bcs.n	80057ac <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f023 030f 	bic.w	r3, r3, #15
 800578e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	b29b      	uxth	r3, r3
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	b29a      	uxth	r2, r3
 800579c:	89fb      	ldrh	r3, [r7, #14]
 800579e:	4313      	orrs	r3, r2
 80057a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	89fa      	ldrh	r2, [r7, #14]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	e04f      	b.n	800584c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	77bb      	strb	r3, [r7, #30]
 80057b0:	e04c      	b.n	800584c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057b2:	7ffb      	ldrb	r3, [r7, #31]
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d828      	bhi.n	800580a <UART_SetConfig+0x34e>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x304>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	0800580b 	.word	0x0800580b
 80057d0:	080057fb 	.word	0x080057fb
 80057d4:	0800580b 	.word	0x0800580b
 80057d8:	0800580b 	.word	0x0800580b
 80057dc:	0800580b 	.word	0x0800580b
 80057e0:	08005803 	.word	0x08005803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e4:	f7fe ff54 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 80057e8:	61b8      	str	r0, [r7, #24]
        break;
 80057ea:	e013      	b.n	8005814 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ec:	f7fe ff72 	bl	80046d4 <HAL_RCC_GetPCLK2Freq>
 80057f0:	61b8      	str	r0, [r7, #24]
        break;
 80057f2:	e00f      	b.n	8005814 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f4:	4b1b      	ldr	r3, [pc, #108]	; (8005864 <UART_SetConfig+0x3a8>)
 80057f6:	61bb      	str	r3, [r7, #24]
        break;
 80057f8:	e00c      	b.n	8005814 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057fa:	f7fe fed3 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 80057fe:	61b8      	str	r0, [r7, #24]
        break;
 8005800:	e008      	b.n	8005814 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005806:	61bb      	str	r3, [r7, #24]
        break;
 8005808:	e004      	b.n	8005814 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	77bb      	strb	r3, [r7, #30]
        break;
 8005812:	bf00      	nop
    }

    if (pclk != 0U)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d018      	beq.n	800584c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	085a      	lsrs	r2, r3, #1
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	441a      	add	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	b29b      	uxth	r3, r3
 800582e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b0f      	cmp	r3, #15
 8005834:	d908      	bls.n	8005848 <UART_SetConfig+0x38c>
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583c:	d204      	bcs.n	8005848 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	60da      	str	r2, [r3, #12]
 8005846:	e001      	b.n	800584c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005858:	7fbb      	ldrb	r3, [r7, #30]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	007a1200 	.word	0x007a1200

08005868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01a      	beq.n	800597e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005966:	d10a      	bne.n	800597e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	605a      	str	r2, [r3, #4]
  }
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059bc:	f7fb feba 	bl	8001734 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d10e      	bne.n	80059ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f82d 	bl	8005a3e <UART_WaitOnFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e023      	b.n	8005a36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d10e      	bne.n	8005a1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f817 	bl	8005a3e <UART_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e00d      	b.n	8005a36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b09c      	sub	sp, #112	; 0x70
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4e:	e0a5      	b.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	f000 80a1 	beq.w	8005b9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5a:	f7fb fe6b 	bl	8001734 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d302      	bcc.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d13e      	bne.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a84:	667b      	str	r3, [r7, #100]	; 0x64
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e6      	bne.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ac2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e5      	bne.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e067      	b.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d04f      	beq.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0a:	d147      	bne.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b34:	637b      	str	r3, [r7, #52]	; 0x34
 8005b36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e6      	bne.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	613b      	str	r3, [r7, #16]
   return(result);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3308      	adds	r3, #8
 8005b66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b68:	623a      	str	r2, [r7, #32]
 8005b6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	69f9      	ldr	r1, [r7, #28]
 8005b6e:	6a3a      	ldr	r2, [r7, #32]
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e5      	bne.n	8005b48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e010      	b.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69da      	ldr	r2, [r3, #28]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	bf0c      	ite	eq
 8005bac:	2301      	moveq	r3, #1
 8005bae:	2300      	movne	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	f43f af4a 	beq.w	8005a50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3770      	adds	r7, #112	; 0x70
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b096      	sub	sp, #88	; 0x58
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	88fa      	ldrh	r2, [r7, #6]
 8005be0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2222      	movs	r2, #34	; 0x22
 8005bf0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d02b      	beq.n	8005c52 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	4a40      	ldr	r2, [pc, #256]	; (8005d00 <UART_Start_Receive_DMA+0x138>)
 8005c00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c06:	4a3f      	ldr	r2, [pc, #252]	; (8005d04 <UART_Start_Receive_DMA+0x13c>)
 8005c08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	4a3e      	ldr	r2, [pc, #248]	; (8005d08 <UART_Start_Receive_DMA+0x140>)
 8005c10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	2200      	movs	r2, #0
 8005c18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3324      	adds	r3, #36	; 0x24
 8005c24:	4619      	mov	r1, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	f7fc ff4b 	bl	8002ac8 <HAL_DMA_Start_IT>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00c      	beq.n	8005c52 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2210      	movs	r2, #16
 8005c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e051      	b.n	8005cf6 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c7a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cac:	637a      	str	r2, [r7, #52]	; 0x34
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e5      	bne.n	8005c8c <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ce0:	623a      	str	r2, [r7, #32]
 8005ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	69f9      	ldr	r1, [r7, #28]
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3758      	adds	r7, #88	; 0x58
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	08005ecf 	.word	0x08005ecf
 8005d04:	08005fed 	.word	0x08005fed
 8005d08:	08006025 	.word	0x08006025

08005d0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b089      	sub	sp, #36	; 0x24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	6979      	ldr	r1, [r7, #20]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e6      	bne.n	8005d14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005d4c:	bf00      	nop
 8005d4e:	3724      	adds	r7, #36	; 0x24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b095      	sub	sp, #84	; 0x54
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e6      	bne.n	8005d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3308      	adds	r3, #8
 8005d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3308      	adds	r3, #8
 8005db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e5      	bne.n	8005d92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d118      	bne.n	8005e00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f023 0310 	bic.w	r3, r3, #16
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6979      	ldr	r1, [r7, #20]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e6      	bne.n	8005dce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005e12:	bf00      	nop
 8005e14:	3754      	adds	r7, #84	; 0x54
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b090      	sub	sp, #64	; 0x40
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d037      	beq.n	8005ea4 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3308      	adds	r3, #8
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e5c:	633a      	str	r2, [r7, #48]	; 0x30
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e5      	bne.n	8005e3c <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
 8005e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	69b9      	ldr	r1, [r7, #24]
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e6      	bne.n	8005e70 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ea2:	e002      	b.n	8005eaa <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8005ea4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005ea6:	f7fb f8c5 	bl	8001034 <HAL_UART_TxCpltCallback>
}
 8005eaa:	bf00      	nop
 8005eac:	3740      	adds	r7, #64	; 0x40
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7fb f89b 	bl	8000ffc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b09c      	sub	sp, #112	; 0x70
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d070      	beq.n	8005fc6 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e6      	bne.n	8005eec <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	667b      	str	r3, [r7, #100]	; 0x64
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f3e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e5      	bne.n	8005f1e <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	623b      	str	r3, [r7, #32]
   return(result);
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f68:	663b      	str	r3, [r7, #96]	; 0x60
 8005f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f72:	633a      	str	r2, [r7, #48]	; 0x30
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e5      	bne.n	8005f52 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f88:	2220      	movs	r2, #32
 8005f8a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d118      	bne.n	8005fc6 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f023 0310 	bic.w	r3, r3, #16
 8005fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	69b9      	ldr	r1, [r7, #24]
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e6      	bne.n	8005f94 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d107      	bne.n	8005fde <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fd8:	f7ff fa64 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fdc:	e002      	b.n	8005fe4 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8005fde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fe0:	f7fb f84e 	bl	8001080 <HAL_UART_RxCpltCallback>
}
 8005fe4:	bf00      	nop
 8005fe6:	3770      	adds	r7, #112	; 0x70
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d109      	bne.n	8006016 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	b29b      	uxth	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff fa48 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006014:	e002      	b.n	800601c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7fb f828 	bl	800106c <HAL_UART_RxHalfCpltCallback>
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006036:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800603c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d109      	bne.n	8006060 <UART_DMAError+0x3c>
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2b21      	cmp	r3, #33	; 0x21
 8006050:	d106      	bne.n	8006060 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2200      	movs	r2, #0
 8006056:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800605a:	6978      	ldr	r0, [r7, #20]
 800605c:	f7ff fe56 	bl	8005d0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d109      	bne.n	8006082 <UART_DMAError+0x5e>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b22      	cmp	r3, #34	; 0x22
 8006072:	d106      	bne.n	8006082 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2200      	movs	r2, #0
 8006078:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800607c:	6978      	ldr	r0, [r7, #20]
 800607e:	f7ff fe6b 	bl	8005d58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006088:	f043 0210 	orr.w	r2, r3, #16
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006092:	6978      	ldr	r0, [r7, #20]
 8006094:	f7ff f9fc 	bl	8005490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006098:	bf00      	nop
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff f9e6 	bl	8005490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e8:	61fb      	str	r3, [r7, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6979      	ldr	r1, [r7, #20]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e6      	bne.n	80060d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fa ff8e 	bl	8001034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006118:	bf00      	nop
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <__errno>:
 8006134:	4b01      	ldr	r3, [pc, #4]	; (800613c <__errno+0x8>)
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	2000000c 	.word	0x2000000c

08006140 <__libc_init_array>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	4d0d      	ldr	r5, [pc, #52]	; (8006178 <__libc_init_array+0x38>)
 8006144:	4c0d      	ldr	r4, [pc, #52]	; (800617c <__libc_init_array+0x3c>)
 8006146:	1b64      	subs	r4, r4, r5
 8006148:	10a4      	asrs	r4, r4, #2
 800614a:	2600      	movs	r6, #0
 800614c:	42a6      	cmp	r6, r4
 800614e:	d109      	bne.n	8006164 <__libc_init_array+0x24>
 8006150:	4d0b      	ldr	r5, [pc, #44]	; (8006180 <__libc_init_array+0x40>)
 8006152:	4c0c      	ldr	r4, [pc, #48]	; (8006184 <__libc_init_array+0x44>)
 8006154:	f002 fd38 	bl	8008bc8 <_init>
 8006158:	1b64      	subs	r4, r4, r5
 800615a:	10a4      	asrs	r4, r4, #2
 800615c:	2600      	movs	r6, #0
 800615e:	42a6      	cmp	r6, r4
 8006160:	d105      	bne.n	800616e <__libc_init_array+0x2e>
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	f855 3b04 	ldr.w	r3, [r5], #4
 8006168:	4798      	blx	r3
 800616a:	3601      	adds	r6, #1
 800616c:	e7ee      	b.n	800614c <__libc_init_array+0xc>
 800616e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006172:	4798      	blx	r3
 8006174:	3601      	adds	r6, #1
 8006176:	e7f2      	b.n	800615e <__libc_init_array+0x1e>
 8006178:	08008ff4 	.word	0x08008ff4
 800617c:	08008ff4 	.word	0x08008ff4
 8006180:	08008ff4 	.word	0x08008ff4
 8006184:	08008ff8 	.word	0x08008ff8

08006188 <memset>:
 8006188:	4402      	add	r2, r0
 800618a:	4603      	mov	r3, r0
 800618c:	4293      	cmp	r3, r2
 800618e:	d100      	bne.n	8006192 <memset+0xa>
 8006190:	4770      	bx	lr
 8006192:	f803 1b01 	strb.w	r1, [r3], #1
 8006196:	e7f9      	b.n	800618c <memset+0x4>

08006198 <__cvt>:
 8006198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	ec55 4b10 	vmov	r4, r5, d0
 80061a0:	2d00      	cmp	r5, #0
 80061a2:	460e      	mov	r6, r1
 80061a4:	4619      	mov	r1, r3
 80061a6:	462b      	mov	r3, r5
 80061a8:	bfbb      	ittet	lt
 80061aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061ae:	461d      	movlt	r5, r3
 80061b0:	2300      	movge	r3, #0
 80061b2:	232d      	movlt	r3, #45	; 0x2d
 80061b4:	700b      	strb	r3, [r1, #0]
 80061b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061bc:	4691      	mov	r9, r2
 80061be:	f023 0820 	bic.w	r8, r3, #32
 80061c2:	bfbc      	itt	lt
 80061c4:	4622      	movlt	r2, r4
 80061c6:	4614      	movlt	r4, r2
 80061c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061cc:	d005      	beq.n	80061da <__cvt+0x42>
 80061ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061d2:	d100      	bne.n	80061d6 <__cvt+0x3e>
 80061d4:	3601      	adds	r6, #1
 80061d6:	2102      	movs	r1, #2
 80061d8:	e000      	b.n	80061dc <__cvt+0x44>
 80061da:	2103      	movs	r1, #3
 80061dc:	ab03      	add	r3, sp, #12
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	ab02      	add	r3, sp, #8
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	ec45 4b10 	vmov	d0, r4, r5
 80061e8:	4653      	mov	r3, sl
 80061ea:	4632      	mov	r2, r6
 80061ec:	f000 fccc 	bl	8006b88 <_dtoa_r>
 80061f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061f4:	4607      	mov	r7, r0
 80061f6:	d102      	bne.n	80061fe <__cvt+0x66>
 80061f8:	f019 0f01 	tst.w	r9, #1
 80061fc:	d022      	beq.n	8006244 <__cvt+0xac>
 80061fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006202:	eb07 0906 	add.w	r9, r7, r6
 8006206:	d110      	bne.n	800622a <__cvt+0x92>
 8006208:	783b      	ldrb	r3, [r7, #0]
 800620a:	2b30      	cmp	r3, #48	; 0x30
 800620c:	d10a      	bne.n	8006224 <__cvt+0x8c>
 800620e:	2200      	movs	r2, #0
 8006210:	2300      	movs	r3, #0
 8006212:	4620      	mov	r0, r4
 8006214:	4629      	mov	r1, r5
 8006216:	f7fa fc5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800621a:	b918      	cbnz	r0, 8006224 <__cvt+0x8c>
 800621c:	f1c6 0601 	rsb	r6, r6, #1
 8006220:	f8ca 6000 	str.w	r6, [sl]
 8006224:	f8da 3000 	ldr.w	r3, [sl]
 8006228:	4499      	add	r9, r3
 800622a:	2200      	movs	r2, #0
 800622c:	2300      	movs	r3, #0
 800622e:	4620      	mov	r0, r4
 8006230:	4629      	mov	r1, r5
 8006232:	f7fa fc51 	bl	8000ad8 <__aeabi_dcmpeq>
 8006236:	b108      	cbz	r0, 800623c <__cvt+0xa4>
 8006238:	f8cd 900c 	str.w	r9, [sp, #12]
 800623c:	2230      	movs	r2, #48	; 0x30
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	454b      	cmp	r3, r9
 8006242:	d307      	bcc.n	8006254 <__cvt+0xbc>
 8006244:	9b03      	ldr	r3, [sp, #12]
 8006246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006248:	1bdb      	subs	r3, r3, r7
 800624a:	4638      	mov	r0, r7
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	b004      	add	sp, #16
 8006250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006254:	1c59      	adds	r1, r3, #1
 8006256:	9103      	str	r1, [sp, #12]
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	e7f0      	b.n	800623e <__cvt+0xa6>

0800625c <__exponent>:
 800625c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800625e:	4603      	mov	r3, r0
 8006260:	2900      	cmp	r1, #0
 8006262:	bfb8      	it	lt
 8006264:	4249      	neglt	r1, r1
 8006266:	f803 2b02 	strb.w	r2, [r3], #2
 800626a:	bfb4      	ite	lt
 800626c:	222d      	movlt	r2, #45	; 0x2d
 800626e:	222b      	movge	r2, #43	; 0x2b
 8006270:	2909      	cmp	r1, #9
 8006272:	7042      	strb	r2, [r0, #1]
 8006274:	dd2a      	ble.n	80062cc <__exponent+0x70>
 8006276:	f10d 0407 	add.w	r4, sp, #7
 800627a:	46a4      	mov	ip, r4
 800627c:	270a      	movs	r7, #10
 800627e:	46a6      	mov	lr, r4
 8006280:	460a      	mov	r2, r1
 8006282:	fb91 f6f7 	sdiv	r6, r1, r7
 8006286:	fb07 1516 	mls	r5, r7, r6, r1
 800628a:	3530      	adds	r5, #48	; 0x30
 800628c:	2a63      	cmp	r2, #99	; 0x63
 800628e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006292:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006296:	4631      	mov	r1, r6
 8006298:	dcf1      	bgt.n	800627e <__exponent+0x22>
 800629a:	3130      	adds	r1, #48	; 0x30
 800629c:	f1ae 0502 	sub.w	r5, lr, #2
 80062a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062a4:	1c44      	adds	r4, r0, #1
 80062a6:	4629      	mov	r1, r5
 80062a8:	4561      	cmp	r1, ip
 80062aa:	d30a      	bcc.n	80062c2 <__exponent+0x66>
 80062ac:	f10d 0209 	add.w	r2, sp, #9
 80062b0:	eba2 020e 	sub.w	r2, r2, lr
 80062b4:	4565      	cmp	r5, ip
 80062b6:	bf88      	it	hi
 80062b8:	2200      	movhi	r2, #0
 80062ba:	4413      	add	r3, r2
 80062bc:	1a18      	subs	r0, r3, r0
 80062be:	b003      	add	sp, #12
 80062c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062ca:	e7ed      	b.n	80062a8 <__exponent+0x4c>
 80062cc:	2330      	movs	r3, #48	; 0x30
 80062ce:	3130      	adds	r1, #48	; 0x30
 80062d0:	7083      	strb	r3, [r0, #2]
 80062d2:	70c1      	strb	r1, [r0, #3]
 80062d4:	1d03      	adds	r3, r0, #4
 80062d6:	e7f1      	b.n	80062bc <__exponent+0x60>

080062d8 <_printf_float>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	ed2d 8b02 	vpush	{d8}
 80062e0:	b08d      	sub	sp, #52	; 0x34
 80062e2:	460c      	mov	r4, r1
 80062e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062e8:	4616      	mov	r6, r2
 80062ea:	461f      	mov	r7, r3
 80062ec:	4605      	mov	r5, r0
 80062ee:	f001 fa39 	bl	8007764 <_localeconv_r>
 80062f2:	f8d0 a000 	ldr.w	sl, [r0]
 80062f6:	4650      	mov	r0, sl
 80062f8:	f7f9 ff72 	bl	80001e0 <strlen>
 80062fc:	2300      	movs	r3, #0
 80062fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	9305      	str	r3, [sp, #20]
 8006304:	f8d8 3000 	ldr.w	r3, [r8]
 8006308:	f894 b018 	ldrb.w	fp, [r4, #24]
 800630c:	3307      	adds	r3, #7
 800630e:	f023 0307 	bic.w	r3, r3, #7
 8006312:	f103 0208 	add.w	r2, r3, #8
 8006316:	f8c8 2000 	str.w	r2, [r8]
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006322:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006326:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800632a:	9307      	str	r3, [sp, #28]
 800632c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006330:	ee08 0a10 	vmov	s16, r0
 8006334:	4b9f      	ldr	r3, [pc, #636]	; (80065b4 <_printf_float+0x2dc>)
 8006336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800633a:	f04f 32ff 	mov.w	r2, #4294967295
 800633e:	f7fa fbfd 	bl	8000b3c <__aeabi_dcmpun>
 8006342:	bb88      	cbnz	r0, 80063a8 <_printf_float+0xd0>
 8006344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006348:	4b9a      	ldr	r3, [pc, #616]	; (80065b4 <_printf_float+0x2dc>)
 800634a:	f04f 32ff 	mov.w	r2, #4294967295
 800634e:	f7fa fbd7 	bl	8000b00 <__aeabi_dcmple>
 8006352:	bb48      	cbnz	r0, 80063a8 <_printf_float+0xd0>
 8006354:	2200      	movs	r2, #0
 8006356:	2300      	movs	r3, #0
 8006358:	4640      	mov	r0, r8
 800635a:	4649      	mov	r1, r9
 800635c:	f7fa fbc6 	bl	8000aec <__aeabi_dcmplt>
 8006360:	b110      	cbz	r0, 8006368 <_printf_float+0x90>
 8006362:	232d      	movs	r3, #45	; 0x2d
 8006364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006368:	4b93      	ldr	r3, [pc, #588]	; (80065b8 <_printf_float+0x2e0>)
 800636a:	4894      	ldr	r0, [pc, #592]	; (80065bc <_printf_float+0x2e4>)
 800636c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006370:	bf94      	ite	ls
 8006372:	4698      	movls	r8, r3
 8006374:	4680      	movhi	r8, r0
 8006376:	2303      	movs	r3, #3
 8006378:	6123      	str	r3, [r4, #16]
 800637a:	9b05      	ldr	r3, [sp, #20]
 800637c:	f023 0204 	bic.w	r2, r3, #4
 8006380:	6022      	str	r2, [r4, #0]
 8006382:	f04f 0900 	mov.w	r9, #0
 8006386:	9700      	str	r7, [sp, #0]
 8006388:	4633      	mov	r3, r6
 800638a:	aa0b      	add	r2, sp, #44	; 0x2c
 800638c:	4621      	mov	r1, r4
 800638e:	4628      	mov	r0, r5
 8006390:	f000 f9d8 	bl	8006744 <_printf_common>
 8006394:	3001      	adds	r0, #1
 8006396:	f040 8090 	bne.w	80064ba <_printf_float+0x1e2>
 800639a:	f04f 30ff 	mov.w	r0, #4294967295
 800639e:	b00d      	add	sp, #52	; 0x34
 80063a0:	ecbd 8b02 	vpop	{d8}
 80063a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a8:	4642      	mov	r2, r8
 80063aa:	464b      	mov	r3, r9
 80063ac:	4640      	mov	r0, r8
 80063ae:	4649      	mov	r1, r9
 80063b0:	f7fa fbc4 	bl	8000b3c <__aeabi_dcmpun>
 80063b4:	b140      	cbz	r0, 80063c8 <_printf_float+0xf0>
 80063b6:	464b      	mov	r3, r9
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bfbc      	itt	lt
 80063bc:	232d      	movlt	r3, #45	; 0x2d
 80063be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063c2:	487f      	ldr	r0, [pc, #508]	; (80065c0 <_printf_float+0x2e8>)
 80063c4:	4b7f      	ldr	r3, [pc, #508]	; (80065c4 <_printf_float+0x2ec>)
 80063c6:	e7d1      	b.n	800636c <_printf_float+0x94>
 80063c8:	6863      	ldr	r3, [r4, #4]
 80063ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063ce:	9206      	str	r2, [sp, #24]
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	d13f      	bne.n	8006454 <_printf_float+0x17c>
 80063d4:	2306      	movs	r3, #6
 80063d6:	6063      	str	r3, [r4, #4]
 80063d8:	9b05      	ldr	r3, [sp, #20]
 80063da:	6861      	ldr	r1, [r4, #4]
 80063dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063e0:	2300      	movs	r3, #0
 80063e2:	9303      	str	r3, [sp, #12]
 80063e4:	ab0a      	add	r3, sp, #40	; 0x28
 80063e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063ea:	ab09      	add	r3, sp, #36	; 0x24
 80063ec:	ec49 8b10 	vmov	d0, r8, r9
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	6022      	str	r2, [r4, #0]
 80063f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063f8:	4628      	mov	r0, r5
 80063fa:	f7ff fecd 	bl	8006198 <__cvt>
 80063fe:	9b06      	ldr	r3, [sp, #24]
 8006400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006402:	2b47      	cmp	r3, #71	; 0x47
 8006404:	4680      	mov	r8, r0
 8006406:	d108      	bne.n	800641a <_printf_float+0x142>
 8006408:	1cc8      	adds	r0, r1, #3
 800640a:	db02      	blt.n	8006412 <_printf_float+0x13a>
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	4299      	cmp	r1, r3
 8006410:	dd41      	ble.n	8006496 <_printf_float+0x1be>
 8006412:	f1ab 0b02 	sub.w	fp, fp, #2
 8006416:	fa5f fb8b 	uxtb.w	fp, fp
 800641a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800641e:	d820      	bhi.n	8006462 <_printf_float+0x18a>
 8006420:	3901      	subs	r1, #1
 8006422:	465a      	mov	r2, fp
 8006424:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006428:	9109      	str	r1, [sp, #36]	; 0x24
 800642a:	f7ff ff17 	bl	800625c <__exponent>
 800642e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006430:	1813      	adds	r3, r2, r0
 8006432:	2a01      	cmp	r2, #1
 8006434:	4681      	mov	r9, r0
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	dc02      	bgt.n	8006440 <_printf_float+0x168>
 800643a:	6822      	ldr	r2, [r4, #0]
 800643c:	07d2      	lsls	r2, r2, #31
 800643e:	d501      	bpl.n	8006444 <_printf_float+0x16c>
 8006440:	3301      	adds	r3, #1
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006448:	2b00      	cmp	r3, #0
 800644a:	d09c      	beq.n	8006386 <_printf_float+0xae>
 800644c:	232d      	movs	r3, #45	; 0x2d
 800644e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006452:	e798      	b.n	8006386 <_printf_float+0xae>
 8006454:	9a06      	ldr	r2, [sp, #24]
 8006456:	2a47      	cmp	r2, #71	; 0x47
 8006458:	d1be      	bne.n	80063d8 <_printf_float+0x100>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1bc      	bne.n	80063d8 <_printf_float+0x100>
 800645e:	2301      	movs	r3, #1
 8006460:	e7b9      	b.n	80063d6 <_printf_float+0xfe>
 8006462:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006466:	d118      	bne.n	800649a <_printf_float+0x1c2>
 8006468:	2900      	cmp	r1, #0
 800646a:	6863      	ldr	r3, [r4, #4]
 800646c:	dd0b      	ble.n	8006486 <_printf_float+0x1ae>
 800646e:	6121      	str	r1, [r4, #16]
 8006470:	b913      	cbnz	r3, 8006478 <_printf_float+0x1a0>
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	07d0      	lsls	r0, r2, #31
 8006476:	d502      	bpl.n	800647e <_printf_float+0x1a6>
 8006478:	3301      	adds	r3, #1
 800647a:	440b      	add	r3, r1
 800647c:	6123      	str	r3, [r4, #16]
 800647e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006480:	f04f 0900 	mov.w	r9, #0
 8006484:	e7de      	b.n	8006444 <_printf_float+0x16c>
 8006486:	b913      	cbnz	r3, 800648e <_printf_float+0x1b6>
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	07d2      	lsls	r2, r2, #31
 800648c:	d501      	bpl.n	8006492 <_printf_float+0x1ba>
 800648e:	3302      	adds	r3, #2
 8006490:	e7f4      	b.n	800647c <_printf_float+0x1a4>
 8006492:	2301      	movs	r3, #1
 8006494:	e7f2      	b.n	800647c <_printf_float+0x1a4>
 8006496:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800649a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649c:	4299      	cmp	r1, r3
 800649e:	db05      	blt.n	80064ac <_printf_float+0x1d4>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	6121      	str	r1, [r4, #16]
 80064a4:	07d8      	lsls	r0, r3, #31
 80064a6:	d5ea      	bpl.n	800647e <_printf_float+0x1a6>
 80064a8:	1c4b      	adds	r3, r1, #1
 80064aa:	e7e7      	b.n	800647c <_printf_float+0x1a4>
 80064ac:	2900      	cmp	r1, #0
 80064ae:	bfd4      	ite	le
 80064b0:	f1c1 0202 	rsble	r2, r1, #2
 80064b4:	2201      	movgt	r2, #1
 80064b6:	4413      	add	r3, r2
 80064b8:	e7e0      	b.n	800647c <_printf_float+0x1a4>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	055a      	lsls	r2, r3, #21
 80064be:	d407      	bmi.n	80064d0 <_printf_float+0x1f8>
 80064c0:	6923      	ldr	r3, [r4, #16]
 80064c2:	4642      	mov	r2, r8
 80064c4:	4631      	mov	r1, r6
 80064c6:	4628      	mov	r0, r5
 80064c8:	47b8      	blx	r7
 80064ca:	3001      	adds	r0, #1
 80064cc:	d12c      	bne.n	8006528 <_printf_float+0x250>
 80064ce:	e764      	b.n	800639a <_printf_float+0xc2>
 80064d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064d4:	f240 80e0 	bls.w	8006698 <_printf_float+0x3c0>
 80064d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064dc:	2200      	movs	r2, #0
 80064de:	2300      	movs	r3, #0
 80064e0:	f7fa fafa 	bl	8000ad8 <__aeabi_dcmpeq>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d034      	beq.n	8006552 <_printf_float+0x27a>
 80064e8:	4a37      	ldr	r2, [pc, #220]	; (80065c8 <_printf_float+0x2f0>)
 80064ea:	2301      	movs	r3, #1
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	f43f af51 	beq.w	800639a <_printf_float+0xc2>
 80064f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064fc:	429a      	cmp	r2, r3
 80064fe:	db02      	blt.n	8006506 <_printf_float+0x22e>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	07d8      	lsls	r0, r3, #31
 8006504:	d510      	bpl.n	8006528 <_printf_float+0x250>
 8006506:	ee18 3a10 	vmov	r3, s16
 800650a:	4652      	mov	r2, sl
 800650c:	4631      	mov	r1, r6
 800650e:	4628      	mov	r0, r5
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	f43f af41 	beq.w	800639a <_printf_float+0xc2>
 8006518:	f04f 0800 	mov.w	r8, #0
 800651c:	f104 091a 	add.w	r9, r4, #26
 8006520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006522:	3b01      	subs	r3, #1
 8006524:	4543      	cmp	r3, r8
 8006526:	dc09      	bgt.n	800653c <_printf_float+0x264>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	079b      	lsls	r3, r3, #30
 800652c:	f100 8105 	bmi.w	800673a <_printf_float+0x462>
 8006530:	68e0      	ldr	r0, [r4, #12]
 8006532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006534:	4298      	cmp	r0, r3
 8006536:	bfb8      	it	lt
 8006538:	4618      	movlt	r0, r3
 800653a:	e730      	b.n	800639e <_printf_float+0xc6>
 800653c:	2301      	movs	r3, #1
 800653e:	464a      	mov	r2, r9
 8006540:	4631      	mov	r1, r6
 8006542:	4628      	mov	r0, r5
 8006544:	47b8      	blx	r7
 8006546:	3001      	adds	r0, #1
 8006548:	f43f af27 	beq.w	800639a <_printf_float+0xc2>
 800654c:	f108 0801 	add.w	r8, r8, #1
 8006550:	e7e6      	b.n	8006520 <_printf_float+0x248>
 8006552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	dc39      	bgt.n	80065cc <_printf_float+0x2f4>
 8006558:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <_printf_float+0x2f0>)
 800655a:	2301      	movs	r3, #1
 800655c:	4631      	mov	r1, r6
 800655e:	4628      	mov	r0, r5
 8006560:	47b8      	blx	r7
 8006562:	3001      	adds	r0, #1
 8006564:	f43f af19 	beq.w	800639a <_printf_float+0xc2>
 8006568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800656c:	4313      	orrs	r3, r2
 800656e:	d102      	bne.n	8006576 <_printf_float+0x29e>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	07d9      	lsls	r1, r3, #31
 8006574:	d5d8      	bpl.n	8006528 <_printf_float+0x250>
 8006576:	ee18 3a10 	vmov	r3, s16
 800657a:	4652      	mov	r2, sl
 800657c:	4631      	mov	r1, r6
 800657e:	4628      	mov	r0, r5
 8006580:	47b8      	blx	r7
 8006582:	3001      	adds	r0, #1
 8006584:	f43f af09 	beq.w	800639a <_printf_float+0xc2>
 8006588:	f04f 0900 	mov.w	r9, #0
 800658c:	f104 0a1a 	add.w	sl, r4, #26
 8006590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006592:	425b      	negs	r3, r3
 8006594:	454b      	cmp	r3, r9
 8006596:	dc01      	bgt.n	800659c <_printf_float+0x2c4>
 8006598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659a:	e792      	b.n	80064c2 <_printf_float+0x1ea>
 800659c:	2301      	movs	r3, #1
 800659e:	4652      	mov	r2, sl
 80065a0:	4631      	mov	r1, r6
 80065a2:	4628      	mov	r0, r5
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	f43f aef7 	beq.w	800639a <_printf_float+0xc2>
 80065ac:	f109 0901 	add.w	r9, r9, #1
 80065b0:	e7ee      	b.n	8006590 <_printf_float+0x2b8>
 80065b2:	bf00      	nop
 80065b4:	7fefffff 	.word	0x7fefffff
 80065b8:	08008c1c 	.word	0x08008c1c
 80065bc:	08008c20 	.word	0x08008c20
 80065c0:	08008c28 	.word	0x08008c28
 80065c4:	08008c24 	.word	0x08008c24
 80065c8:	08008c2c 	.word	0x08008c2c
 80065cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065d0:	429a      	cmp	r2, r3
 80065d2:	bfa8      	it	ge
 80065d4:	461a      	movge	r2, r3
 80065d6:	2a00      	cmp	r2, #0
 80065d8:	4691      	mov	r9, r2
 80065da:	dc37      	bgt.n	800664c <_printf_float+0x374>
 80065dc:	f04f 0b00 	mov.w	fp, #0
 80065e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065e4:	f104 021a 	add.w	r2, r4, #26
 80065e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	eba3 0309 	sub.w	r3, r3, r9
 80065f0:	455b      	cmp	r3, fp
 80065f2:	dc33      	bgt.n	800665c <_printf_float+0x384>
 80065f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065f8:	429a      	cmp	r2, r3
 80065fa:	db3b      	blt.n	8006674 <_printf_float+0x39c>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	07da      	lsls	r2, r3, #31
 8006600:	d438      	bmi.n	8006674 <_printf_float+0x39c>
 8006602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006604:	9a05      	ldr	r2, [sp, #20]
 8006606:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006608:	1a9a      	subs	r2, r3, r2
 800660a:	eba3 0901 	sub.w	r9, r3, r1
 800660e:	4591      	cmp	r9, r2
 8006610:	bfa8      	it	ge
 8006612:	4691      	movge	r9, r2
 8006614:	f1b9 0f00 	cmp.w	r9, #0
 8006618:	dc35      	bgt.n	8006686 <_printf_float+0x3ae>
 800661a:	f04f 0800 	mov.w	r8, #0
 800661e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006622:	f104 0a1a 	add.w	sl, r4, #26
 8006626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	eba3 0309 	sub.w	r3, r3, r9
 8006630:	4543      	cmp	r3, r8
 8006632:	f77f af79 	ble.w	8006528 <_printf_float+0x250>
 8006636:	2301      	movs	r3, #1
 8006638:	4652      	mov	r2, sl
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	f43f aeaa 	beq.w	800639a <_printf_float+0xc2>
 8006646:	f108 0801 	add.w	r8, r8, #1
 800664a:	e7ec      	b.n	8006626 <_printf_float+0x34e>
 800664c:	4613      	mov	r3, r2
 800664e:	4631      	mov	r1, r6
 8006650:	4642      	mov	r2, r8
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	d1c0      	bne.n	80065dc <_printf_float+0x304>
 800665a:	e69e      	b.n	800639a <_printf_float+0xc2>
 800665c:	2301      	movs	r3, #1
 800665e:	4631      	mov	r1, r6
 8006660:	4628      	mov	r0, r5
 8006662:	9205      	str	r2, [sp, #20]
 8006664:	47b8      	blx	r7
 8006666:	3001      	adds	r0, #1
 8006668:	f43f ae97 	beq.w	800639a <_printf_float+0xc2>
 800666c:	9a05      	ldr	r2, [sp, #20]
 800666e:	f10b 0b01 	add.w	fp, fp, #1
 8006672:	e7b9      	b.n	80065e8 <_printf_float+0x310>
 8006674:	ee18 3a10 	vmov	r3, s16
 8006678:	4652      	mov	r2, sl
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	d1be      	bne.n	8006602 <_printf_float+0x32a>
 8006684:	e689      	b.n	800639a <_printf_float+0xc2>
 8006686:	9a05      	ldr	r2, [sp, #20]
 8006688:	464b      	mov	r3, r9
 800668a:	4442      	add	r2, r8
 800668c:	4631      	mov	r1, r6
 800668e:	4628      	mov	r0, r5
 8006690:	47b8      	blx	r7
 8006692:	3001      	adds	r0, #1
 8006694:	d1c1      	bne.n	800661a <_printf_float+0x342>
 8006696:	e680      	b.n	800639a <_printf_float+0xc2>
 8006698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800669a:	2a01      	cmp	r2, #1
 800669c:	dc01      	bgt.n	80066a2 <_printf_float+0x3ca>
 800669e:	07db      	lsls	r3, r3, #31
 80066a0:	d538      	bpl.n	8006714 <_printf_float+0x43c>
 80066a2:	2301      	movs	r3, #1
 80066a4:	4642      	mov	r2, r8
 80066a6:	4631      	mov	r1, r6
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b8      	blx	r7
 80066ac:	3001      	adds	r0, #1
 80066ae:	f43f ae74 	beq.w	800639a <_printf_float+0xc2>
 80066b2:	ee18 3a10 	vmov	r3, s16
 80066b6:	4652      	mov	r2, sl
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	f43f ae6b 	beq.w	800639a <_printf_float+0xc2>
 80066c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066c8:	2200      	movs	r2, #0
 80066ca:	2300      	movs	r3, #0
 80066cc:	f7fa fa04 	bl	8000ad8 <__aeabi_dcmpeq>
 80066d0:	b9d8      	cbnz	r0, 800670a <_printf_float+0x432>
 80066d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d4:	f108 0201 	add.w	r2, r8, #1
 80066d8:	3b01      	subs	r3, #1
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	d10e      	bne.n	8006702 <_printf_float+0x42a>
 80066e4:	e659      	b.n	800639a <_printf_float+0xc2>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4652      	mov	r2, sl
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	f43f ae52 	beq.w	800639a <_printf_float+0xc2>
 80066f6:	f108 0801 	add.w	r8, r8, #1
 80066fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fc:	3b01      	subs	r3, #1
 80066fe:	4543      	cmp	r3, r8
 8006700:	dcf1      	bgt.n	80066e6 <_printf_float+0x40e>
 8006702:	464b      	mov	r3, r9
 8006704:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006708:	e6dc      	b.n	80064c4 <_printf_float+0x1ec>
 800670a:	f04f 0800 	mov.w	r8, #0
 800670e:	f104 0a1a 	add.w	sl, r4, #26
 8006712:	e7f2      	b.n	80066fa <_printf_float+0x422>
 8006714:	2301      	movs	r3, #1
 8006716:	4642      	mov	r2, r8
 8006718:	e7df      	b.n	80066da <_printf_float+0x402>
 800671a:	2301      	movs	r3, #1
 800671c:	464a      	mov	r2, r9
 800671e:	4631      	mov	r1, r6
 8006720:	4628      	mov	r0, r5
 8006722:	47b8      	blx	r7
 8006724:	3001      	adds	r0, #1
 8006726:	f43f ae38 	beq.w	800639a <_printf_float+0xc2>
 800672a:	f108 0801 	add.w	r8, r8, #1
 800672e:	68e3      	ldr	r3, [r4, #12]
 8006730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006732:	1a5b      	subs	r3, r3, r1
 8006734:	4543      	cmp	r3, r8
 8006736:	dcf0      	bgt.n	800671a <_printf_float+0x442>
 8006738:	e6fa      	b.n	8006530 <_printf_float+0x258>
 800673a:	f04f 0800 	mov.w	r8, #0
 800673e:	f104 0919 	add.w	r9, r4, #25
 8006742:	e7f4      	b.n	800672e <_printf_float+0x456>

08006744 <_printf_common>:
 8006744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	4616      	mov	r6, r2
 800674a:	4699      	mov	r9, r3
 800674c:	688a      	ldr	r2, [r1, #8]
 800674e:	690b      	ldr	r3, [r1, #16]
 8006750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006754:	4293      	cmp	r3, r2
 8006756:	bfb8      	it	lt
 8006758:	4613      	movlt	r3, r2
 800675a:	6033      	str	r3, [r6, #0]
 800675c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006760:	4607      	mov	r7, r0
 8006762:	460c      	mov	r4, r1
 8006764:	b10a      	cbz	r2, 800676a <_printf_common+0x26>
 8006766:	3301      	adds	r3, #1
 8006768:	6033      	str	r3, [r6, #0]
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	0699      	lsls	r1, r3, #26
 800676e:	bf42      	ittt	mi
 8006770:	6833      	ldrmi	r3, [r6, #0]
 8006772:	3302      	addmi	r3, #2
 8006774:	6033      	strmi	r3, [r6, #0]
 8006776:	6825      	ldr	r5, [r4, #0]
 8006778:	f015 0506 	ands.w	r5, r5, #6
 800677c:	d106      	bne.n	800678c <_printf_common+0x48>
 800677e:	f104 0a19 	add.w	sl, r4, #25
 8006782:	68e3      	ldr	r3, [r4, #12]
 8006784:	6832      	ldr	r2, [r6, #0]
 8006786:	1a9b      	subs	r3, r3, r2
 8006788:	42ab      	cmp	r3, r5
 800678a:	dc26      	bgt.n	80067da <_printf_common+0x96>
 800678c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006790:	1e13      	subs	r3, r2, #0
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	bf18      	it	ne
 8006796:	2301      	movne	r3, #1
 8006798:	0692      	lsls	r2, r2, #26
 800679a:	d42b      	bmi.n	80067f4 <_printf_common+0xb0>
 800679c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067a0:	4649      	mov	r1, r9
 80067a2:	4638      	mov	r0, r7
 80067a4:	47c0      	blx	r8
 80067a6:	3001      	adds	r0, #1
 80067a8:	d01e      	beq.n	80067e8 <_printf_common+0xa4>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	68e5      	ldr	r5, [r4, #12]
 80067ae:	6832      	ldr	r2, [r6, #0]
 80067b0:	f003 0306 	and.w	r3, r3, #6
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	bf08      	it	eq
 80067b8:	1aad      	subeq	r5, r5, r2
 80067ba:	68a3      	ldr	r3, [r4, #8]
 80067bc:	6922      	ldr	r2, [r4, #16]
 80067be:	bf0c      	ite	eq
 80067c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067c4:	2500      	movne	r5, #0
 80067c6:	4293      	cmp	r3, r2
 80067c8:	bfc4      	itt	gt
 80067ca:	1a9b      	subgt	r3, r3, r2
 80067cc:	18ed      	addgt	r5, r5, r3
 80067ce:	2600      	movs	r6, #0
 80067d0:	341a      	adds	r4, #26
 80067d2:	42b5      	cmp	r5, r6
 80067d4:	d11a      	bne.n	800680c <_printf_common+0xc8>
 80067d6:	2000      	movs	r0, #0
 80067d8:	e008      	b.n	80067ec <_printf_common+0xa8>
 80067da:	2301      	movs	r3, #1
 80067dc:	4652      	mov	r2, sl
 80067de:	4649      	mov	r1, r9
 80067e0:	4638      	mov	r0, r7
 80067e2:	47c0      	blx	r8
 80067e4:	3001      	adds	r0, #1
 80067e6:	d103      	bne.n	80067f0 <_printf_common+0xac>
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f0:	3501      	adds	r5, #1
 80067f2:	e7c6      	b.n	8006782 <_printf_common+0x3e>
 80067f4:	18e1      	adds	r1, r4, r3
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	2030      	movs	r0, #48	; 0x30
 80067fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067fe:	4422      	add	r2, r4
 8006800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006808:	3302      	adds	r3, #2
 800680a:	e7c7      	b.n	800679c <_printf_common+0x58>
 800680c:	2301      	movs	r3, #1
 800680e:	4622      	mov	r2, r4
 8006810:	4649      	mov	r1, r9
 8006812:	4638      	mov	r0, r7
 8006814:	47c0      	blx	r8
 8006816:	3001      	adds	r0, #1
 8006818:	d0e6      	beq.n	80067e8 <_printf_common+0xa4>
 800681a:	3601      	adds	r6, #1
 800681c:	e7d9      	b.n	80067d2 <_printf_common+0x8e>
	...

08006820 <_printf_i>:
 8006820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006824:	7e0f      	ldrb	r7, [r1, #24]
 8006826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006828:	2f78      	cmp	r7, #120	; 0x78
 800682a:	4691      	mov	r9, r2
 800682c:	4680      	mov	r8, r0
 800682e:	460c      	mov	r4, r1
 8006830:	469a      	mov	sl, r3
 8006832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006836:	d807      	bhi.n	8006848 <_printf_i+0x28>
 8006838:	2f62      	cmp	r7, #98	; 0x62
 800683a:	d80a      	bhi.n	8006852 <_printf_i+0x32>
 800683c:	2f00      	cmp	r7, #0
 800683e:	f000 80d8 	beq.w	80069f2 <_printf_i+0x1d2>
 8006842:	2f58      	cmp	r7, #88	; 0x58
 8006844:	f000 80a3 	beq.w	800698e <_printf_i+0x16e>
 8006848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800684c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006850:	e03a      	b.n	80068c8 <_printf_i+0xa8>
 8006852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006856:	2b15      	cmp	r3, #21
 8006858:	d8f6      	bhi.n	8006848 <_printf_i+0x28>
 800685a:	a101      	add	r1, pc, #4	; (adr r1, 8006860 <_printf_i+0x40>)
 800685c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006860:	080068b9 	.word	0x080068b9
 8006864:	080068cd 	.word	0x080068cd
 8006868:	08006849 	.word	0x08006849
 800686c:	08006849 	.word	0x08006849
 8006870:	08006849 	.word	0x08006849
 8006874:	08006849 	.word	0x08006849
 8006878:	080068cd 	.word	0x080068cd
 800687c:	08006849 	.word	0x08006849
 8006880:	08006849 	.word	0x08006849
 8006884:	08006849 	.word	0x08006849
 8006888:	08006849 	.word	0x08006849
 800688c:	080069d9 	.word	0x080069d9
 8006890:	080068fd 	.word	0x080068fd
 8006894:	080069bb 	.word	0x080069bb
 8006898:	08006849 	.word	0x08006849
 800689c:	08006849 	.word	0x08006849
 80068a0:	080069fb 	.word	0x080069fb
 80068a4:	08006849 	.word	0x08006849
 80068a8:	080068fd 	.word	0x080068fd
 80068ac:	08006849 	.word	0x08006849
 80068b0:	08006849 	.word	0x08006849
 80068b4:	080069c3 	.word	0x080069c3
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	602a      	str	r2, [r5, #0]
 80068c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0a3      	b.n	8006a14 <_printf_i+0x1f4>
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	6829      	ldr	r1, [r5, #0]
 80068d0:	0606      	lsls	r6, r0, #24
 80068d2:	f101 0304 	add.w	r3, r1, #4
 80068d6:	d50a      	bpl.n	80068ee <_printf_i+0xce>
 80068d8:	680e      	ldr	r6, [r1, #0]
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	2e00      	cmp	r6, #0
 80068de:	da03      	bge.n	80068e8 <_printf_i+0xc8>
 80068e0:	232d      	movs	r3, #45	; 0x2d
 80068e2:	4276      	negs	r6, r6
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e8:	485e      	ldr	r0, [pc, #376]	; (8006a64 <_printf_i+0x244>)
 80068ea:	230a      	movs	r3, #10
 80068ec:	e019      	b.n	8006922 <_printf_i+0x102>
 80068ee:	680e      	ldr	r6, [r1, #0]
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068f6:	bf18      	it	ne
 80068f8:	b236      	sxthne	r6, r6
 80068fa:	e7ef      	b.n	80068dc <_printf_i+0xbc>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	6820      	ldr	r0, [r4, #0]
 8006900:	1d19      	adds	r1, r3, #4
 8006902:	6029      	str	r1, [r5, #0]
 8006904:	0601      	lsls	r1, r0, #24
 8006906:	d501      	bpl.n	800690c <_printf_i+0xec>
 8006908:	681e      	ldr	r6, [r3, #0]
 800690a:	e002      	b.n	8006912 <_printf_i+0xf2>
 800690c:	0646      	lsls	r6, r0, #25
 800690e:	d5fb      	bpl.n	8006908 <_printf_i+0xe8>
 8006910:	881e      	ldrh	r6, [r3, #0]
 8006912:	4854      	ldr	r0, [pc, #336]	; (8006a64 <_printf_i+0x244>)
 8006914:	2f6f      	cmp	r7, #111	; 0x6f
 8006916:	bf0c      	ite	eq
 8006918:	2308      	moveq	r3, #8
 800691a:	230a      	movne	r3, #10
 800691c:	2100      	movs	r1, #0
 800691e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006922:	6865      	ldr	r5, [r4, #4]
 8006924:	60a5      	str	r5, [r4, #8]
 8006926:	2d00      	cmp	r5, #0
 8006928:	bfa2      	ittt	ge
 800692a:	6821      	ldrge	r1, [r4, #0]
 800692c:	f021 0104 	bicge.w	r1, r1, #4
 8006930:	6021      	strge	r1, [r4, #0]
 8006932:	b90e      	cbnz	r6, 8006938 <_printf_i+0x118>
 8006934:	2d00      	cmp	r5, #0
 8006936:	d04d      	beq.n	80069d4 <_printf_i+0x1b4>
 8006938:	4615      	mov	r5, r2
 800693a:	fbb6 f1f3 	udiv	r1, r6, r3
 800693e:	fb03 6711 	mls	r7, r3, r1, r6
 8006942:	5dc7      	ldrb	r7, [r0, r7]
 8006944:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006948:	4637      	mov	r7, r6
 800694a:	42bb      	cmp	r3, r7
 800694c:	460e      	mov	r6, r1
 800694e:	d9f4      	bls.n	800693a <_printf_i+0x11a>
 8006950:	2b08      	cmp	r3, #8
 8006952:	d10b      	bne.n	800696c <_printf_i+0x14c>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	07de      	lsls	r6, r3, #31
 8006958:	d508      	bpl.n	800696c <_printf_i+0x14c>
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	6861      	ldr	r1, [r4, #4]
 800695e:	4299      	cmp	r1, r3
 8006960:	bfde      	ittt	le
 8006962:	2330      	movle	r3, #48	; 0x30
 8006964:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006968:	f105 35ff 	addle.w	r5, r5, #4294967295
 800696c:	1b52      	subs	r2, r2, r5
 800696e:	6122      	str	r2, [r4, #16]
 8006970:	f8cd a000 	str.w	sl, [sp]
 8006974:	464b      	mov	r3, r9
 8006976:	aa03      	add	r2, sp, #12
 8006978:	4621      	mov	r1, r4
 800697a:	4640      	mov	r0, r8
 800697c:	f7ff fee2 	bl	8006744 <_printf_common>
 8006980:	3001      	adds	r0, #1
 8006982:	d14c      	bne.n	8006a1e <_printf_i+0x1fe>
 8006984:	f04f 30ff 	mov.w	r0, #4294967295
 8006988:	b004      	add	sp, #16
 800698a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698e:	4835      	ldr	r0, [pc, #212]	; (8006a64 <_printf_i+0x244>)
 8006990:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006994:	6829      	ldr	r1, [r5, #0]
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	f851 6b04 	ldr.w	r6, [r1], #4
 800699c:	6029      	str	r1, [r5, #0]
 800699e:	061d      	lsls	r5, r3, #24
 80069a0:	d514      	bpl.n	80069cc <_printf_i+0x1ac>
 80069a2:	07df      	lsls	r7, r3, #31
 80069a4:	bf44      	itt	mi
 80069a6:	f043 0320 	orrmi.w	r3, r3, #32
 80069aa:	6023      	strmi	r3, [r4, #0]
 80069ac:	b91e      	cbnz	r6, 80069b6 <_printf_i+0x196>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	f023 0320 	bic.w	r3, r3, #32
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	2310      	movs	r3, #16
 80069b8:	e7b0      	b.n	800691c <_printf_i+0xfc>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	f043 0320 	orr.w	r3, r3, #32
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	2378      	movs	r3, #120	; 0x78
 80069c4:	4828      	ldr	r0, [pc, #160]	; (8006a68 <_printf_i+0x248>)
 80069c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069ca:	e7e3      	b.n	8006994 <_printf_i+0x174>
 80069cc:	0659      	lsls	r1, r3, #25
 80069ce:	bf48      	it	mi
 80069d0:	b2b6      	uxthmi	r6, r6
 80069d2:	e7e6      	b.n	80069a2 <_printf_i+0x182>
 80069d4:	4615      	mov	r5, r2
 80069d6:	e7bb      	b.n	8006950 <_printf_i+0x130>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	6826      	ldr	r6, [r4, #0]
 80069dc:	6961      	ldr	r1, [r4, #20]
 80069de:	1d18      	adds	r0, r3, #4
 80069e0:	6028      	str	r0, [r5, #0]
 80069e2:	0635      	lsls	r5, r6, #24
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	d501      	bpl.n	80069ec <_printf_i+0x1cc>
 80069e8:	6019      	str	r1, [r3, #0]
 80069ea:	e002      	b.n	80069f2 <_printf_i+0x1d2>
 80069ec:	0670      	lsls	r0, r6, #25
 80069ee:	d5fb      	bpl.n	80069e8 <_printf_i+0x1c8>
 80069f0:	8019      	strh	r1, [r3, #0]
 80069f2:	2300      	movs	r3, #0
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	4615      	mov	r5, r2
 80069f8:	e7ba      	b.n	8006970 <_printf_i+0x150>
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	1d1a      	adds	r2, r3, #4
 80069fe:	602a      	str	r2, [r5, #0]
 8006a00:	681d      	ldr	r5, [r3, #0]
 8006a02:	6862      	ldr	r2, [r4, #4]
 8006a04:	2100      	movs	r1, #0
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7f9 fbf2 	bl	80001f0 <memchr>
 8006a0c:	b108      	cbz	r0, 8006a12 <_printf_i+0x1f2>
 8006a0e:	1b40      	subs	r0, r0, r5
 8006a10:	6060      	str	r0, [r4, #4]
 8006a12:	6863      	ldr	r3, [r4, #4]
 8006a14:	6123      	str	r3, [r4, #16]
 8006a16:	2300      	movs	r3, #0
 8006a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1c:	e7a8      	b.n	8006970 <_printf_i+0x150>
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	462a      	mov	r2, r5
 8006a22:	4649      	mov	r1, r9
 8006a24:	4640      	mov	r0, r8
 8006a26:	47d0      	blx	sl
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d0ab      	beq.n	8006984 <_printf_i+0x164>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	079b      	lsls	r3, r3, #30
 8006a30:	d413      	bmi.n	8006a5a <_printf_i+0x23a>
 8006a32:	68e0      	ldr	r0, [r4, #12]
 8006a34:	9b03      	ldr	r3, [sp, #12]
 8006a36:	4298      	cmp	r0, r3
 8006a38:	bfb8      	it	lt
 8006a3a:	4618      	movlt	r0, r3
 8006a3c:	e7a4      	b.n	8006988 <_printf_i+0x168>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4632      	mov	r2, r6
 8006a42:	4649      	mov	r1, r9
 8006a44:	4640      	mov	r0, r8
 8006a46:	47d0      	blx	sl
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d09b      	beq.n	8006984 <_printf_i+0x164>
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	68e3      	ldr	r3, [r4, #12]
 8006a50:	9903      	ldr	r1, [sp, #12]
 8006a52:	1a5b      	subs	r3, r3, r1
 8006a54:	42ab      	cmp	r3, r5
 8006a56:	dcf2      	bgt.n	8006a3e <_printf_i+0x21e>
 8006a58:	e7eb      	b.n	8006a32 <_printf_i+0x212>
 8006a5a:	2500      	movs	r5, #0
 8006a5c:	f104 0619 	add.w	r6, r4, #25
 8006a60:	e7f5      	b.n	8006a4e <_printf_i+0x22e>
 8006a62:	bf00      	nop
 8006a64:	08008c2e 	.word	0x08008c2e
 8006a68:	08008c3f 	.word	0x08008c3f

08006a6c <quorem>:
 8006a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a70:	6903      	ldr	r3, [r0, #16]
 8006a72:	690c      	ldr	r4, [r1, #16]
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	4607      	mov	r7, r0
 8006a78:	f2c0 8081 	blt.w	8006b7e <quorem+0x112>
 8006a7c:	3c01      	subs	r4, #1
 8006a7e:	f101 0814 	add.w	r8, r1, #20
 8006a82:	f100 0514 	add.w	r5, r0, #20
 8006a86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a94:	3301      	adds	r3, #1
 8006a96:	429a      	cmp	r2, r3
 8006a98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006aa0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006aa4:	d331      	bcc.n	8006b0a <quorem+0x9e>
 8006aa6:	f04f 0e00 	mov.w	lr, #0
 8006aaa:	4640      	mov	r0, r8
 8006aac:	46ac      	mov	ip, r5
 8006aae:	46f2      	mov	sl, lr
 8006ab0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ab4:	b293      	uxth	r3, r2
 8006ab6:	fb06 e303 	mla	r3, r6, r3, lr
 8006aba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	ebaa 0303 	sub.w	r3, sl, r3
 8006ac4:	f8dc a000 	ldr.w	sl, [ip]
 8006ac8:	0c12      	lsrs	r2, r2, #16
 8006aca:	fa13 f38a 	uxtah	r3, r3, sl
 8006ace:	fb06 e202 	mla	r2, r6, r2, lr
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	9b00      	ldr	r3, [sp, #0]
 8006ad6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ada:	b292      	uxth	r2, r2
 8006adc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ae0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ae4:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ae8:	4581      	cmp	r9, r0
 8006aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aee:	f84c 3b04 	str.w	r3, [ip], #4
 8006af2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006af6:	d2db      	bcs.n	8006ab0 <quorem+0x44>
 8006af8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006afc:	b92b      	cbnz	r3, 8006b0a <quorem+0x9e>
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	3b04      	subs	r3, #4
 8006b02:	429d      	cmp	r5, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	d32e      	bcc.n	8006b66 <quorem+0xfa>
 8006b08:	613c      	str	r4, [r7, #16]
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	f001 f8c6 	bl	8007c9c <__mcmp>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	db24      	blt.n	8006b5e <quorem+0xf2>
 8006b14:	3601      	adds	r6, #1
 8006b16:	4628      	mov	r0, r5
 8006b18:	f04f 0c00 	mov.w	ip, #0
 8006b1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b20:	f8d0 e000 	ldr.w	lr, [r0]
 8006b24:	b293      	uxth	r3, r2
 8006b26:	ebac 0303 	sub.w	r3, ip, r3
 8006b2a:	0c12      	lsrs	r2, r2, #16
 8006b2c:	fa13 f38e 	uxtah	r3, r3, lr
 8006b30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b3e:	45c1      	cmp	r9, r8
 8006b40:	f840 3b04 	str.w	r3, [r0], #4
 8006b44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b48:	d2e8      	bcs.n	8006b1c <quorem+0xb0>
 8006b4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b52:	b922      	cbnz	r2, 8006b5e <quorem+0xf2>
 8006b54:	3b04      	subs	r3, #4
 8006b56:	429d      	cmp	r5, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	d30a      	bcc.n	8006b72 <quorem+0x106>
 8006b5c:	613c      	str	r4, [r7, #16]
 8006b5e:	4630      	mov	r0, r6
 8006b60:	b003      	add	sp, #12
 8006b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b66:	6812      	ldr	r2, [r2, #0]
 8006b68:	3b04      	subs	r3, #4
 8006b6a:	2a00      	cmp	r2, #0
 8006b6c:	d1cc      	bne.n	8006b08 <quorem+0x9c>
 8006b6e:	3c01      	subs	r4, #1
 8006b70:	e7c7      	b.n	8006b02 <quorem+0x96>
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	d1f0      	bne.n	8006b5c <quorem+0xf0>
 8006b7a:	3c01      	subs	r4, #1
 8006b7c:	e7eb      	b.n	8006b56 <quorem+0xea>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e7ee      	b.n	8006b60 <quorem+0xf4>
 8006b82:	0000      	movs	r0, r0
 8006b84:	0000      	movs	r0, r0
	...

08006b88 <_dtoa_r>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	ed2d 8b04 	vpush	{d8-d9}
 8006b90:	ec57 6b10 	vmov	r6, r7, d0
 8006b94:	b093      	sub	sp, #76	; 0x4c
 8006b96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b9c:	9106      	str	r1, [sp, #24]
 8006b9e:	ee10 aa10 	vmov	sl, s0
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ba8:	46bb      	mov	fp, r7
 8006baa:	b975      	cbnz	r5, 8006bca <_dtoa_r+0x42>
 8006bac:	2010      	movs	r0, #16
 8006bae:	f000 fddd 	bl	800776c <malloc>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	6260      	str	r0, [r4, #36]	; 0x24
 8006bb6:	b920      	cbnz	r0, 8006bc2 <_dtoa_r+0x3a>
 8006bb8:	4ba7      	ldr	r3, [pc, #668]	; (8006e58 <_dtoa_r+0x2d0>)
 8006bba:	21ea      	movs	r1, #234	; 0xea
 8006bbc:	48a7      	ldr	r0, [pc, #668]	; (8006e5c <_dtoa_r+0x2d4>)
 8006bbe:	f001 fa75 	bl	80080ac <__assert_func>
 8006bc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bc6:	6005      	str	r5, [r0, #0]
 8006bc8:	60c5      	str	r5, [r0, #12]
 8006bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bcc:	6819      	ldr	r1, [r3, #0]
 8006bce:	b151      	cbz	r1, 8006be6 <_dtoa_r+0x5e>
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	604a      	str	r2, [r1, #4]
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	4093      	lsls	r3, r2
 8006bd8:	608b      	str	r3, [r1, #8]
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 fe1c 	bl	8007818 <_Bfree>
 8006be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	1e3b      	subs	r3, r7, #0
 8006be8:	bfaa      	itet	ge
 8006bea:	2300      	movge	r3, #0
 8006bec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006bf0:	f8c8 3000 	strge.w	r3, [r8]
 8006bf4:	4b9a      	ldr	r3, [pc, #616]	; (8006e60 <_dtoa_r+0x2d8>)
 8006bf6:	bfbc      	itt	lt
 8006bf8:	2201      	movlt	r2, #1
 8006bfa:	f8c8 2000 	strlt.w	r2, [r8]
 8006bfe:	ea33 030b 	bics.w	r3, r3, fp
 8006c02:	d11b      	bne.n	8006c3c <_dtoa_r+0xb4>
 8006c04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c06:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c10:	4333      	orrs	r3, r6
 8006c12:	f000 8592 	beq.w	800773a <_dtoa_r+0xbb2>
 8006c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c18:	b963      	cbnz	r3, 8006c34 <_dtoa_r+0xac>
 8006c1a:	4b92      	ldr	r3, [pc, #584]	; (8006e64 <_dtoa_r+0x2dc>)
 8006c1c:	e022      	b.n	8006c64 <_dtoa_r+0xdc>
 8006c1e:	4b92      	ldr	r3, [pc, #584]	; (8006e68 <_dtoa_r+0x2e0>)
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	3308      	adds	r3, #8
 8006c24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	9801      	ldr	r0, [sp, #4]
 8006c2a:	b013      	add	sp, #76	; 0x4c
 8006c2c:	ecbd 8b04 	vpop	{d8-d9}
 8006c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c34:	4b8b      	ldr	r3, [pc, #556]	; (8006e64 <_dtoa_r+0x2dc>)
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	3303      	adds	r3, #3
 8006c3a:	e7f3      	b.n	8006c24 <_dtoa_r+0x9c>
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2300      	movs	r3, #0
 8006c40:	4650      	mov	r0, sl
 8006c42:	4659      	mov	r1, fp
 8006c44:	f7f9 ff48 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c48:	ec4b ab19 	vmov	d9, sl, fp
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	b158      	cbz	r0, 8006c68 <_dtoa_r+0xe0>
 8006c50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c52:	2301      	movs	r3, #1
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 856b 	beq.w	8007734 <_dtoa_r+0xbac>
 8006c5e:	4883      	ldr	r0, [pc, #524]	; (8006e6c <_dtoa_r+0x2e4>)
 8006c60:	6018      	str	r0, [r3, #0]
 8006c62:	1e43      	subs	r3, r0, #1
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	e7df      	b.n	8006c28 <_dtoa_r+0xa0>
 8006c68:	ec4b ab10 	vmov	d0, sl, fp
 8006c6c:	aa10      	add	r2, sp, #64	; 0x40
 8006c6e:	a911      	add	r1, sp, #68	; 0x44
 8006c70:	4620      	mov	r0, r4
 8006c72:	f001 f8b9 	bl	8007de8 <__d2b>
 8006c76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c7a:	ee08 0a10 	vmov	s16, r0
 8006c7e:	2d00      	cmp	r5, #0
 8006c80:	f000 8084 	beq.w	8006d8c <_dtoa_r+0x204>
 8006c84:	ee19 3a90 	vmov	r3, s19
 8006c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c90:	4656      	mov	r6, sl
 8006c92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c9e:	4b74      	ldr	r3, [pc, #464]	; (8006e70 <_dtoa_r+0x2e8>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	f7f9 faf7 	bl	8000298 <__aeabi_dsub>
 8006caa:	a365      	add	r3, pc, #404	; (adr r3, 8006e40 <_dtoa_r+0x2b8>)
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	f7f9 fcaa 	bl	8000608 <__aeabi_dmul>
 8006cb4:	a364      	add	r3, pc, #400	; (adr r3, 8006e48 <_dtoa_r+0x2c0>)
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	f7f9 faef 	bl	800029c <__adddf3>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	460f      	mov	r7, r1
 8006cc4:	f7f9 fc36 	bl	8000534 <__aeabi_i2d>
 8006cc8:	a361      	add	r3, pc, #388	; (adr r3, 8006e50 <_dtoa_r+0x2c8>)
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f7f9 fc9b 	bl	8000608 <__aeabi_dmul>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7f9 fadf 	bl	800029c <__adddf3>
 8006cde:	4606      	mov	r6, r0
 8006ce0:	460f      	mov	r7, r1
 8006ce2:	f7f9 ff41 	bl	8000b68 <__aeabi_d2iz>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	9000      	str	r0, [sp, #0]
 8006cea:	2300      	movs	r3, #0
 8006cec:	4630      	mov	r0, r6
 8006cee:	4639      	mov	r1, r7
 8006cf0:	f7f9 fefc 	bl	8000aec <__aeabi_dcmplt>
 8006cf4:	b150      	cbz	r0, 8006d0c <_dtoa_r+0x184>
 8006cf6:	9800      	ldr	r0, [sp, #0]
 8006cf8:	f7f9 fc1c 	bl	8000534 <__aeabi_i2d>
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	463b      	mov	r3, r7
 8006d00:	f7f9 feea 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d04:	b910      	cbnz	r0, 8006d0c <_dtoa_r+0x184>
 8006d06:	9b00      	ldr	r3, [sp, #0]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	9b00      	ldr	r3, [sp, #0]
 8006d0e:	2b16      	cmp	r3, #22
 8006d10:	d85a      	bhi.n	8006dc8 <_dtoa_r+0x240>
 8006d12:	9a00      	ldr	r2, [sp, #0]
 8006d14:	4b57      	ldr	r3, [pc, #348]	; (8006e74 <_dtoa_r+0x2ec>)
 8006d16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	ec51 0b19 	vmov	r0, r1, d9
 8006d22:	f7f9 fee3 	bl	8000aec <__aeabi_dcmplt>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d050      	beq.n	8006dcc <_dtoa_r+0x244>
 8006d2a:	9b00      	ldr	r3, [sp, #0]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2300      	movs	r3, #0
 8006d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d36:	1b5d      	subs	r5, r3, r5
 8006d38:	1e6b      	subs	r3, r5, #1
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	bf45      	ittet	mi
 8006d3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d42:	9304      	strmi	r3, [sp, #16]
 8006d44:	2300      	movpl	r3, #0
 8006d46:	2300      	movmi	r3, #0
 8006d48:	bf4c      	ite	mi
 8006d4a:	9305      	strmi	r3, [sp, #20]
 8006d4c:	9304      	strpl	r3, [sp, #16]
 8006d4e:	9b00      	ldr	r3, [sp, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	db3d      	blt.n	8006dd0 <_dtoa_r+0x248>
 8006d54:	9b05      	ldr	r3, [sp, #20]
 8006d56:	9a00      	ldr	r2, [sp, #0]
 8006d58:	920a      	str	r2, [sp, #40]	; 0x28
 8006d5a:	4413      	add	r3, r2
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	9307      	str	r3, [sp, #28]
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	2b09      	cmp	r3, #9
 8006d66:	f200 8089 	bhi.w	8006e7c <_dtoa_r+0x2f4>
 8006d6a:	2b05      	cmp	r3, #5
 8006d6c:	bfc4      	itt	gt
 8006d6e:	3b04      	subgt	r3, #4
 8006d70:	9306      	strgt	r3, [sp, #24]
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	f1a3 0302 	sub.w	r3, r3, #2
 8006d78:	bfcc      	ite	gt
 8006d7a:	2500      	movgt	r5, #0
 8006d7c:	2501      	movle	r5, #1
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	f200 8087 	bhi.w	8006e92 <_dtoa_r+0x30a>
 8006d84:	e8df f003 	tbb	[pc, r3]
 8006d88:	59383a2d 	.word	0x59383a2d
 8006d8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d90:	441d      	add	r5, r3
 8006d92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	bfc1      	itttt	gt
 8006d9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006da2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006da6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006daa:	bfda      	itte	le
 8006dac:	f1c3 0320 	rsble	r3, r3, #32
 8006db0:	fa06 f003 	lslle.w	r0, r6, r3
 8006db4:	4318      	orrgt	r0, r3
 8006db6:	f7f9 fbad 	bl	8000514 <__aeabi_ui2d>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4606      	mov	r6, r0
 8006dbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006dc2:	3d01      	subs	r5, #1
 8006dc4:	930e      	str	r3, [sp, #56]	; 0x38
 8006dc6:	e76a      	b.n	8006c9e <_dtoa_r+0x116>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e7b2      	b.n	8006d32 <_dtoa_r+0x1aa>
 8006dcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006dce:	e7b1      	b.n	8006d34 <_dtoa_r+0x1ac>
 8006dd0:	9b04      	ldr	r3, [sp, #16]
 8006dd2:	9a00      	ldr	r2, [sp, #0]
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	9304      	str	r3, [sp, #16]
 8006dd8:	4253      	negs	r3, r2
 8006dda:	9307      	str	r3, [sp, #28]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	930a      	str	r3, [sp, #40]	; 0x28
 8006de0:	e7bf      	b.n	8006d62 <_dtoa_r+0x1da>
 8006de2:	2300      	movs	r3, #0
 8006de4:	9308      	str	r3, [sp, #32]
 8006de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	dc55      	bgt.n	8006e98 <_dtoa_r+0x310>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006df2:	461a      	mov	r2, r3
 8006df4:	9209      	str	r2, [sp, #36]	; 0x24
 8006df6:	e00c      	b.n	8006e12 <_dtoa_r+0x28a>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e7f3      	b.n	8006de4 <_dtoa_r+0x25c>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e00:	9308      	str	r3, [sp, #32]
 8006e02:	9b00      	ldr	r3, [sp, #0]
 8006e04:	4413      	add	r3, r2
 8006e06:	9302      	str	r3, [sp, #8]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	9303      	str	r3, [sp, #12]
 8006e0e:	bfb8      	it	lt
 8006e10:	2301      	movlt	r3, #1
 8006e12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e14:	2200      	movs	r2, #0
 8006e16:	6042      	str	r2, [r0, #4]
 8006e18:	2204      	movs	r2, #4
 8006e1a:	f102 0614 	add.w	r6, r2, #20
 8006e1e:	429e      	cmp	r6, r3
 8006e20:	6841      	ldr	r1, [r0, #4]
 8006e22:	d93d      	bls.n	8006ea0 <_dtoa_r+0x318>
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fcb7 	bl	8007798 <_Balloc>
 8006e2a:	9001      	str	r0, [sp, #4]
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d13b      	bne.n	8006ea8 <_dtoa_r+0x320>
 8006e30:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <_dtoa_r+0x2f0>)
 8006e32:	4602      	mov	r2, r0
 8006e34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e38:	e6c0      	b.n	8006bbc <_dtoa_r+0x34>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e7df      	b.n	8006dfe <_dtoa_r+0x276>
 8006e3e:	bf00      	nop
 8006e40:	636f4361 	.word	0x636f4361
 8006e44:	3fd287a7 	.word	0x3fd287a7
 8006e48:	8b60c8b3 	.word	0x8b60c8b3
 8006e4c:	3fc68a28 	.word	0x3fc68a28
 8006e50:	509f79fb 	.word	0x509f79fb
 8006e54:	3fd34413 	.word	0x3fd34413
 8006e58:	08008c5d 	.word	0x08008c5d
 8006e5c:	08008c74 	.word	0x08008c74
 8006e60:	7ff00000 	.word	0x7ff00000
 8006e64:	08008c59 	.word	0x08008c59
 8006e68:	08008c50 	.word	0x08008c50
 8006e6c:	08008c2d 	.word	0x08008c2d
 8006e70:	3ff80000 	.word	0x3ff80000
 8006e74:	08008d68 	.word	0x08008d68
 8006e78:	08008ccf 	.word	0x08008ccf
 8006e7c:	2501      	movs	r5, #1
 8006e7e:	2300      	movs	r3, #0
 8006e80:	9306      	str	r3, [sp, #24]
 8006e82:	9508      	str	r5, [sp, #32]
 8006e84:	f04f 33ff 	mov.w	r3, #4294967295
 8006e88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2312      	movs	r3, #18
 8006e90:	e7b0      	b.n	8006df4 <_dtoa_r+0x26c>
 8006e92:	2301      	movs	r3, #1
 8006e94:	9308      	str	r3, [sp, #32]
 8006e96:	e7f5      	b.n	8006e84 <_dtoa_r+0x2fc>
 8006e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e9e:	e7b8      	b.n	8006e12 <_dtoa_r+0x28a>
 8006ea0:	3101      	adds	r1, #1
 8006ea2:	6041      	str	r1, [r0, #4]
 8006ea4:	0052      	lsls	r2, r2, #1
 8006ea6:	e7b8      	b.n	8006e1a <_dtoa_r+0x292>
 8006ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eaa:	9a01      	ldr	r2, [sp, #4]
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	2b0e      	cmp	r3, #14
 8006eb2:	f200 809d 	bhi.w	8006ff0 <_dtoa_r+0x468>
 8006eb6:	2d00      	cmp	r5, #0
 8006eb8:	f000 809a 	beq.w	8006ff0 <_dtoa_r+0x468>
 8006ebc:	9b00      	ldr	r3, [sp, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dd32      	ble.n	8006f28 <_dtoa_r+0x3a0>
 8006ec2:	4ab7      	ldr	r2, [pc, #732]	; (80071a0 <_dtoa_r+0x618>)
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ecc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ed0:	9b00      	ldr	r3, [sp, #0]
 8006ed2:	05d8      	lsls	r0, r3, #23
 8006ed4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ed8:	d516      	bpl.n	8006f08 <_dtoa_r+0x380>
 8006eda:	4bb2      	ldr	r3, [pc, #712]	; (80071a4 <_dtoa_r+0x61c>)
 8006edc:	ec51 0b19 	vmov	r0, r1, d9
 8006ee0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ee4:	f7f9 fcba 	bl	800085c <__aeabi_ddiv>
 8006ee8:	f007 070f 	and.w	r7, r7, #15
 8006eec:	4682      	mov	sl, r0
 8006eee:	468b      	mov	fp, r1
 8006ef0:	2503      	movs	r5, #3
 8006ef2:	4eac      	ldr	r6, [pc, #688]	; (80071a4 <_dtoa_r+0x61c>)
 8006ef4:	b957      	cbnz	r7, 8006f0c <_dtoa_r+0x384>
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	464b      	mov	r3, r9
 8006efa:	4650      	mov	r0, sl
 8006efc:	4659      	mov	r1, fp
 8006efe:	f7f9 fcad 	bl	800085c <__aeabi_ddiv>
 8006f02:	4682      	mov	sl, r0
 8006f04:	468b      	mov	fp, r1
 8006f06:	e028      	b.n	8006f5a <_dtoa_r+0x3d2>
 8006f08:	2502      	movs	r5, #2
 8006f0a:	e7f2      	b.n	8006ef2 <_dtoa_r+0x36a>
 8006f0c:	07f9      	lsls	r1, r7, #31
 8006f0e:	d508      	bpl.n	8006f22 <_dtoa_r+0x39a>
 8006f10:	4640      	mov	r0, r8
 8006f12:	4649      	mov	r1, r9
 8006f14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f18:	f7f9 fb76 	bl	8000608 <__aeabi_dmul>
 8006f1c:	3501      	adds	r5, #1
 8006f1e:	4680      	mov	r8, r0
 8006f20:	4689      	mov	r9, r1
 8006f22:	107f      	asrs	r7, r7, #1
 8006f24:	3608      	adds	r6, #8
 8006f26:	e7e5      	b.n	8006ef4 <_dtoa_r+0x36c>
 8006f28:	f000 809b 	beq.w	8007062 <_dtoa_r+0x4da>
 8006f2c:	9b00      	ldr	r3, [sp, #0]
 8006f2e:	4f9d      	ldr	r7, [pc, #628]	; (80071a4 <_dtoa_r+0x61c>)
 8006f30:	425e      	negs	r6, r3
 8006f32:	4b9b      	ldr	r3, [pc, #620]	; (80071a0 <_dtoa_r+0x618>)
 8006f34:	f006 020f 	and.w	r2, r6, #15
 8006f38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	ec51 0b19 	vmov	r0, r1, d9
 8006f44:	f7f9 fb60 	bl	8000608 <__aeabi_dmul>
 8006f48:	1136      	asrs	r6, r6, #4
 8006f4a:	4682      	mov	sl, r0
 8006f4c:	468b      	mov	fp, r1
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2502      	movs	r5, #2
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	d17a      	bne.n	800704c <_dtoa_r+0x4c4>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1d3      	bne.n	8006f02 <_dtoa_r+0x37a>
 8006f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 8082 	beq.w	8007066 <_dtoa_r+0x4de>
 8006f62:	4b91      	ldr	r3, [pc, #580]	; (80071a8 <_dtoa_r+0x620>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	4650      	mov	r0, sl
 8006f68:	4659      	mov	r1, fp
 8006f6a:	f7f9 fdbf 	bl	8000aec <__aeabi_dcmplt>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d079      	beq.n	8007066 <_dtoa_r+0x4de>
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d076      	beq.n	8007066 <_dtoa_r+0x4de>
 8006f78:	9b02      	ldr	r3, [sp, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	dd36      	ble.n	8006fec <_dtoa_r+0x464>
 8006f7e:	9b00      	ldr	r3, [sp, #0]
 8006f80:	4650      	mov	r0, sl
 8006f82:	4659      	mov	r1, fp
 8006f84:	1e5f      	subs	r7, r3, #1
 8006f86:	2200      	movs	r2, #0
 8006f88:	4b88      	ldr	r3, [pc, #544]	; (80071ac <_dtoa_r+0x624>)
 8006f8a:	f7f9 fb3d 	bl	8000608 <__aeabi_dmul>
 8006f8e:	9e02      	ldr	r6, [sp, #8]
 8006f90:	4682      	mov	sl, r0
 8006f92:	468b      	mov	fp, r1
 8006f94:	3501      	adds	r5, #1
 8006f96:	4628      	mov	r0, r5
 8006f98:	f7f9 facc 	bl	8000534 <__aeabi_i2d>
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	465b      	mov	r3, fp
 8006fa0:	f7f9 fb32 	bl	8000608 <__aeabi_dmul>
 8006fa4:	4b82      	ldr	r3, [pc, #520]	; (80071b0 <_dtoa_r+0x628>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f7f9 f978 	bl	800029c <__adddf3>
 8006fac:	46d0      	mov	r8, sl
 8006fae:	46d9      	mov	r9, fp
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006fb6:	2e00      	cmp	r6, #0
 8006fb8:	d158      	bne.n	800706c <_dtoa_r+0x4e4>
 8006fba:	4b7e      	ldr	r3, [pc, #504]	; (80071b4 <_dtoa_r+0x62c>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	f7f9 f969 	bl	8000298 <__aeabi_dsub>
 8006fc6:	4652      	mov	r2, sl
 8006fc8:	465b      	mov	r3, fp
 8006fca:	4680      	mov	r8, r0
 8006fcc:	4689      	mov	r9, r1
 8006fce:	f7f9 fdab 	bl	8000b28 <__aeabi_dcmpgt>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	f040 8295 	bne.w	8007502 <_dtoa_r+0x97a>
 8006fd8:	4652      	mov	r2, sl
 8006fda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006fde:	4640      	mov	r0, r8
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	f7f9 fd83 	bl	8000aec <__aeabi_dcmplt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	f040 8289 	bne.w	80074fe <_dtoa_r+0x976>
 8006fec:	ec5b ab19 	vmov	sl, fp, d9
 8006ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f2c0 8148 	blt.w	8007288 <_dtoa_r+0x700>
 8006ff8:	9a00      	ldr	r2, [sp, #0]
 8006ffa:	2a0e      	cmp	r2, #14
 8006ffc:	f300 8144 	bgt.w	8007288 <_dtoa_r+0x700>
 8007000:	4b67      	ldr	r3, [pc, #412]	; (80071a0 <_dtoa_r+0x618>)
 8007002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007006:	e9d3 8900 	ldrd	r8, r9, [r3]
 800700a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800700c:	2b00      	cmp	r3, #0
 800700e:	f280 80d5 	bge.w	80071bc <_dtoa_r+0x634>
 8007012:	9b03      	ldr	r3, [sp, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f300 80d1 	bgt.w	80071bc <_dtoa_r+0x634>
 800701a:	f040 826f 	bne.w	80074fc <_dtoa_r+0x974>
 800701e:	4b65      	ldr	r3, [pc, #404]	; (80071b4 <_dtoa_r+0x62c>)
 8007020:	2200      	movs	r2, #0
 8007022:	4640      	mov	r0, r8
 8007024:	4649      	mov	r1, r9
 8007026:	f7f9 faef 	bl	8000608 <__aeabi_dmul>
 800702a:	4652      	mov	r2, sl
 800702c:	465b      	mov	r3, fp
 800702e:	f7f9 fd71 	bl	8000b14 <__aeabi_dcmpge>
 8007032:	9e03      	ldr	r6, [sp, #12]
 8007034:	4637      	mov	r7, r6
 8007036:	2800      	cmp	r0, #0
 8007038:	f040 8245 	bne.w	80074c6 <_dtoa_r+0x93e>
 800703c:	9d01      	ldr	r5, [sp, #4]
 800703e:	2331      	movs	r3, #49	; 0x31
 8007040:	f805 3b01 	strb.w	r3, [r5], #1
 8007044:	9b00      	ldr	r3, [sp, #0]
 8007046:	3301      	adds	r3, #1
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	e240      	b.n	80074ce <_dtoa_r+0x946>
 800704c:	07f2      	lsls	r2, r6, #31
 800704e:	d505      	bpl.n	800705c <_dtoa_r+0x4d4>
 8007050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007054:	f7f9 fad8 	bl	8000608 <__aeabi_dmul>
 8007058:	3501      	adds	r5, #1
 800705a:	2301      	movs	r3, #1
 800705c:	1076      	asrs	r6, r6, #1
 800705e:	3708      	adds	r7, #8
 8007060:	e777      	b.n	8006f52 <_dtoa_r+0x3ca>
 8007062:	2502      	movs	r5, #2
 8007064:	e779      	b.n	8006f5a <_dtoa_r+0x3d2>
 8007066:	9f00      	ldr	r7, [sp, #0]
 8007068:	9e03      	ldr	r6, [sp, #12]
 800706a:	e794      	b.n	8006f96 <_dtoa_r+0x40e>
 800706c:	9901      	ldr	r1, [sp, #4]
 800706e:	4b4c      	ldr	r3, [pc, #304]	; (80071a0 <_dtoa_r+0x618>)
 8007070:	4431      	add	r1, r6
 8007072:	910d      	str	r1, [sp, #52]	; 0x34
 8007074:	9908      	ldr	r1, [sp, #32]
 8007076:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800707a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800707e:	2900      	cmp	r1, #0
 8007080:	d043      	beq.n	800710a <_dtoa_r+0x582>
 8007082:	494d      	ldr	r1, [pc, #308]	; (80071b8 <_dtoa_r+0x630>)
 8007084:	2000      	movs	r0, #0
 8007086:	f7f9 fbe9 	bl	800085c <__aeabi_ddiv>
 800708a:	4652      	mov	r2, sl
 800708c:	465b      	mov	r3, fp
 800708e:	f7f9 f903 	bl	8000298 <__aeabi_dsub>
 8007092:	9d01      	ldr	r5, [sp, #4]
 8007094:	4682      	mov	sl, r0
 8007096:	468b      	mov	fp, r1
 8007098:	4649      	mov	r1, r9
 800709a:	4640      	mov	r0, r8
 800709c:	f7f9 fd64 	bl	8000b68 <__aeabi_d2iz>
 80070a0:	4606      	mov	r6, r0
 80070a2:	f7f9 fa47 	bl	8000534 <__aeabi_i2d>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4640      	mov	r0, r8
 80070ac:	4649      	mov	r1, r9
 80070ae:	f7f9 f8f3 	bl	8000298 <__aeabi_dsub>
 80070b2:	3630      	adds	r6, #48	; 0x30
 80070b4:	f805 6b01 	strb.w	r6, [r5], #1
 80070b8:	4652      	mov	r2, sl
 80070ba:	465b      	mov	r3, fp
 80070bc:	4680      	mov	r8, r0
 80070be:	4689      	mov	r9, r1
 80070c0:	f7f9 fd14 	bl	8000aec <__aeabi_dcmplt>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d163      	bne.n	8007190 <_dtoa_r+0x608>
 80070c8:	4642      	mov	r2, r8
 80070ca:	464b      	mov	r3, r9
 80070cc:	4936      	ldr	r1, [pc, #216]	; (80071a8 <_dtoa_r+0x620>)
 80070ce:	2000      	movs	r0, #0
 80070d0:	f7f9 f8e2 	bl	8000298 <__aeabi_dsub>
 80070d4:	4652      	mov	r2, sl
 80070d6:	465b      	mov	r3, fp
 80070d8:	f7f9 fd08 	bl	8000aec <__aeabi_dcmplt>
 80070dc:	2800      	cmp	r0, #0
 80070de:	f040 80b5 	bne.w	800724c <_dtoa_r+0x6c4>
 80070e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e4:	429d      	cmp	r5, r3
 80070e6:	d081      	beq.n	8006fec <_dtoa_r+0x464>
 80070e8:	4b30      	ldr	r3, [pc, #192]	; (80071ac <_dtoa_r+0x624>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	4650      	mov	r0, sl
 80070ee:	4659      	mov	r1, fp
 80070f0:	f7f9 fa8a 	bl	8000608 <__aeabi_dmul>
 80070f4:	4b2d      	ldr	r3, [pc, #180]	; (80071ac <_dtoa_r+0x624>)
 80070f6:	4682      	mov	sl, r0
 80070f8:	468b      	mov	fp, r1
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	2200      	movs	r2, #0
 8007100:	f7f9 fa82 	bl	8000608 <__aeabi_dmul>
 8007104:	4680      	mov	r8, r0
 8007106:	4689      	mov	r9, r1
 8007108:	e7c6      	b.n	8007098 <_dtoa_r+0x510>
 800710a:	4650      	mov	r0, sl
 800710c:	4659      	mov	r1, fp
 800710e:	f7f9 fa7b 	bl	8000608 <__aeabi_dmul>
 8007112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007114:	9d01      	ldr	r5, [sp, #4]
 8007116:	930f      	str	r3, [sp, #60]	; 0x3c
 8007118:	4682      	mov	sl, r0
 800711a:	468b      	mov	fp, r1
 800711c:	4649      	mov	r1, r9
 800711e:	4640      	mov	r0, r8
 8007120:	f7f9 fd22 	bl	8000b68 <__aeabi_d2iz>
 8007124:	4606      	mov	r6, r0
 8007126:	f7f9 fa05 	bl	8000534 <__aeabi_i2d>
 800712a:	3630      	adds	r6, #48	; 0x30
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	4640      	mov	r0, r8
 8007132:	4649      	mov	r1, r9
 8007134:	f7f9 f8b0 	bl	8000298 <__aeabi_dsub>
 8007138:	f805 6b01 	strb.w	r6, [r5], #1
 800713c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800713e:	429d      	cmp	r5, r3
 8007140:	4680      	mov	r8, r0
 8007142:	4689      	mov	r9, r1
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	d124      	bne.n	8007194 <_dtoa_r+0x60c>
 800714a:	4b1b      	ldr	r3, [pc, #108]	; (80071b8 <_dtoa_r+0x630>)
 800714c:	4650      	mov	r0, sl
 800714e:	4659      	mov	r1, fp
 8007150:	f7f9 f8a4 	bl	800029c <__adddf3>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4640      	mov	r0, r8
 800715a:	4649      	mov	r1, r9
 800715c:	f7f9 fce4 	bl	8000b28 <__aeabi_dcmpgt>
 8007160:	2800      	cmp	r0, #0
 8007162:	d173      	bne.n	800724c <_dtoa_r+0x6c4>
 8007164:	4652      	mov	r2, sl
 8007166:	465b      	mov	r3, fp
 8007168:	4913      	ldr	r1, [pc, #76]	; (80071b8 <_dtoa_r+0x630>)
 800716a:	2000      	movs	r0, #0
 800716c:	f7f9 f894 	bl	8000298 <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4640      	mov	r0, r8
 8007176:	4649      	mov	r1, r9
 8007178:	f7f9 fcb8 	bl	8000aec <__aeabi_dcmplt>
 800717c:	2800      	cmp	r0, #0
 800717e:	f43f af35 	beq.w	8006fec <_dtoa_r+0x464>
 8007182:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007184:	1e6b      	subs	r3, r5, #1
 8007186:	930f      	str	r3, [sp, #60]	; 0x3c
 8007188:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800718c:	2b30      	cmp	r3, #48	; 0x30
 800718e:	d0f8      	beq.n	8007182 <_dtoa_r+0x5fa>
 8007190:	9700      	str	r7, [sp, #0]
 8007192:	e049      	b.n	8007228 <_dtoa_r+0x6a0>
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <_dtoa_r+0x624>)
 8007196:	f7f9 fa37 	bl	8000608 <__aeabi_dmul>
 800719a:	4680      	mov	r8, r0
 800719c:	4689      	mov	r9, r1
 800719e:	e7bd      	b.n	800711c <_dtoa_r+0x594>
 80071a0:	08008d68 	.word	0x08008d68
 80071a4:	08008d40 	.word	0x08008d40
 80071a8:	3ff00000 	.word	0x3ff00000
 80071ac:	40240000 	.word	0x40240000
 80071b0:	401c0000 	.word	0x401c0000
 80071b4:	40140000 	.word	0x40140000
 80071b8:	3fe00000 	.word	0x3fe00000
 80071bc:	9d01      	ldr	r5, [sp, #4]
 80071be:	4656      	mov	r6, sl
 80071c0:	465f      	mov	r7, fp
 80071c2:	4642      	mov	r2, r8
 80071c4:	464b      	mov	r3, r9
 80071c6:	4630      	mov	r0, r6
 80071c8:	4639      	mov	r1, r7
 80071ca:	f7f9 fb47 	bl	800085c <__aeabi_ddiv>
 80071ce:	f7f9 fccb 	bl	8000b68 <__aeabi_d2iz>
 80071d2:	4682      	mov	sl, r0
 80071d4:	f7f9 f9ae 	bl	8000534 <__aeabi_i2d>
 80071d8:	4642      	mov	r2, r8
 80071da:	464b      	mov	r3, r9
 80071dc:	f7f9 fa14 	bl	8000608 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80071ec:	f7f9 f854 	bl	8000298 <__aeabi_dsub>
 80071f0:	f805 6b01 	strb.w	r6, [r5], #1
 80071f4:	9e01      	ldr	r6, [sp, #4]
 80071f6:	9f03      	ldr	r7, [sp, #12]
 80071f8:	1bae      	subs	r6, r5, r6
 80071fa:	42b7      	cmp	r7, r6
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	d135      	bne.n	800726e <_dtoa_r+0x6e6>
 8007202:	f7f9 f84b 	bl	800029c <__adddf3>
 8007206:	4642      	mov	r2, r8
 8007208:	464b      	mov	r3, r9
 800720a:	4606      	mov	r6, r0
 800720c:	460f      	mov	r7, r1
 800720e:	f7f9 fc8b 	bl	8000b28 <__aeabi_dcmpgt>
 8007212:	b9d0      	cbnz	r0, 800724a <_dtoa_r+0x6c2>
 8007214:	4642      	mov	r2, r8
 8007216:	464b      	mov	r3, r9
 8007218:	4630      	mov	r0, r6
 800721a:	4639      	mov	r1, r7
 800721c:	f7f9 fc5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007220:	b110      	cbz	r0, 8007228 <_dtoa_r+0x6a0>
 8007222:	f01a 0f01 	tst.w	sl, #1
 8007226:	d110      	bne.n	800724a <_dtoa_r+0x6c2>
 8007228:	4620      	mov	r0, r4
 800722a:	ee18 1a10 	vmov	r1, s16
 800722e:	f000 faf3 	bl	8007818 <_Bfree>
 8007232:	2300      	movs	r3, #0
 8007234:	9800      	ldr	r0, [sp, #0]
 8007236:	702b      	strb	r3, [r5, #0]
 8007238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800723a:	3001      	adds	r0, #1
 800723c:	6018      	str	r0, [r3, #0]
 800723e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007240:	2b00      	cmp	r3, #0
 8007242:	f43f acf1 	beq.w	8006c28 <_dtoa_r+0xa0>
 8007246:	601d      	str	r5, [r3, #0]
 8007248:	e4ee      	b.n	8006c28 <_dtoa_r+0xa0>
 800724a:	9f00      	ldr	r7, [sp, #0]
 800724c:	462b      	mov	r3, r5
 800724e:	461d      	mov	r5, r3
 8007250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007254:	2a39      	cmp	r2, #57	; 0x39
 8007256:	d106      	bne.n	8007266 <_dtoa_r+0x6de>
 8007258:	9a01      	ldr	r2, [sp, #4]
 800725a:	429a      	cmp	r2, r3
 800725c:	d1f7      	bne.n	800724e <_dtoa_r+0x6c6>
 800725e:	9901      	ldr	r1, [sp, #4]
 8007260:	2230      	movs	r2, #48	; 0x30
 8007262:	3701      	adds	r7, #1
 8007264:	700a      	strb	r2, [r1, #0]
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	3201      	adds	r2, #1
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	e790      	b.n	8007190 <_dtoa_r+0x608>
 800726e:	4ba6      	ldr	r3, [pc, #664]	; (8007508 <_dtoa_r+0x980>)
 8007270:	2200      	movs	r2, #0
 8007272:	f7f9 f9c9 	bl	8000608 <__aeabi_dmul>
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	4606      	mov	r6, r0
 800727c:	460f      	mov	r7, r1
 800727e:	f7f9 fc2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007282:	2800      	cmp	r0, #0
 8007284:	d09d      	beq.n	80071c2 <_dtoa_r+0x63a>
 8007286:	e7cf      	b.n	8007228 <_dtoa_r+0x6a0>
 8007288:	9a08      	ldr	r2, [sp, #32]
 800728a:	2a00      	cmp	r2, #0
 800728c:	f000 80d7 	beq.w	800743e <_dtoa_r+0x8b6>
 8007290:	9a06      	ldr	r2, [sp, #24]
 8007292:	2a01      	cmp	r2, #1
 8007294:	f300 80ba 	bgt.w	800740c <_dtoa_r+0x884>
 8007298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800729a:	2a00      	cmp	r2, #0
 800729c:	f000 80b2 	beq.w	8007404 <_dtoa_r+0x87c>
 80072a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072a4:	9e07      	ldr	r6, [sp, #28]
 80072a6:	9d04      	ldr	r5, [sp, #16]
 80072a8:	9a04      	ldr	r2, [sp, #16]
 80072aa:	441a      	add	r2, r3
 80072ac:	9204      	str	r2, [sp, #16]
 80072ae:	9a05      	ldr	r2, [sp, #20]
 80072b0:	2101      	movs	r1, #1
 80072b2:	441a      	add	r2, r3
 80072b4:	4620      	mov	r0, r4
 80072b6:	9205      	str	r2, [sp, #20]
 80072b8:	f000 fb66 	bl	8007988 <__i2b>
 80072bc:	4607      	mov	r7, r0
 80072be:	2d00      	cmp	r5, #0
 80072c0:	dd0c      	ble.n	80072dc <_dtoa_r+0x754>
 80072c2:	9b05      	ldr	r3, [sp, #20]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dd09      	ble.n	80072dc <_dtoa_r+0x754>
 80072c8:	42ab      	cmp	r3, r5
 80072ca:	9a04      	ldr	r2, [sp, #16]
 80072cc:	bfa8      	it	ge
 80072ce:	462b      	movge	r3, r5
 80072d0:	1ad2      	subs	r2, r2, r3
 80072d2:	9204      	str	r2, [sp, #16]
 80072d4:	9a05      	ldr	r2, [sp, #20]
 80072d6:	1aed      	subs	r5, r5, r3
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	9305      	str	r3, [sp, #20]
 80072dc:	9b07      	ldr	r3, [sp, #28]
 80072de:	b31b      	cbz	r3, 8007328 <_dtoa_r+0x7a0>
 80072e0:	9b08      	ldr	r3, [sp, #32]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 80af 	beq.w	8007446 <_dtoa_r+0x8be>
 80072e8:	2e00      	cmp	r6, #0
 80072ea:	dd13      	ble.n	8007314 <_dtoa_r+0x78c>
 80072ec:	4639      	mov	r1, r7
 80072ee:	4632      	mov	r2, r6
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fc09 	bl	8007b08 <__pow5mult>
 80072f6:	ee18 2a10 	vmov	r2, s16
 80072fa:	4601      	mov	r1, r0
 80072fc:	4607      	mov	r7, r0
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 fb58 	bl	80079b4 <__multiply>
 8007304:	ee18 1a10 	vmov	r1, s16
 8007308:	4680      	mov	r8, r0
 800730a:	4620      	mov	r0, r4
 800730c:	f000 fa84 	bl	8007818 <_Bfree>
 8007310:	ee08 8a10 	vmov	s16, r8
 8007314:	9b07      	ldr	r3, [sp, #28]
 8007316:	1b9a      	subs	r2, r3, r6
 8007318:	d006      	beq.n	8007328 <_dtoa_r+0x7a0>
 800731a:	ee18 1a10 	vmov	r1, s16
 800731e:	4620      	mov	r0, r4
 8007320:	f000 fbf2 	bl	8007b08 <__pow5mult>
 8007324:	ee08 0a10 	vmov	s16, r0
 8007328:	2101      	movs	r1, #1
 800732a:	4620      	mov	r0, r4
 800732c:	f000 fb2c 	bl	8007988 <__i2b>
 8007330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	4606      	mov	r6, r0
 8007336:	f340 8088 	ble.w	800744a <_dtoa_r+0x8c2>
 800733a:	461a      	mov	r2, r3
 800733c:	4601      	mov	r1, r0
 800733e:	4620      	mov	r0, r4
 8007340:	f000 fbe2 	bl	8007b08 <__pow5mult>
 8007344:	9b06      	ldr	r3, [sp, #24]
 8007346:	2b01      	cmp	r3, #1
 8007348:	4606      	mov	r6, r0
 800734a:	f340 8081 	ble.w	8007450 <_dtoa_r+0x8c8>
 800734e:	f04f 0800 	mov.w	r8, #0
 8007352:	6933      	ldr	r3, [r6, #16]
 8007354:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007358:	6918      	ldr	r0, [r3, #16]
 800735a:	f000 fac5 	bl	80078e8 <__hi0bits>
 800735e:	f1c0 0020 	rsb	r0, r0, #32
 8007362:	9b05      	ldr	r3, [sp, #20]
 8007364:	4418      	add	r0, r3
 8007366:	f010 001f 	ands.w	r0, r0, #31
 800736a:	f000 8092 	beq.w	8007492 <_dtoa_r+0x90a>
 800736e:	f1c0 0320 	rsb	r3, r0, #32
 8007372:	2b04      	cmp	r3, #4
 8007374:	f340 808a 	ble.w	800748c <_dtoa_r+0x904>
 8007378:	f1c0 001c 	rsb	r0, r0, #28
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	4403      	add	r3, r0
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	9b05      	ldr	r3, [sp, #20]
 8007384:	4403      	add	r3, r0
 8007386:	4405      	add	r5, r0
 8007388:	9305      	str	r3, [sp, #20]
 800738a:	9b04      	ldr	r3, [sp, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	dd07      	ble.n	80073a0 <_dtoa_r+0x818>
 8007390:	ee18 1a10 	vmov	r1, s16
 8007394:	461a      	mov	r2, r3
 8007396:	4620      	mov	r0, r4
 8007398:	f000 fc10 	bl	8007bbc <__lshift>
 800739c:	ee08 0a10 	vmov	s16, r0
 80073a0:	9b05      	ldr	r3, [sp, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	dd05      	ble.n	80073b2 <_dtoa_r+0x82a>
 80073a6:	4631      	mov	r1, r6
 80073a8:	461a      	mov	r2, r3
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 fc06 	bl	8007bbc <__lshift>
 80073b0:	4606      	mov	r6, r0
 80073b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d06e      	beq.n	8007496 <_dtoa_r+0x90e>
 80073b8:	ee18 0a10 	vmov	r0, s16
 80073bc:	4631      	mov	r1, r6
 80073be:	f000 fc6d 	bl	8007c9c <__mcmp>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	da67      	bge.n	8007496 <_dtoa_r+0x90e>
 80073c6:	9b00      	ldr	r3, [sp, #0]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	ee18 1a10 	vmov	r1, s16
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	220a      	movs	r2, #10
 80073d2:	2300      	movs	r3, #0
 80073d4:	4620      	mov	r0, r4
 80073d6:	f000 fa41 	bl	800785c <__multadd>
 80073da:	9b08      	ldr	r3, [sp, #32]
 80073dc:	ee08 0a10 	vmov	s16, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 81b1 	beq.w	8007748 <_dtoa_r+0xbc0>
 80073e6:	2300      	movs	r3, #0
 80073e8:	4639      	mov	r1, r7
 80073ea:	220a      	movs	r2, #10
 80073ec:	4620      	mov	r0, r4
 80073ee:	f000 fa35 	bl	800785c <__multadd>
 80073f2:	9b02      	ldr	r3, [sp, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	4607      	mov	r7, r0
 80073f8:	f300 808e 	bgt.w	8007518 <_dtoa_r+0x990>
 80073fc:	9b06      	ldr	r3, [sp, #24]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	dc51      	bgt.n	80074a6 <_dtoa_r+0x91e>
 8007402:	e089      	b.n	8007518 <_dtoa_r+0x990>
 8007404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800740a:	e74b      	b.n	80072a4 <_dtoa_r+0x71c>
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	1e5e      	subs	r6, r3, #1
 8007410:	9b07      	ldr	r3, [sp, #28]
 8007412:	42b3      	cmp	r3, r6
 8007414:	bfbf      	itttt	lt
 8007416:	9b07      	ldrlt	r3, [sp, #28]
 8007418:	9607      	strlt	r6, [sp, #28]
 800741a:	1af2      	sublt	r2, r6, r3
 800741c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800741e:	bfb6      	itet	lt
 8007420:	189b      	addlt	r3, r3, r2
 8007422:	1b9e      	subge	r6, r3, r6
 8007424:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007426:	9b03      	ldr	r3, [sp, #12]
 8007428:	bfb8      	it	lt
 800742a:	2600      	movlt	r6, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	bfb7      	itett	lt
 8007430:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007434:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007438:	1a9d      	sublt	r5, r3, r2
 800743a:	2300      	movlt	r3, #0
 800743c:	e734      	b.n	80072a8 <_dtoa_r+0x720>
 800743e:	9e07      	ldr	r6, [sp, #28]
 8007440:	9d04      	ldr	r5, [sp, #16]
 8007442:	9f08      	ldr	r7, [sp, #32]
 8007444:	e73b      	b.n	80072be <_dtoa_r+0x736>
 8007446:	9a07      	ldr	r2, [sp, #28]
 8007448:	e767      	b.n	800731a <_dtoa_r+0x792>
 800744a:	9b06      	ldr	r3, [sp, #24]
 800744c:	2b01      	cmp	r3, #1
 800744e:	dc18      	bgt.n	8007482 <_dtoa_r+0x8fa>
 8007450:	f1ba 0f00 	cmp.w	sl, #0
 8007454:	d115      	bne.n	8007482 <_dtoa_r+0x8fa>
 8007456:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800745a:	b993      	cbnz	r3, 8007482 <_dtoa_r+0x8fa>
 800745c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007460:	0d1b      	lsrs	r3, r3, #20
 8007462:	051b      	lsls	r3, r3, #20
 8007464:	b183      	cbz	r3, 8007488 <_dtoa_r+0x900>
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	3301      	adds	r3, #1
 800746a:	9304      	str	r3, [sp, #16]
 800746c:	9b05      	ldr	r3, [sp, #20]
 800746e:	3301      	adds	r3, #1
 8007470:	9305      	str	r3, [sp, #20]
 8007472:	f04f 0801 	mov.w	r8, #1
 8007476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007478:	2b00      	cmp	r3, #0
 800747a:	f47f af6a 	bne.w	8007352 <_dtoa_r+0x7ca>
 800747e:	2001      	movs	r0, #1
 8007480:	e76f      	b.n	8007362 <_dtoa_r+0x7da>
 8007482:	f04f 0800 	mov.w	r8, #0
 8007486:	e7f6      	b.n	8007476 <_dtoa_r+0x8ee>
 8007488:	4698      	mov	r8, r3
 800748a:	e7f4      	b.n	8007476 <_dtoa_r+0x8ee>
 800748c:	f43f af7d 	beq.w	800738a <_dtoa_r+0x802>
 8007490:	4618      	mov	r0, r3
 8007492:	301c      	adds	r0, #28
 8007494:	e772      	b.n	800737c <_dtoa_r+0x7f4>
 8007496:	9b03      	ldr	r3, [sp, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	dc37      	bgt.n	800750c <_dtoa_r+0x984>
 800749c:	9b06      	ldr	r3, [sp, #24]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	dd34      	ble.n	800750c <_dtoa_r+0x984>
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	9302      	str	r3, [sp, #8]
 80074a6:	9b02      	ldr	r3, [sp, #8]
 80074a8:	b96b      	cbnz	r3, 80074c6 <_dtoa_r+0x93e>
 80074aa:	4631      	mov	r1, r6
 80074ac:	2205      	movs	r2, #5
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 f9d4 	bl	800785c <__multadd>
 80074b4:	4601      	mov	r1, r0
 80074b6:	4606      	mov	r6, r0
 80074b8:	ee18 0a10 	vmov	r0, s16
 80074bc:	f000 fbee 	bl	8007c9c <__mcmp>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	f73f adbb 	bgt.w	800703c <_dtoa_r+0x4b4>
 80074c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c8:	9d01      	ldr	r5, [sp, #4]
 80074ca:	43db      	mvns	r3, r3
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	f04f 0800 	mov.w	r8, #0
 80074d2:	4631      	mov	r1, r6
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 f99f 	bl	8007818 <_Bfree>
 80074da:	2f00      	cmp	r7, #0
 80074dc:	f43f aea4 	beq.w	8007228 <_dtoa_r+0x6a0>
 80074e0:	f1b8 0f00 	cmp.w	r8, #0
 80074e4:	d005      	beq.n	80074f2 <_dtoa_r+0x96a>
 80074e6:	45b8      	cmp	r8, r7
 80074e8:	d003      	beq.n	80074f2 <_dtoa_r+0x96a>
 80074ea:	4641      	mov	r1, r8
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 f993 	bl	8007818 <_Bfree>
 80074f2:	4639      	mov	r1, r7
 80074f4:	4620      	mov	r0, r4
 80074f6:	f000 f98f 	bl	8007818 <_Bfree>
 80074fa:	e695      	b.n	8007228 <_dtoa_r+0x6a0>
 80074fc:	2600      	movs	r6, #0
 80074fe:	4637      	mov	r7, r6
 8007500:	e7e1      	b.n	80074c6 <_dtoa_r+0x93e>
 8007502:	9700      	str	r7, [sp, #0]
 8007504:	4637      	mov	r7, r6
 8007506:	e599      	b.n	800703c <_dtoa_r+0x4b4>
 8007508:	40240000 	.word	0x40240000
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 80ca 	beq.w	80076a8 <_dtoa_r+0xb20>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	9302      	str	r3, [sp, #8]
 8007518:	2d00      	cmp	r5, #0
 800751a:	dd05      	ble.n	8007528 <_dtoa_r+0x9a0>
 800751c:	4639      	mov	r1, r7
 800751e:	462a      	mov	r2, r5
 8007520:	4620      	mov	r0, r4
 8007522:	f000 fb4b 	bl	8007bbc <__lshift>
 8007526:	4607      	mov	r7, r0
 8007528:	f1b8 0f00 	cmp.w	r8, #0
 800752c:	d05b      	beq.n	80075e6 <_dtoa_r+0xa5e>
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4620      	mov	r0, r4
 8007532:	f000 f931 	bl	8007798 <_Balloc>
 8007536:	4605      	mov	r5, r0
 8007538:	b928      	cbnz	r0, 8007546 <_dtoa_r+0x9be>
 800753a:	4b87      	ldr	r3, [pc, #540]	; (8007758 <_dtoa_r+0xbd0>)
 800753c:	4602      	mov	r2, r0
 800753e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007542:	f7ff bb3b 	b.w	8006bbc <_dtoa_r+0x34>
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	3202      	adds	r2, #2
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	f107 010c 	add.w	r1, r7, #12
 8007550:	300c      	adds	r0, #12
 8007552:	f000 f913 	bl	800777c <memcpy>
 8007556:	2201      	movs	r2, #1
 8007558:	4629      	mov	r1, r5
 800755a:	4620      	mov	r0, r4
 800755c:	f000 fb2e 	bl	8007bbc <__lshift>
 8007560:	9b01      	ldr	r3, [sp, #4]
 8007562:	f103 0901 	add.w	r9, r3, #1
 8007566:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800756a:	4413      	add	r3, r2
 800756c:	9305      	str	r3, [sp, #20]
 800756e:	f00a 0301 	and.w	r3, sl, #1
 8007572:	46b8      	mov	r8, r7
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	4607      	mov	r7, r0
 8007578:	4631      	mov	r1, r6
 800757a:	ee18 0a10 	vmov	r0, s16
 800757e:	f7ff fa75 	bl	8006a6c <quorem>
 8007582:	4641      	mov	r1, r8
 8007584:	9002      	str	r0, [sp, #8]
 8007586:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800758a:	ee18 0a10 	vmov	r0, s16
 800758e:	f000 fb85 	bl	8007c9c <__mcmp>
 8007592:	463a      	mov	r2, r7
 8007594:	9003      	str	r0, [sp, #12]
 8007596:	4631      	mov	r1, r6
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fb9b 	bl	8007cd4 <__mdiff>
 800759e:	68c2      	ldr	r2, [r0, #12]
 80075a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80075a4:	4605      	mov	r5, r0
 80075a6:	bb02      	cbnz	r2, 80075ea <_dtoa_r+0xa62>
 80075a8:	4601      	mov	r1, r0
 80075aa:	ee18 0a10 	vmov	r0, s16
 80075ae:	f000 fb75 	bl	8007c9c <__mcmp>
 80075b2:	4602      	mov	r2, r0
 80075b4:	4629      	mov	r1, r5
 80075b6:	4620      	mov	r0, r4
 80075b8:	9207      	str	r2, [sp, #28]
 80075ba:	f000 f92d 	bl	8007818 <_Bfree>
 80075be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80075c2:	ea43 0102 	orr.w	r1, r3, r2
 80075c6:	9b04      	ldr	r3, [sp, #16]
 80075c8:	430b      	orrs	r3, r1
 80075ca:	464d      	mov	r5, r9
 80075cc:	d10f      	bne.n	80075ee <_dtoa_r+0xa66>
 80075ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075d2:	d02a      	beq.n	800762a <_dtoa_r+0xaa2>
 80075d4:	9b03      	ldr	r3, [sp, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	dd02      	ble.n	80075e0 <_dtoa_r+0xa58>
 80075da:	9b02      	ldr	r3, [sp, #8]
 80075dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80075e0:	f88b a000 	strb.w	sl, [fp]
 80075e4:	e775      	b.n	80074d2 <_dtoa_r+0x94a>
 80075e6:	4638      	mov	r0, r7
 80075e8:	e7ba      	b.n	8007560 <_dtoa_r+0x9d8>
 80075ea:	2201      	movs	r2, #1
 80075ec:	e7e2      	b.n	80075b4 <_dtoa_r+0xa2c>
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db04      	blt.n	80075fe <_dtoa_r+0xa76>
 80075f4:	9906      	ldr	r1, [sp, #24]
 80075f6:	430b      	orrs	r3, r1
 80075f8:	9904      	ldr	r1, [sp, #16]
 80075fa:	430b      	orrs	r3, r1
 80075fc:	d122      	bne.n	8007644 <_dtoa_r+0xabc>
 80075fe:	2a00      	cmp	r2, #0
 8007600:	ddee      	ble.n	80075e0 <_dtoa_r+0xa58>
 8007602:	ee18 1a10 	vmov	r1, s16
 8007606:	2201      	movs	r2, #1
 8007608:	4620      	mov	r0, r4
 800760a:	f000 fad7 	bl	8007bbc <__lshift>
 800760e:	4631      	mov	r1, r6
 8007610:	ee08 0a10 	vmov	s16, r0
 8007614:	f000 fb42 	bl	8007c9c <__mcmp>
 8007618:	2800      	cmp	r0, #0
 800761a:	dc03      	bgt.n	8007624 <_dtoa_r+0xa9c>
 800761c:	d1e0      	bne.n	80075e0 <_dtoa_r+0xa58>
 800761e:	f01a 0f01 	tst.w	sl, #1
 8007622:	d0dd      	beq.n	80075e0 <_dtoa_r+0xa58>
 8007624:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007628:	d1d7      	bne.n	80075da <_dtoa_r+0xa52>
 800762a:	2339      	movs	r3, #57	; 0x39
 800762c:	f88b 3000 	strb.w	r3, [fp]
 8007630:	462b      	mov	r3, r5
 8007632:	461d      	mov	r5, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800763a:	2a39      	cmp	r2, #57	; 0x39
 800763c:	d071      	beq.n	8007722 <_dtoa_r+0xb9a>
 800763e:	3201      	adds	r2, #1
 8007640:	701a      	strb	r2, [r3, #0]
 8007642:	e746      	b.n	80074d2 <_dtoa_r+0x94a>
 8007644:	2a00      	cmp	r2, #0
 8007646:	dd07      	ble.n	8007658 <_dtoa_r+0xad0>
 8007648:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800764c:	d0ed      	beq.n	800762a <_dtoa_r+0xaa2>
 800764e:	f10a 0301 	add.w	r3, sl, #1
 8007652:	f88b 3000 	strb.w	r3, [fp]
 8007656:	e73c      	b.n	80074d2 <_dtoa_r+0x94a>
 8007658:	9b05      	ldr	r3, [sp, #20]
 800765a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800765e:	4599      	cmp	r9, r3
 8007660:	d047      	beq.n	80076f2 <_dtoa_r+0xb6a>
 8007662:	ee18 1a10 	vmov	r1, s16
 8007666:	2300      	movs	r3, #0
 8007668:	220a      	movs	r2, #10
 800766a:	4620      	mov	r0, r4
 800766c:	f000 f8f6 	bl	800785c <__multadd>
 8007670:	45b8      	cmp	r8, r7
 8007672:	ee08 0a10 	vmov	s16, r0
 8007676:	f04f 0300 	mov.w	r3, #0
 800767a:	f04f 020a 	mov.w	r2, #10
 800767e:	4641      	mov	r1, r8
 8007680:	4620      	mov	r0, r4
 8007682:	d106      	bne.n	8007692 <_dtoa_r+0xb0a>
 8007684:	f000 f8ea 	bl	800785c <__multadd>
 8007688:	4680      	mov	r8, r0
 800768a:	4607      	mov	r7, r0
 800768c:	f109 0901 	add.w	r9, r9, #1
 8007690:	e772      	b.n	8007578 <_dtoa_r+0x9f0>
 8007692:	f000 f8e3 	bl	800785c <__multadd>
 8007696:	4639      	mov	r1, r7
 8007698:	4680      	mov	r8, r0
 800769a:	2300      	movs	r3, #0
 800769c:	220a      	movs	r2, #10
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 f8dc 	bl	800785c <__multadd>
 80076a4:	4607      	mov	r7, r0
 80076a6:	e7f1      	b.n	800768c <_dtoa_r+0xb04>
 80076a8:	9b03      	ldr	r3, [sp, #12]
 80076aa:	9302      	str	r3, [sp, #8]
 80076ac:	9d01      	ldr	r5, [sp, #4]
 80076ae:	ee18 0a10 	vmov	r0, s16
 80076b2:	4631      	mov	r1, r6
 80076b4:	f7ff f9da 	bl	8006a6c <quorem>
 80076b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076bc:	9b01      	ldr	r3, [sp, #4]
 80076be:	f805 ab01 	strb.w	sl, [r5], #1
 80076c2:	1aea      	subs	r2, r5, r3
 80076c4:	9b02      	ldr	r3, [sp, #8]
 80076c6:	4293      	cmp	r3, r2
 80076c8:	dd09      	ble.n	80076de <_dtoa_r+0xb56>
 80076ca:	ee18 1a10 	vmov	r1, s16
 80076ce:	2300      	movs	r3, #0
 80076d0:	220a      	movs	r2, #10
 80076d2:	4620      	mov	r0, r4
 80076d4:	f000 f8c2 	bl	800785c <__multadd>
 80076d8:	ee08 0a10 	vmov	s16, r0
 80076dc:	e7e7      	b.n	80076ae <_dtoa_r+0xb26>
 80076de:	9b02      	ldr	r3, [sp, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	bfc8      	it	gt
 80076e4:	461d      	movgt	r5, r3
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	bfd8      	it	le
 80076ea:	2501      	movle	r5, #1
 80076ec:	441d      	add	r5, r3
 80076ee:	f04f 0800 	mov.w	r8, #0
 80076f2:	ee18 1a10 	vmov	r1, s16
 80076f6:	2201      	movs	r2, #1
 80076f8:	4620      	mov	r0, r4
 80076fa:	f000 fa5f 	bl	8007bbc <__lshift>
 80076fe:	4631      	mov	r1, r6
 8007700:	ee08 0a10 	vmov	s16, r0
 8007704:	f000 faca 	bl	8007c9c <__mcmp>
 8007708:	2800      	cmp	r0, #0
 800770a:	dc91      	bgt.n	8007630 <_dtoa_r+0xaa8>
 800770c:	d102      	bne.n	8007714 <_dtoa_r+0xb8c>
 800770e:	f01a 0f01 	tst.w	sl, #1
 8007712:	d18d      	bne.n	8007630 <_dtoa_r+0xaa8>
 8007714:	462b      	mov	r3, r5
 8007716:	461d      	mov	r5, r3
 8007718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800771c:	2a30      	cmp	r2, #48	; 0x30
 800771e:	d0fa      	beq.n	8007716 <_dtoa_r+0xb8e>
 8007720:	e6d7      	b.n	80074d2 <_dtoa_r+0x94a>
 8007722:	9a01      	ldr	r2, [sp, #4]
 8007724:	429a      	cmp	r2, r3
 8007726:	d184      	bne.n	8007632 <_dtoa_r+0xaaa>
 8007728:	9b00      	ldr	r3, [sp, #0]
 800772a:	3301      	adds	r3, #1
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	2331      	movs	r3, #49	; 0x31
 8007730:	7013      	strb	r3, [r2, #0]
 8007732:	e6ce      	b.n	80074d2 <_dtoa_r+0x94a>
 8007734:	4b09      	ldr	r3, [pc, #36]	; (800775c <_dtoa_r+0xbd4>)
 8007736:	f7ff ba95 	b.w	8006c64 <_dtoa_r+0xdc>
 800773a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800773c:	2b00      	cmp	r3, #0
 800773e:	f47f aa6e 	bne.w	8006c1e <_dtoa_r+0x96>
 8007742:	4b07      	ldr	r3, [pc, #28]	; (8007760 <_dtoa_r+0xbd8>)
 8007744:	f7ff ba8e 	b.w	8006c64 <_dtoa_r+0xdc>
 8007748:	9b02      	ldr	r3, [sp, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	dcae      	bgt.n	80076ac <_dtoa_r+0xb24>
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	2b02      	cmp	r3, #2
 8007752:	f73f aea8 	bgt.w	80074a6 <_dtoa_r+0x91e>
 8007756:	e7a9      	b.n	80076ac <_dtoa_r+0xb24>
 8007758:	08008ccf 	.word	0x08008ccf
 800775c:	08008c2c 	.word	0x08008c2c
 8007760:	08008c50 	.word	0x08008c50

08007764 <_localeconv_r>:
 8007764:	4800      	ldr	r0, [pc, #0]	; (8007768 <_localeconv_r+0x4>)
 8007766:	4770      	bx	lr
 8007768:	20000160 	.word	0x20000160

0800776c <malloc>:
 800776c:	4b02      	ldr	r3, [pc, #8]	; (8007778 <malloc+0xc>)
 800776e:	4601      	mov	r1, r0
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f000 bc17 	b.w	8007fa4 <_malloc_r>
 8007776:	bf00      	nop
 8007778:	2000000c 	.word	0x2000000c

0800777c <memcpy>:
 800777c:	440a      	add	r2, r1
 800777e:	4291      	cmp	r1, r2
 8007780:	f100 33ff 	add.w	r3, r0, #4294967295
 8007784:	d100      	bne.n	8007788 <memcpy+0xc>
 8007786:	4770      	bx	lr
 8007788:	b510      	push	{r4, lr}
 800778a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007792:	4291      	cmp	r1, r2
 8007794:	d1f9      	bne.n	800778a <memcpy+0xe>
 8007796:	bd10      	pop	{r4, pc}

08007798 <_Balloc>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800779c:	4604      	mov	r4, r0
 800779e:	460d      	mov	r5, r1
 80077a0:	b976      	cbnz	r6, 80077c0 <_Balloc+0x28>
 80077a2:	2010      	movs	r0, #16
 80077a4:	f7ff ffe2 	bl	800776c <malloc>
 80077a8:	4602      	mov	r2, r0
 80077aa:	6260      	str	r0, [r4, #36]	; 0x24
 80077ac:	b920      	cbnz	r0, 80077b8 <_Balloc+0x20>
 80077ae:	4b18      	ldr	r3, [pc, #96]	; (8007810 <_Balloc+0x78>)
 80077b0:	4818      	ldr	r0, [pc, #96]	; (8007814 <_Balloc+0x7c>)
 80077b2:	2166      	movs	r1, #102	; 0x66
 80077b4:	f000 fc7a 	bl	80080ac <__assert_func>
 80077b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077bc:	6006      	str	r6, [r0, #0]
 80077be:	60c6      	str	r6, [r0, #12]
 80077c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077c2:	68f3      	ldr	r3, [r6, #12]
 80077c4:	b183      	cbz	r3, 80077e8 <_Balloc+0x50>
 80077c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077ce:	b9b8      	cbnz	r0, 8007800 <_Balloc+0x68>
 80077d0:	2101      	movs	r1, #1
 80077d2:	fa01 f605 	lsl.w	r6, r1, r5
 80077d6:	1d72      	adds	r2, r6, #5
 80077d8:	0092      	lsls	r2, r2, #2
 80077da:	4620      	mov	r0, r4
 80077dc:	f000 fb60 	bl	8007ea0 <_calloc_r>
 80077e0:	b160      	cbz	r0, 80077fc <_Balloc+0x64>
 80077e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077e6:	e00e      	b.n	8007806 <_Balloc+0x6e>
 80077e8:	2221      	movs	r2, #33	; 0x21
 80077ea:	2104      	movs	r1, #4
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 fb57 	bl	8007ea0 <_calloc_r>
 80077f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077f4:	60f0      	str	r0, [r6, #12]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e4      	bne.n	80077c6 <_Balloc+0x2e>
 80077fc:	2000      	movs	r0, #0
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	6802      	ldr	r2, [r0, #0]
 8007802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007806:	2300      	movs	r3, #0
 8007808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800780c:	e7f7      	b.n	80077fe <_Balloc+0x66>
 800780e:	bf00      	nop
 8007810:	08008c5d 	.word	0x08008c5d
 8007814:	08008ce0 	.word	0x08008ce0

08007818 <_Bfree>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800781c:	4605      	mov	r5, r0
 800781e:	460c      	mov	r4, r1
 8007820:	b976      	cbnz	r6, 8007840 <_Bfree+0x28>
 8007822:	2010      	movs	r0, #16
 8007824:	f7ff ffa2 	bl	800776c <malloc>
 8007828:	4602      	mov	r2, r0
 800782a:	6268      	str	r0, [r5, #36]	; 0x24
 800782c:	b920      	cbnz	r0, 8007838 <_Bfree+0x20>
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <_Bfree+0x3c>)
 8007830:	4809      	ldr	r0, [pc, #36]	; (8007858 <_Bfree+0x40>)
 8007832:	218a      	movs	r1, #138	; 0x8a
 8007834:	f000 fc3a 	bl	80080ac <__assert_func>
 8007838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800783c:	6006      	str	r6, [r0, #0]
 800783e:	60c6      	str	r6, [r0, #12]
 8007840:	b13c      	cbz	r4, 8007852 <_Bfree+0x3a>
 8007842:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007844:	6862      	ldr	r2, [r4, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800784c:	6021      	str	r1, [r4, #0]
 800784e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	08008c5d 	.word	0x08008c5d
 8007858:	08008ce0 	.word	0x08008ce0

0800785c <__multadd>:
 800785c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007860:	690d      	ldr	r5, [r1, #16]
 8007862:	4607      	mov	r7, r0
 8007864:	460c      	mov	r4, r1
 8007866:	461e      	mov	r6, r3
 8007868:	f101 0c14 	add.w	ip, r1, #20
 800786c:	2000      	movs	r0, #0
 800786e:	f8dc 3000 	ldr.w	r3, [ip]
 8007872:	b299      	uxth	r1, r3
 8007874:	fb02 6101 	mla	r1, r2, r1, r6
 8007878:	0c1e      	lsrs	r6, r3, #16
 800787a:	0c0b      	lsrs	r3, r1, #16
 800787c:	fb02 3306 	mla	r3, r2, r6, r3
 8007880:	b289      	uxth	r1, r1
 8007882:	3001      	adds	r0, #1
 8007884:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007888:	4285      	cmp	r5, r0
 800788a:	f84c 1b04 	str.w	r1, [ip], #4
 800788e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007892:	dcec      	bgt.n	800786e <__multadd+0x12>
 8007894:	b30e      	cbz	r6, 80078da <__multadd+0x7e>
 8007896:	68a3      	ldr	r3, [r4, #8]
 8007898:	42ab      	cmp	r3, r5
 800789a:	dc19      	bgt.n	80078d0 <__multadd+0x74>
 800789c:	6861      	ldr	r1, [r4, #4]
 800789e:	4638      	mov	r0, r7
 80078a0:	3101      	adds	r1, #1
 80078a2:	f7ff ff79 	bl	8007798 <_Balloc>
 80078a6:	4680      	mov	r8, r0
 80078a8:	b928      	cbnz	r0, 80078b6 <__multadd+0x5a>
 80078aa:	4602      	mov	r2, r0
 80078ac:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <__multadd+0x84>)
 80078ae:	480d      	ldr	r0, [pc, #52]	; (80078e4 <__multadd+0x88>)
 80078b0:	21b5      	movs	r1, #181	; 0xb5
 80078b2:	f000 fbfb 	bl	80080ac <__assert_func>
 80078b6:	6922      	ldr	r2, [r4, #16]
 80078b8:	3202      	adds	r2, #2
 80078ba:	f104 010c 	add.w	r1, r4, #12
 80078be:	0092      	lsls	r2, r2, #2
 80078c0:	300c      	adds	r0, #12
 80078c2:	f7ff ff5b 	bl	800777c <memcpy>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4638      	mov	r0, r7
 80078ca:	f7ff ffa5 	bl	8007818 <_Bfree>
 80078ce:	4644      	mov	r4, r8
 80078d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078d4:	3501      	adds	r5, #1
 80078d6:	615e      	str	r6, [r3, #20]
 80078d8:	6125      	str	r5, [r4, #16]
 80078da:	4620      	mov	r0, r4
 80078dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e0:	08008ccf 	.word	0x08008ccf
 80078e4:	08008ce0 	.word	0x08008ce0

080078e8 <__hi0bits>:
 80078e8:	0c03      	lsrs	r3, r0, #16
 80078ea:	041b      	lsls	r3, r3, #16
 80078ec:	b9d3      	cbnz	r3, 8007924 <__hi0bits+0x3c>
 80078ee:	0400      	lsls	r0, r0, #16
 80078f0:	2310      	movs	r3, #16
 80078f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078f6:	bf04      	itt	eq
 80078f8:	0200      	lsleq	r0, r0, #8
 80078fa:	3308      	addeq	r3, #8
 80078fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007900:	bf04      	itt	eq
 8007902:	0100      	lsleq	r0, r0, #4
 8007904:	3304      	addeq	r3, #4
 8007906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800790a:	bf04      	itt	eq
 800790c:	0080      	lsleq	r0, r0, #2
 800790e:	3302      	addeq	r3, #2
 8007910:	2800      	cmp	r0, #0
 8007912:	db05      	blt.n	8007920 <__hi0bits+0x38>
 8007914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007918:	f103 0301 	add.w	r3, r3, #1
 800791c:	bf08      	it	eq
 800791e:	2320      	moveq	r3, #32
 8007920:	4618      	mov	r0, r3
 8007922:	4770      	bx	lr
 8007924:	2300      	movs	r3, #0
 8007926:	e7e4      	b.n	80078f2 <__hi0bits+0xa>

08007928 <__lo0bits>:
 8007928:	6803      	ldr	r3, [r0, #0]
 800792a:	f013 0207 	ands.w	r2, r3, #7
 800792e:	4601      	mov	r1, r0
 8007930:	d00b      	beq.n	800794a <__lo0bits+0x22>
 8007932:	07da      	lsls	r2, r3, #31
 8007934:	d423      	bmi.n	800797e <__lo0bits+0x56>
 8007936:	0798      	lsls	r0, r3, #30
 8007938:	bf49      	itett	mi
 800793a:	085b      	lsrmi	r3, r3, #1
 800793c:	089b      	lsrpl	r3, r3, #2
 800793e:	2001      	movmi	r0, #1
 8007940:	600b      	strmi	r3, [r1, #0]
 8007942:	bf5c      	itt	pl
 8007944:	600b      	strpl	r3, [r1, #0]
 8007946:	2002      	movpl	r0, #2
 8007948:	4770      	bx	lr
 800794a:	b298      	uxth	r0, r3
 800794c:	b9a8      	cbnz	r0, 800797a <__lo0bits+0x52>
 800794e:	0c1b      	lsrs	r3, r3, #16
 8007950:	2010      	movs	r0, #16
 8007952:	b2da      	uxtb	r2, r3
 8007954:	b90a      	cbnz	r2, 800795a <__lo0bits+0x32>
 8007956:	3008      	adds	r0, #8
 8007958:	0a1b      	lsrs	r3, r3, #8
 800795a:	071a      	lsls	r2, r3, #28
 800795c:	bf04      	itt	eq
 800795e:	091b      	lsreq	r3, r3, #4
 8007960:	3004      	addeq	r0, #4
 8007962:	079a      	lsls	r2, r3, #30
 8007964:	bf04      	itt	eq
 8007966:	089b      	lsreq	r3, r3, #2
 8007968:	3002      	addeq	r0, #2
 800796a:	07da      	lsls	r2, r3, #31
 800796c:	d403      	bmi.n	8007976 <__lo0bits+0x4e>
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	f100 0001 	add.w	r0, r0, #1
 8007974:	d005      	beq.n	8007982 <__lo0bits+0x5a>
 8007976:	600b      	str	r3, [r1, #0]
 8007978:	4770      	bx	lr
 800797a:	4610      	mov	r0, r2
 800797c:	e7e9      	b.n	8007952 <__lo0bits+0x2a>
 800797e:	2000      	movs	r0, #0
 8007980:	4770      	bx	lr
 8007982:	2020      	movs	r0, #32
 8007984:	4770      	bx	lr
	...

08007988 <__i2b>:
 8007988:	b510      	push	{r4, lr}
 800798a:	460c      	mov	r4, r1
 800798c:	2101      	movs	r1, #1
 800798e:	f7ff ff03 	bl	8007798 <_Balloc>
 8007992:	4602      	mov	r2, r0
 8007994:	b928      	cbnz	r0, 80079a2 <__i2b+0x1a>
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <__i2b+0x24>)
 8007998:	4805      	ldr	r0, [pc, #20]	; (80079b0 <__i2b+0x28>)
 800799a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800799e:	f000 fb85 	bl	80080ac <__assert_func>
 80079a2:	2301      	movs	r3, #1
 80079a4:	6144      	str	r4, [r0, #20]
 80079a6:	6103      	str	r3, [r0, #16]
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	bf00      	nop
 80079ac:	08008ccf 	.word	0x08008ccf
 80079b0:	08008ce0 	.word	0x08008ce0

080079b4 <__multiply>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	4691      	mov	r9, r2
 80079ba:	690a      	ldr	r2, [r1, #16]
 80079bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	bfb8      	it	lt
 80079c4:	460b      	movlt	r3, r1
 80079c6:	460c      	mov	r4, r1
 80079c8:	bfbc      	itt	lt
 80079ca:	464c      	movlt	r4, r9
 80079cc:	4699      	movlt	r9, r3
 80079ce:	6927      	ldr	r7, [r4, #16]
 80079d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079d4:	68a3      	ldr	r3, [r4, #8]
 80079d6:	6861      	ldr	r1, [r4, #4]
 80079d8:	eb07 060a 	add.w	r6, r7, sl
 80079dc:	42b3      	cmp	r3, r6
 80079de:	b085      	sub	sp, #20
 80079e0:	bfb8      	it	lt
 80079e2:	3101      	addlt	r1, #1
 80079e4:	f7ff fed8 	bl	8007798 <_Balloc>
 80079e8:	b930      	cbnz	r0, 80079f8 <__multiply+0x44>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4b44      	ldr	r3, [pc, #272]	; (8007b00 <__multiply+0x14c>)
 80079ee:	4845      	ldr	r0, [pc, #276]	; (8007b04 <__multiply+0x150>)
 80079f0:	f240 115d 	movw	r1, #349	; 0x15d
 80079f4:	f000 fb5a 	bl	80080ac <__assert_func>
 80079f8:	f100 0514 	add.w	r5, r0, #20
 80079fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a00:	462b      	mov	r3, r5
 8007a02:	2200      	movs	r2, #0
 8007a04:	4543      	cmp	r3, r8
 8007a06:	d321      	bcc.n	8007a4c <__multiply+0x98>
 8007a08:	f104 0314 	add.w	r3, r4, #20
 8007a0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a10:	f109 0314 	add.w	r3, r9, #20
 8007a14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a18:	9202      	str	r2, [sp, #8]
 8007a1a:	1b3a      	subs	r2, r7, r4
 8007a1c:	3a15      	subs	r2, #21
 8007a1e:	f022 0203 	bic.w	r2, r2, #3
 8007a22:	3204      	adds	r2, #4
 8007a24:	f104 0115 	add.w	r1, r4, #21
 8007a28:	428f      	cmp	r7, r1
 8007a2a:	bf38      	it	cc
 8007a2c:	2204      	movcc	r2, #4
 8007a2e:	9201      	str	r2, [sp, #4]
 8007a30:	9a02      	ldr	r2, [sp, #8]
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d80c      	bhi.n	8007a52 <__multiply+0x9e>
 8007a38:	2e00      	cmp	r6, #0
 8007a3a:	dd03      	ble.n	8007a44 <__multiply+0x90>
 8007a3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d05a      	beq.n	8007afa <__multiply+0x146>
 8007a44:	6106      	str	r6, [r0, #16]
 8007a46:	b005      	add	sp, #20
 8007a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4c:	f843 2b04 	str.w	r2, [r3], #4
 8007a50:	e7d8      	b.n	8007a04 <__multiply+0x50>
 8007a52:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a56:	f1ba 0f00 	cmp.w	sl, #0
 8007a5a:	d024      	beq.n	8007aa6 <__multiply+0xf2>
 8007a5c:	f104 0e14 	add.w	lr, r4, #20
 8007a60:	46a9      	mov	r9, r5
 8007a62:	f04f 0c00 	mov.w	ip, #0
 8007a66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a6a:	f8d9 1000 	ldr.w	r1, [r9]
 8007a6e:	fa1f fb82 	uxth.w	fp, r2
 8007a72:	b289      	uxth	r1, r1
 8007a74:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a7c:	f8d9 2000 	ldr.w	r2, [r9]
 8007a80:	4461      	add	r1, ip
 8007a82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a86:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a8e:	b289      	uxth	r1, r1
 8007a90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a94:	4577      	cmp	r7, lr
 8007a96:	f849 1b04 	str.w	r1, [r9], #4
 8007a9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a9e:	d8e2      	bhi.n	8007a66 <__multiply+0xb2>
 8007aa0:	9a01      	ldr	r2, [sp, #4]
 8007aa2:	f845 c002 	str.w	ip, [r5, r2]
 8007aa6:	9a03      	ldr	r2, [sp, #12]
 8007aa8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007aac:	3304      	adds	r3, #4
 8007aae:	f1b9 0f00 	cmp.w	r9, #0
 8007ab2:	d020      	beq.n	8007af6 <__multiply+0x142>
 8007ab4:	6829      	ldr	r1, [r5, #0]
 8007ab6:	f104 0c14 	add.w	ip, r4, #20
 8007aba:	46ae      	mov	lr, r5
 8007abc:	f04f 0a00 	mov.w	sl, #0
 8007ac0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ac4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ac8:	fb09 220b 	mla	r2, r9, fp, r2
 8007acc:	4492      	add	sl, r2
 8007ace:	b289      	uxth	r1, r1
 8007ad0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ad4:	f84e 1b04 	str.w	r1, [lr], #4
 8007ad8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007adc:	f8be 1000 	ldrh.w	r1, [lr]
 8007ae0:	0c12      	lsrs	r2, r2, #16
 8007ae2:	fb09 1102 	mla	r1, r9, r2, r1
 8007ae6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007aea:	4567      	cmp	r7, ip
 8007aec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007af0:	d8e6      	bhi.n	8007ac0 <__multiply+0x10c>
 8007af2:	9a01      	ldr	r2, [sp, #4]
 8007af4:	50a9      	str	r1, [r5, r2]
 8007af6:	3504      	adds	r5, #4
 8007af8:	e79a      	b.n	8007a30 <__multiply+0x7c>
 8007afa:	3e01      	subs	r6, #1
 8007afc:	e79c      	b.n	8007a38 <__multiply+0x84>
 8007afe:	bf00      	nop
 8007b00:	08008ccf 	.word	0x08008ccf
 8007b04:	08008ce0 	.word	0x08008ce0

08007b08 <__pow5mult>:
 8007b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b0c:	4615      	mov	r5, r2
 8007b0e:	f012 0203 	ands.w	r2, r2, #3
 8007b12:	4606      	mov	r6, r0
 8007b14:	460f      	mov	r7, r1
 8007b16:	d007      	beq.n	8007b28 <__pow5mult+0x20>
 8007b18:	4c25      	ldr	r4, [pc, #148]	; (8007bb0 <__pow5mult+0xa8>)
 8007b1a:	3a01      	subs	r2, #1
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b22:	f7ff fe9b 	bl	800785c <__multadd>
 8007b26:	4607      	mov	r7, r0
 8007b28:	10ad      	asrs	r5, r5, #2
 8007b2a:	d03d      	beq.n	8007ba8 <__pow5mult+0xa0>
 8007b2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b2e:	b97c      	cbnz	r4, 8007b50 <__pow5mult+0x48>
 8007b30:	2010      	movs	r0, #16
 8007b32:	f7ff fe1b 	bl	800776c <malloc>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6270      	str	r0, [r6, #36]	; 0x24
 8007b3a:	b928      	cbnz	r0, 8007b48 <__pow5mult+0x40>
 8007b3c:	4b1d      	ldr	r3, [pc, #116]	; (8007bb4 <__pow5mult+0xac>)
 8007b3e:	481e      	ldr	r0, [pc, #120]	; (8007bb8 <__pow5mult+0xb0>)
 8007b40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b44:	f000 fab2 	bl	80080ac <__assert_func>
 8007b48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b4c:	6004      	str	r4, [r0, #0]
 8007b4e:	60c4      	str	r4, [r0, #12]
 8007b50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b58:	b94c      	cbnz	r4, 8007b6e <__pow5mult+0x66>
 8007b5a:	f240 2171 	movw	r1, #625	; 0x271
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7ff ff12 	bl	8007988 <__i2b>
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	6003      	str	r3, [r0, #0]
 8007b6e:	f04f 0900 	mov.w	r9, #0
 8007b72:	07eb      	lsls	r3, r5, #31
 8007b74:	d50a      	bpl.n	8007b8c <__pow5mult+0x84>
 8007b76:	4639      	mov	r1, r7
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff ff1a 	bl	80079b4 <__multiply>
 8007b80:	4639      	mov	r1, r7
 8007b82:	4680      	mov	r8, r0
 8007b84:	4630      	mov	r0, r6
 8007b86:	f7ff fe47 	bl	8007818 <_Bfree>
 8007b8a:	4647      	mov	r7, r8
 8007b8c:	106d      	asrs	r5, r5, #1
 8007b8e:	d00b      	beq.n	8007ba8 <__pow5mult+0xa0>
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	b938      	cbnz	r0, 8007ba4 <__pow5mult+0x9c>
 8007b94:	4622      	mov	r2, r4
 8007b96:	4621      	mov	r1, r4
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff ff0b 	bl	80079b4 <__multiply>
 8007b9e:	6020      	str	r0, [r4, #0]
 8007ba0:	f8c0 9000 	str.w	r9, [r0]
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	e7e4      	b.n	8007b72 <__pow5mult+0x6a>
 8007ba8:	4638      	mov	r0, r7
 8007baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bae:	bf00      	nop
 8007bb0:	08008e30 	.word	0x08008e30
 8007bb4:	08008c5d 	.word	0x08008c5d
 8007bb8:	08008ce0 	.word	0x08008ce0

08007bbc <__lshift>:
 8007bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	6849      	ldr	r1, [r1, #4]
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	4607      	mov	r7, r0
 8007bce:	4691      	mov	r9, r2
 8007bd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bd4:	f108 0601 	add.w	r6, r8, #1
 8007bd8:	42b3      	cmp	r3, r6
 8007bda:	db0b      	blt.n	8007bf4 <__lshift+0x38>
 8007bdc:	4638      	mov	r0, r7
 8007bde:	f7ff fddb 	bl	8007798 <_Balloc>
 8007be2:	4605      	mov	r5, r0
 8007be4:	b948      	cbnz	r0, 8007bfa <__lshift+0x3e>
 8007be6:	4602      	mov	r2, r0
 8007be8:	4b2a      	ldr	r3, [pc, #168]	; (8007c94 <__lshift+0xd8>)
 8007bea:	482b      	ldr	r0, [pc, #172]	; (8007c98 <__lshift+0xdc>)
 8007bec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bf0:	f000 fa5c 	bl	80080ac <__assert_func>
 8007bf4:	3101      	adds	r1, #1
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	e7ee      	b.n	8007bd8 <__lshift+0x1c>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f100 0114 	add.w	r1, r0, #20
 8007c00:	f100 0210 	add.w	r2, r0, #16
 8007c04:	4618      	mov	r0, r3
 8007c06:	4553      	cmp	r3, sl
 8007c08:	db37      	blt.n	8007c7a <__lshift+0xbe>
 8007c0a:	6920      	ldr	r0, [r4, #16]
 8007c0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c10:	f104 0314 	add.w	r3, r4, #20
 8007c14:	f019 091f 	ands.w	r9, r9, #31
 8007c18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c20:	d02f      	beq.n	8007c82 <__lshift+0xc6>
 8007c22:	f1c9 0e20 	rsb	lr, r9, #32
 8007c26:	468a      	mov	sl, r1
 8007c28:	f04f 0c00 	mov.w	ip, #0
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	fa02 f209 	lsl.w	r2, r2, r9
 8007c32:	ea42 020c 	orr.w	r2, r2, ip
 8007c36:	f84a 2b04 	str.w	r2, [sl], #4
 8007c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3e:	4298      	cmp	r0, r3
 8007c40:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c44:	d8f2      	bhi.n	8007c2c <__lshift+0x70>
 8007c46:	1b03      	subs	r3, r0, r4
 8007c48:	3b15      	subs	r3, #21
 8007c4a:	f023 0303 	bic.w	r3, r3, #3
 8007c4e:	3304      	adds	r3, #4
 8007c50:	f104 0215 	add.w	r2, r4, #21
 8007c54:	4290      	cmp	r0, r2
 8007c56:	bf38      	it	cc
 8007c58:	2304      	movcc	r3, #4
 8007c5a:	f841 c003 	str.w	ip, [r1, r3]
 8007c5e:	f1bc 0f00 	cmp.w	ip, #0
 8007c62:	d001      	beq.n	8007c68 <__lshift+0xac>
 8007c64:	f108 0602 	add.w	r6, r8, #2
 8007c68:	3e01      	subs	r6, #1
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	612e      	str	r6, [r5, #16]
 8007c6e:	4621      	mov	r1, r4
 8007c70:	f7ff fdd2 	bl	8007818 <_Bfree>
 8007c74:	4628      	mov	r0, r5
 8007c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c7e:	3301      	adds	r3, #1
 8007c80:	e7c1      	b.n	8007c06 <__lshift+0x4a>
 8007c82:	3904      	subs	r1, #4
 8007c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c88:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c8c:	4298      	cmp	r0, r3
 8007c8e:	d8f9      	bhi.n	8007c84 <__lshift+0xc8>
 8007c90:	e7ea      	b.n	8007c68 <__lshift+0xac>
 8007c92:	bf00      	nop
 8007c94:	08008ccf 	.word	0x08008ccf
 8007c98:	08008ce0 	.word	0x08008ce0

08007c9c <__mcmp>:
 8007c9c:	b530      	push	{r4, r5, lr}
 8007c9e:	6902      	ldr	r2, [r0, #16]
 8007ca0:	690c      	ldr	r4, [r1, #16]
 8007ca2:	1b12      	subs	r2, r2, r4
 8007ca4:	d10e      	bne.n	8007cc4 <__mcmp+0x28>
 8007ca6:	f100 0314 	add.w	r3, r0, #20
 8007caa:	3114      	adds	r1, #20
 8007cac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007cb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007cb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007cb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007cbc:	42a5      	cmp	r5, r4
 8007cbe:	d003      	beq.n	8007cc8 <__mcmp+0x2c>
 8007cc0:	d305      	bcc.n	8007cce <__mcmp+0x32>
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	bd30      	pop	{r4, r5, pc}
 8007cc8:	4283      	cmp	r3, r0
 8007cca:	d3f3      	bcc.n	8007cb4 <__mcmp+0x18>
 8007ccc:	e7fa      	b.n	8007cc4 <__mcmp+0x28>
 8007cce:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd2:	e7f7      	b.n	8007cc4 <__mcmp+0x28>

08007cd4 <__mdiff>:
 8007cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd8:	460c      	mov	r4, r1
 8007cda:	4606      	mov	r6, r0
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4690      	mov	r8, r2
 8007ce2:	f7ff ffdb 	bl	8007c9c <__mcmp>
 8007ce6:	1e05      	subs	r5, r0, #0
 8007ce8:	d110      	bne.n	8007d0c <__mdiff+0x38>
 8007cea:	4629      	mov	r1, r5
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7ff fd53 	bl	8007798 <_Balloc>
 8007cf2:	b930      	cbnz	r0, 8007d02 <__mdiff+0x2e>
 8007cf4:	4b3a      	ldr	r3, [pc, #232]	; (8007de0 <__mdiff+0x10c>)
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	f240 2132 	movw	r1, #562	; 0x232
 8007cfc:	4839      	ldr	r0, [pc, #228]	; (8007de4 <__mdiff+0x110>)
 8007cfe:	f000 f9d5 	bl	80080ac <__assert_func>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0c:	bfa4      	itt	ge
 8007d0e:	4643      	movge	r3, r8
 8007d10:	46a0      	movge	r8, r4
 8007d12:	4630      	mov	r0, r6
 8007d14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d18:	bfa6      	itte	ge
 8007d1a:	461c      	movge	r4, r3
 8007d1c:	2500      	movge	r5, #0
 8007d1e:	2501      	movlt	r5, #1
 8007d20:	f7ff fd3a 	bl	8007798 <_Balloc>
 8007d24:	b920      	cbnz	r0, 8007d30 <__mdiff+0x5c>
 8007d26:	4b2e      	ldr	r3, [pc, #184]	; (8007de0 <__mdiff+0x10c>)
 8007d28:	4602      	mov	r2, r0
 8007d2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d2e:	e7e5      	b.n	8007cfc <__mdiff+0x28>
 8007d30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d34:	6926      	ldr	r6, [r4, #16]
 8007d36:	60c5      	str	r5, [r0, #12]
 8007d38:	f104 0914 	add.w	r9, r4, #20
 8007d3c:	f108 0514 	add.w	r5, r8, #20
 8007d40:	f100 0e14 	add.w	lr, r0, #20
 8007d44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d4c:	f108 0210 	add.w	r2, r8, #16
 8007d50:	46f2      	mov	sl, lr
 8007d52:	2100      	movs	r1, #0
 8007d54:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d5c:	fa1f f883 	uxth.w	r8, r3
 8007d60:	fa11 f18b 	uxtah	r1, r1, fp
 8007d64:	0c1b      	lsrs	r3, r3, #16
 8007d66:	eba1 0808 	sub.w	r8, r1, r8
 8007d6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d72:	fa1f f888 	uxth.w	r8, r8
 8007d76:	1419      	asrs	r1, r3, #16
 8007d78:	454e      	cmp	r6, r9
 8007d7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d7e:	f84a 3b04 	str.w	r3, [sl], #4
 8007d82:	d8e7      	bhi.n	8007d54 <__mdiff+0x80>
 8007d84:	1b33      	subs	r3, r6, r4
 8007d86:	3b15      	subs	r3, #21
 8007d88:	f023 0303 	bic.w	r3, r3, #3
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	3415      	adds	r4, #21
 8007d90:	42a6      	cmp	r6, r4
 8007d92:	bf38      	it	cc
 8007d94:	2304      	movcc	r3, #4
 8007d96:	441d      	add	r5, r3
 8007d98:	4473      	add	r3, lr
 8007d9a:	469e      	mov	lr, r3
 8007d9c:	462e      	mov	r6, r5
 8007d9e:	4566      	cmp	r6, ip
 8007da0:	d30e      	bcc.n	8007dc0 <__mdiff+0xec>
 8007da2:	f10c 0203 	add.w	r2, ip, #3
 8007da6:	1b52      	subs	r2, r2, r5
 8007da8:	f022 0203 	bic.w	r2, r2, #3
 8007dac:	3d03      	subs	r5, #3
 8007dae:	45ac      	cmp	ip, r5
 8007db0:	bf38      	it	cc
 8007db2:	2200      	movcc	r2, #0
 8007db4:	441a      	add	r2, r3
 8007db6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007dba:	b17b      	cbz	r3, 8007ddc <__mdiff+0x108>
 8007dbc:	6107      	str	r7, [r0, #16]
 8007dbe:	e7a3      	b.n	8007d08 <__mdiff+0x34>
 8007dc0:	f856 8b04 	ldr.w	r8, [r6], #4
 8007dc4:	fa11 f288 	uxtah	r2, r1, r8
 8007dc8:	1414      	asrs	r4, r2, #16
 8007dca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007dce:	b292      	uxth	r2, r2
 8007dd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007dd4:	f84e 2b04 	str.w	r2, [lr], #4
 8007dd8:	1421      	asrs	r1, r4, #16
 8007dda:	e7e0      	b.n	8007d9e <__mdiff+0xca>
 8007ddc:	3f01      	subs	r7, #1
 8007dde:	e7ea      	b.n	8007db6 <__mdiff+0xe2>
 8007de0:	08008ccf 	.word	0x08008ccf
 8007de4:	08008ce0 	.word	0x08008ce0

08007de8 <__d2b>:
 8007de8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dec:	4689      	mov	r9, r1
 8007dee:	2101      	movs	r1, #1
 8007df0:	ec57 6b10 	vmov	r6, r7, d0
 8007df4:	4690      	mov	r8, r2
 8007df6:	f7ff fccf 	bl	8007798 <_Balloc>
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	b930      	cbnz	r0, 8007e0c <__d2b+0x24>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <__d2b+0xb0>)
 8007e02:	4826      	ldr	r0, [pc, #152]	; (8007e9c <__d2b+0xb4>)
 8007e04:	f240 310a 	movw	r1, #778	; 0x30a
 8007e08:	f000 f950 	bl	80080ac <__assert_func>
 8007e0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007e10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e14:	bb35      	cbnz	r5, 8007e64 <__d2b+0x7c>
 8007e16:	2e00      	cmp	r6, #0
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	d028      	beq.n	8007e6e <__d2b+0x86>
 8007e1c:	4668      	mov	r0, sp
 8007e1e:	9600      	str	r6, [sp, #0]
 8007e20:	f7ff fd82 	bl	8007928 <__lo0bits>
 8007e24:	9900      	ldr	r1, [sp, #0]
 8007e26:	b300      	cbz	r0, 8007e6a <__d2b+0x82>
 8007e28:	9a01      	ldr	r2, [sp, #4]
 8007e2a:	f1c0 0320 	rsb	r3, r0, #32
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	430b      	orrs	r3, r1
 8007e34:	40c2      	lsrs	r2, r0
 8007e36:	6163      	str	r3, [r4, #20]
 8007e38:	9201      	str	r2, [sp, #4]
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	61a3      	str	r3, [r4, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bf14      	ite	ne
 8007e42:	2202      	movne	r2, #2
 8007e44:	2201      	moveq	r2, #1
 8007e46:	6122      	str	r2, [r4, #16]
 8007e48:	b1d5      	cbz	r5, 8007e80 <__d2b+0x98>
 8007e4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e4e:	4405      	add	r5, r0
 8007e50:	f8c9 5000 	str.w	r5, [r9]
 8007e54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e58:	f8c8 0000 	str.w	r0, [r8]
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	b003      	add	sp, #12
 8007e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e68:	e7d5      	b.n	8007e16 <__d2b+0x2e>
 8007e6a:	6161      	str	r1, [r4, #20]
 8007e6c:	e7e5      	b.n	8007e3a <__d2b+0x52>
 8007e6e:	a801      	add	r0, sp, #4
 8007e70:	f7ff fd5a 	bl	8007928 <__lo0bits>
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	6163      	str	r3, [r4, #20]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	6122      	str	r2, [r4, #16]
 8007e7c:	3020      	adds	r0, #32
 8007e7e:	e7e3      	b.n	8007e48 <__d2b+0x60>
 8007e80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e88:	f8c9 0000 	str.w	r0, [r9]
 8007e8c:	6918      	ldr	r0, [r3, #16]
 8007e8e:	f7ff fd2b 	bl	80078e8 <__hi0bits>
 8007e92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e96:	e7df      	b.n	8007e58 <__d2b+0x70>
 8007e98:	08008ccf 	.word	0x08008ccf
 8007e9c:	08008ce0 	.word	0x08008ce0

08007ea0 <_calloc_r>:
 8007ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ea2:	fba1 2402 	umull	r2, r4, r1, r2
 8007ea6:	b94c      	cbnz	r4, 8007ebc <_calloc_r+0x1c>
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	9201      	str	r2, [sp, #4]
 8007eac:	f000 f87a 	bl	8007fa4 <_malloc_r>
 8007eb0:	9a01      	ldr	r2, [sp, #4]
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	b930      	cbnz	r0, 8007ec4 <_calloc_r+0x24>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	b003      	add	sp, #12
 8007eba:	bd30      	pop	{r4, r5, pc}
 8007ebc:	220c      	movs	r2, #12
 8007ebe:	6002      	str	r2, [r0, #0]
 8007ec0:	2500      	movs	r5, #0
 8007ec2:	e7f8      	b.n	8007eb6 <_calloc_r+0x16>
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	f7fe f95f 	bl	8006188 <memset>
 8007eca:	e7f4      	b.n	8007eb6 <_calloc_r+0x16>

08007ecc <_free_r>:
 8007ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ece:	2900      	cmp	r1, #0
 8007ed0:	d044      	beq.n	8007f5c <_free_r+0x90>
 8007ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ed6:	9001      	str	r0, [sp, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f1a1 0404 	sub.w	r4, r1, #4
 8007ede:	bfb8      	it	lt
 8007ee0:	18e4      	addlt	r4, r4, r3
 8007ee2:	f000 f925 	bl	8008130 <__malloc_lock>
 8007ee6:	4a1e      	ldr	r2, [pc, #120]	; (8007f60 <_free_r+0x94>)
 8007ee8:	9801      	ldr	r0, [sp, #4]
 8007eea:	6813      	ldr	r3, [r2, #0]
 8007eec:	b933      	cbnz	r3, 8007efc <_free_r+0x30>
 8007eee:	6063      	str	r3, [r4, #4]
 8007ef0:	6014      	str	r4, [r2, #0]
 8007ef2:	b003      	add	sp, #12
 8007ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ef8:	f000 b920 	b.w	800813c <__malloc_unlock>
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	d908      	bls.n	8007f12 <_free_r+0x46>
 8007f00:	6825      	ldr	r5, [r4, #0]
 8007f02:	1961      	adds	r1, r4, r5
 8007f04:	428b      	cmp	r3, r1
 8007f06:	bf01      	itttt	eq
 8007f08:	6819      	ldreq	r1, [r3, #0]
 8007f0a:	685b      	ldreq	r3, [r3, #4]
 8007f0c:	1949      	addeq	r1, r1, r5
 8007f0e:	6021      	streq	r1, [r4, #0]
 8007f10:	e7ed      	b.n	8007eee <_free_r+0x22>
 8007f12:	461a      	mov	r2, r3
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	b10b      	cbz	r3, 8007f1c <_free_r+0x50>
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	d9fa      	bls.n	8007f12 <_free_r+0x46>
 8007f1c:	6811      	ldr	r1, [r2, #0]
 8007f1e:	1855      	adds	r5, r2, r1
 8007f20:	42a5      	cmp	r5, r4
 8007f22:	d10b      	bne.n	8007f3c <_free_r+0x70>
 8007f24:	6824      	ldr	r4, [r4, #0]
 8007f26:	4421      	add	r1, r4
 8007f28:	1854      	adds	r4, r2, r1
 8007f2a:	42a3      	cmp	r3, r4
 8007f2c:	6011      	str	r1, [r2, #0]
 8007f2e:	d1e0      	bne.n	8007ef2 <_free_r+0x26>
 8007f30:	681c      	ldr	r4, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	6053      	str	r3, [r2, #4]
 8007f36:	4421      	add	r1, r4
 8007f38:	6011      	str	r1, [r2, #0]
 8007f3a:	e7da      	b.n	8007ef2 <_free_r+0x26>
 8007f3c:	d902      	bls.n	8007f44 <_free_r+0x78>
 8007f3e:	230c      	movs	r3, #12
 8007f40:	6003      	str	r3, [r0, #0]
 8007f42:	e7d6      	b.n	8007ef2 <_free_r+0x26>
 8007f44:	6825      	ldr	r5, [r4, #0]
 8007f46:	1961      	adds	r1, r4, r5
 8007f48:	428b      	cmp	r3, r1
 8007f4a:	bf04      	itt	eq
 8007f4c:	6819      	ldreq	r1, [r3, #0]
 8007f4e:	685b      	ldreq	r3, [r3, #4]
 8007f50:	6063      	str	r3, [r4, #4]
 8007f52:	bf04      	itt	eq
 8007f54:	1949      	addeq	r1, r1, r5
 8007f56:	6021      	streq	r1, [r4, #0]
 8007f58:	6054      	str	r4, [r2, #4]
 8007f5a:	e7ca      	b.n	8007ef2 <_free_r+0x26>
 8007f5c:	b003      	add	sp, #12
 8007f5e:	bd30      	pop	{r4, r5, pc}
 8007f60:	20000414 	.word	0x20000414

08007f64 <sbrk_aligned>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	4e0e      	ldr	r6, [pc, #56]	; (8007fa0 <sbrk_aligned+0x3c>)
 8007f68:	460c      	mov	r4, r1
 8007f6a:	6831      	ldr	r1, [r6, #0]
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	b911      	cbnz	r1, 8007f76 <sbrk_aligned+0x12>
 8007f70:	f000 f88c 	bl	800808c <_sbrk_r>
 8007f74:	6030      	str	r0, [r6, #0]
 8007f76:	4621      	mov	r1, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 f887 	bl	800808c <_sbrk_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d00a      	beq.n	8007f98 <sbrk_aligned+0x34>
 8007f82:	1cc4      	adds	r4, r0, #3
 8007f84:	f024 0403 	bic.w	r4, r4, #3
 8007f88:	42a0      	cmp	r0, r4
 8007f8a:	d007      	beq.n	8007f9c <sbrk_aligned+0x38>
 8007f8c:	1a21      	subs	r1, r4, r0
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f000 f87c 	bl	800808c <_sbrk_r>
 8007f94:	3001      	adds	r0, #1
 8007f96:	d101      	bne.n	8007f9c <sbrk_aligned+0x38>
 8007f98:	f04f 34ff 	mov.w	r4, #4294967295
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	20000418 	.word	0x20000418

08007fa4 <_malloc_r>:
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	1ccd      	adds	r5, r1, #3
 8007faa:	f025 0503 	bic.w	r5, r5, #3
 8007fae:	3508      	adds	r5, #8
 8007fb0:	2d0c      	cmp	r5, #12
 8007fb2:	bf38      	it	cc
 8007fb4:	250c      	movcc	r5, #12
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	4607      	mov	r7, r0
 8007fba:	db01      	blt.n	8007fc0 <_malloc_r+0x1c>
 8007fbc:	42a9      	cmp	r1, r5
 8007fbe:	d905      	bls.n	8007fcc <_malloc_r+0x28>
 8007fc0:	230c      	movs	r3, #12
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	2600      	movs	r6, #0
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fcc:	4e2e      	ldr	r6, [pc, #184]	; (8008088 <_malloc_r+0xe4>)
 8007fce:	f000 f8af 	bl	8008130 <__malloc_lock>
 8007fd2:	6833      	ldr	r3, [r6, #0]
 8007fd4:	461c      	mov	r4, r3
 8007fd6:	bb34      	cbnz	r4, 8008026 <_malloc_r+0x82>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f7ff ffc2 	bl	8007f64 <sbrk_aligned>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	d14d      	bne.n	8008082 <_malloc_r+0xde>
 8007fe6:	6834      	ldr	r4, [r6, #0]
 8007fe8:	4626      	mov	r6, r4
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	d140      	bne.n	8008070 <_malloc_r+0xcc>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	eb04 0803 	add.w	r8, r4, r3
 8007ff8:	f000 f848 	bl	800808c <_sbrk_r>
 8007ffc:	4580      	cmp	r8, r0
 8007ffe:	d13a      	bne.n	8008076 <_malloc_r+0xd2>
 8008000:	6821      	ldr	r1, [r4, #0]
 8008002:	3503      	adds	r5, #3
 8008004:	1a6d      	subs	r5, r5, r1
 8008006:	f025 0503 	bic.w	r5, r5, #3
 800800a:	3508      	adds	r5, #8
 800800c:	2d0c      	cmp	r5, #12
 800800e:	bf38      	it	cc
 8008010:	250c      	movcc	r5, #12
 8008012:	4629      	mov	r1, r5
 8008014:	4638      	mov	r0, r7
 8008016:	f7ff ffa5 	bl	8007f64 <sbrk_aligned>
 800801a:	3001      	adds	r0, #1
 800801c:	d02b      	beq.n	8008076 <_malloc_r+0xd2>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	442b      	add	r3, r5
 8008022:	6023      	str	r3, [r4, #0]
 8008024:	e00e      	b.n	8008044 <_malloc_r+0xa0>
 8008026:	6822      	ldr	r2, [r4, #0]
 8008028:	1b52      	subs	r2, r2, r5
 800802a:	d41e      	bmi.n	800806a <_malloc_r+0xc6>
 800802c:	2a0b      	cmp	r2, #11
 800802e:	d916      	bls.n	800805e <_malloc_r+0xba>
 8008030:	1961      	adds	r1, r4, r5
 8008032:	42a3      	cmp	r3, r4
 8008034:	6025      	str	r5, [r4, #0]
 8008036:	bf18      	it	ne
 8008038:	6059      	strne	r1, [r3, #4]
 800803a:	6863      	ldr	r3, [r4, #4]
 800803c:	bf08      	it	eq
 800803e:	6031      	streq	r1, [r6, #0]
 8008040:	5162      	str	r2, [r4, r5]
 8008042:	604b      	str	r3, [r1, #4]
 8008044:	4638      	mov	r0, r7
 8008046:	f104 060b 	add.w	r6, r4, #11
 800804a:	f000 f877 	bl	800813c <__malloc_unlock>
 800804e:	f026 0607 	bic.w	r6, r6, #7
 8008052:	1d23      	adds	r3, r4, #4
 8008054:	1af2      	subs	r2, r6, r3
 8008056:	d0b6      	beq.n	8007fc6 <_malloc_r+0x22>
 8008058:	1b9b      	subs	r3, r3, r6
 800805a:	50a3      	str	r3, [r4, r2]
 800805c:	e7b3      	b.n	8007fc6 <_malloc_r+0x22>
 800805e:	6862      	ldr	r2, [r4, #4]
 8008060:	42a3      	cmp	r3, r4
 8008062:	bf0c      	ite	eq
 8008064:	6032      	streq	r2, [r6, #0]
 8008066:	605a      	strne	r2, [r3, #4]
 8008068:	e7ec      	b.n	8008044 <_malloc_r+0xa0>
 800806a:	4623      	mov	r3, r4
 800806c:	6864      	ldr	r4, [r4, #4]
 800806e:	e7b2      	b.n	8007fd6 <_malloc_r+0x32>
 8008070:	4634      	mov	r4, r6
 8008072:	6876      	ldr	r6, [r6, #4]
 8008074:	e7b9      	b.n	8007fea <_malloc_r+0x46>
 8008076:	230c      	movs	r3, #12
 8008078:	603b      	str	r3, [r7, #0]
 800807a:	4638      	mov	r0, r7
 800807c:	f000 f85e 	bl	800813c <__malloc_unlock>
 8008080:	e7a1      	b.n	8007fc6 <_malloc_r+0x22>
 8008082:	6025      	str	r5, [r4, #0]
 8008084:	e7de      	b.n	8008044 <_malloc_r+0xa0>
 8008086:	bf00      	nop
 8008088:	20000414 	.word	0x20000414

0800808c <_sbrk_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d06      	ldr	r5, [pc, #24]	; (80080a8 <_sbrk_r+0x1c>)
 8008090:	2300      	movs	r3, #0
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	f7f9 f9b2 	bl	8001400 <_sbrk>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_sbrk_r+0x1a>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_sbrk_r+0x1a>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	2000041c 	.word	0x2000041c

080080ac <__assert_func>:
 80080ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080ae:	4614      	mov	r4, r2
 80080b0:	461a      	mov	r2, r3
 80080b2:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <__assert_func+0x2c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4605      	mov	r5, r0
 80080b8:	68d8      	ldr	r0, [r3, #12]
 80080ba:	b14c      	cbz	r4, 80080d0 <__assert_func+0x24>
 80080bc:	4b07      	ldr	r3, [pc, #28]	; (80080dc <__assert_func+0x30>)
 80080be:	9100      	str	r1, [sp, #0]
 80080c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080c4:	4906      	ldr	r1, [pc, #24]	; (80080e0 <__assert_func+0x34>)
 80080c6:	462b      	mov	r3, r5
 80080c8:	f000 f80e 	bl	80080e8 <fiprintf>
 80080cc:	f000 fa64 	bl	8008598 <abort>
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <__assert_func+0x38>)
 80080d2:	461c      	mov	r4, r3
 80080d4:	e7f3      	b.n	80080be <__assert_func+0x12>
 80080d6:	bf00      	nop
 80080d8:	2000000c 	.word	0x2000000c
 80080dc:	08008e3c 	.word	0x08008e3c
 80080e0:	08008e49 	.word	0x08008e49
 80080e4:	08008e77 	.word	0x08008e77

080080e8 <fiprintf>:
 80080e8:	b40e      	push	{r1, r2, r3}
 80080ea:	b503      	push	{r0, r1, lr}
 80080ec:	4601      	mov	r1, r0
 80080ee:	ab03      	add	r3, sp, #12
 80080f0:	4805      	ldr	r0, [pc, #20]	; (8008108 <fiprintf+0x20>)
 80080f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080f6:	6800      	ldr	r0, [r0, #0]
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	f000 f84f 	bl	800819c <_vfiprintf_r>
 80080fe:	b002      	add	sp, #8
 8008100:	f85d eb04 	ldr.w	lr, [sp], #4
 8008104:	b003      	add	sp, #12
 8008106:	4770      	bx	lr
 8008108:	2000000c 	.word	0x2000000c

0800810c <__ascii_mbtowc>:
 800810c:	b082      	sub	sp, #8
 800810e:	b901      	cbnz	r1, 8008112 <__ascii_mbtowc+0x6>
 8008110:	a901      	add	r1, sp, #4
 8008112:	b142      	cbz	r2, 8008126 <__ascii_mbtowc+0x1a>
 8008114:	b14b      	cbz	r3, 800812a <__ascii_mbtowc+0x1e>
 8008116:	7813      	ldrb	r3, [r2, #0]
 8008118:	600b      	str	r3, [r1, #0]
 800811a:	7812      	ldrb	r2, [r2, #0]
 800811c:	1e10      	subs	r0, r2, #0
 800811e:	bf18      	it	ne
 8008120:	2001      	movne	r0, #1
 8008122:	b002      	add	sp, #8
 8008124:	4770      	bx	lr
 8008126:	4610      	mov	r0, r2
 8008128:	e7fb      	b.n	8008122 <__ascii_mbtowc+0x16>
 800812a:	f06f 0001 	mvn.w	r0, #1
 800812e:	e7f8      	b.n	8008122 <__ascii_mbtowc+0x16>

08008130 <__malloc_lock>:
 8008130:	4801      	ldr	r0, [pc, #4]	; (8008138 <__malloc_lock+0x8>)
 8008132:	f000 bbf1 	b.w	8008918 <__retarget_lock_acquire_recursive>
 8008136:	bf00      	nop
 8008138:	20000420 	.word	0x20000420

0800813c <__malloc_unlock>:
 800813c:	4801      	ldr	r0, [pc, #4]	; (8008144 <__malloc_unlock+0x8>)
 800813e:	f000 bbec 	b.w	800891a <__retarget_lock_release_recursive>
 8008142:	bf00      	nop
 8008144:	20000420 	.word	0x20000420

08008148 <__sfputc_r>:
 8008148:	6893      	ldr	r3, [r2, #8]
 800814a:	3b01      	subs	r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	b410      	push	{r4}
 8008150:	6093      	str	r3, [r2, #8]
 8008152:	da08      	bge.n	8008166 <__sfputc_r+0x1e>
 8008154:	6994      	ldr	r4, [r2, #24]
 8008156:	42a3      	cmp	r3, r4
 8008158:	db01      	blt.n	800815e <__sfputc_r+0x16>
 800815a:	290a      	cmp	r1, #10
 800815c:	d103      	bne.n	8008166 <__sfputc_r+0x1e>
 800815e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008162:	f000 b94b 	b.w	80083fc <__swbuf_r>
 8008166:	6813      	ldr	r3, [r2, #0]
 8008168:	1c58      	adds	r0, r3, #1
 800816a:	6010      	str	r0, [r2, #0]
 800816c:	7019      	strb	r1, [r3, #0]
 800816e:	4608      	mov	r0, r1
 8008170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008174:	4770      	bx	lr

08008176 <__sfputs_r>:
 8008176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008178:	4606      	mov	r6, r0
 800817a:	460f      	mov	r7, r1
 800817c:	4614      	mov	r4, r2
 800817e:	18d5      	adds	r5, r2, r3
 8008180:	42ac      	cmp	r4, r5
 8008182:	d101      	bne.n	8008188 <__sfputs_r+0x12>
 8008184:	2000      	movs	r0, #0
 8008186:	e007      	b.n	8008198 <__sfputs_r+0x22>
 8008188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818c:	463a      	mov	r2, r7
 800818e:	4630      	mov	r0, r6
 8008190:	f7ff ffda 	bl	8008148 <__sfputc_r>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d1f3      	bne.n	8008180 <__sfputs_r+0xa>
 8008198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800819c <_vfiprintf_r>:
 800819c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a0:	460d      	mov	r5, r1
 80081a2:	b09d      	sub	sp, #116	; 0x74
 80081a4:	4614      	mov	r4, r2
 80081a6:	4698      	mov	r8, r3
 80081a8:	4606      	mov	r6, r0
 80081aa:	b118      	cbz	r0, 80081b4 <_vfiprintf_r+0x18>
 80081ac:	6983      	ldr	r3, [r0, #24]
 80081ae:	b90b      	cbnz	r3, 80081b4 <_vfiprintf_r+0x18>
 80081b0:	f000 fb14 	bl	80087dc <__sinit>
 80081b4:	4b89      	ldr	r3, [pc, #548]	; (80083dc <_vfiprintf_r+0x240>)
 80081b6:	429d      	cmp	r5, r3
 80081b8:	d11b      	bne.n	80081f2 <_vfiprintf_r+0x56>
 80081ba:	6875      	ldr	r5, [r6, #4]
 80081bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081be:	07d9      	lsls	r1, r3, #31
 80081c0:	d405      	bmi.n	80081ce <_vfiprintf_r+0x32>
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	059a      	lsls	r2, r3, #22
 80081c6:	d402      	bmi.n	80081ce <_vfiprintf_r+0x32>
 80081c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081ca:	f000 fba5 	bl	8008918 <__retarget_lock_acquire_recursive>
 80081ce:	89ab      	ldrh	r3, [r5, #12]
 80081d0:	071b      	lsls	r3, r3, #28
 80081d2:	d501      	bpl.n	80081d8 <_vfiprintf_r+0x3c>
 80081d4:	692b      	ldr	r3, [r5, #16]
 80081d6:	b9eb      	cbnz	r3, 8008214 <_vfiprintf_r+0x78>
 80081d8:	4629      	mov	r1, r5
 80081da:	4630      	mov	r0, r6
 80081dc:	f000 f96e 	bl	80084bc <__swsetup_r>
 80081e0:	b1c0      	cbz	r0, 8008214 <_vfiprintf_r+0x78>
 80081e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081e4:	07dc      	lsls	r4, r3, #31
 80081e6:	d50e      	bpl.n	8008206 <_vfiprintf_r+0x6a>
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	b01d      	add	sp, #116	; 0x74
 80081ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f2:	4b7b      	ldr	r3, [pc, #492]	; (80083e0 <_vfiprintf_r+0x244>)
 80081f4:	429d      	cmp	r5, r3
 80081f6:	d101      	bne.n	80081fc <_vfiprintf_r+0x60>
 80081f8:	68b5      	ldr	r5, [r6, #8]
 80081fa:	e7df      	b.n	80081bc <_vfiprintf_r+0x20>
 80081fc:	4b79      	ldr	r3, [pc, #484]	; (80083e4 <_vfiprintf_r+0x248>)
 80081fe:	429d      	cmp	r5, r3
 8008200:	bf08      	it	eq
 8008202:	68f5      	ldreq	r5, [r6, #12]
 8008204:	e7da      	b.n	80081bc <_vfiprintf_r+0x20>
 8008206:	89ab      	ldrh	r3, [r5, #12]
 8008208:	0598      	lsls	r0, r3, #22
 800820a:	d4ed      	bmi.n	80081e8 <_vfiprintf_r+0x4c>
 800820c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800820e:	f000 fb84 	bl	800891a <__retarget_lock_release_recursive>
 8008212:	e7e9      	b.n	80081e8 <_vfiprintf_r+0x4c>
 8008214:	2300      	movs	r3, #0
 8008216:	9309      	str	r3, [sp, #36]	; 0x24
 8008218:	2320      	movs	r3, #32
 800821a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800821e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008222:	2330      	movs	r3, #48	; 0x30
 8008224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80083e8 <_vfiprintf_r+0x24c>
 8008228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800822c:	f04f 0901 	mov.w	r9, #1
 8008230:	4623      	mov	r3, r4
 8008232:	469a      	mov	sl, r3
 8008234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008238:	b10a      	cbz	r2, 800823e <_vfiprintf_r+0xa2>
 800823a:	2a25      	cmp	r2, #37	; 0x25
 800823c:	d1f9      	bne.n	8008232 <_vfiprintf_r+0x96>
 800823e:	ebba 0b04 	subs.w	fp, sl, r4
 8008242:	d00b      	beq.n	800825c <_vfiprintf_r+0xc0>
 8008244:	465b      	mov	r3, fp
 8008246:	4622      	mov	r2, r4
 8008248:	4629      	mov	r1, r5
 800824a:	4630      	mov	r0, r6
 800824c:	f7ff ff93 	bl	8008176 <__sfputs_r>
 8008250:	3001      	adds	r0, #1
 8008252:	f000 80aa 	beq.w	80083aa <_vfiprintf_r+0x20e>
 8008256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008258:	445a      	add	r2, fp
 800825a:	9209      	str	r2, [sp, #36]	; 0x24
 800825c:	f89a 3000 	ldrb.w	r3, [sl]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 80a2 	beq.w	80083aa <_vfiprintf_r+0x20e>
 8008266:	2300      	movs	r3, #0
 8008268:	f04f 32ff 	mov.w	r2, #4294967295
 800826c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008270:	f10a 0a01 	add.w	sl, sl, #1
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	9307      	str	r3, [sp, #28]
 8008278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800827c:	931a      	str	r3, [sp, #104]	; 0x68
 800827e:	4654      	mov	r4, sl
 8008280:	2205      	movs	r2, #5
 8008282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008286:	4858      	ldr	r0, [pc, #352]	; (80083e8 <_vfiprintf_r+0x24c>)
 8008288:	f7f7 ffb2 	bl	80001f0 <memchr>
 800828c:	9a04      	ldr	r2, [sp, #16]
 800828e:	b9d8      	cbnz	r0, 80082c8 <_vfiprintf_r+0x12c>
 8008290:	06d1      	lsls	r1, r2, #27
 8008292:	bf44      	itt	mi
 8008294:	2320      	movmi	r3, #32
 8008296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800829a:	0713      	lsls	r3, r2, #28
 800829c:	bf44      	itt	mi
 800829e:	232b      	movmi	r3, #43	; 0x2b
 80082a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a4:	f89a 3000 	ldrb.w	r3, [sl]
 80082a8:	2b2a      	cmp	r3, #42	; 0x2a
 80082aa:	d015      	beq.n	80082d8 <_vfiprintf_r+0x13c>
 80082ac:	9a07      	ldr	r2, [sp, #28]
 80082ae:	4654      	mov	r4, sl
 80082b0:	2000      	movs	r0, #0
 80082b2:	f04f 0c0a 	mov.w	ip, #10
 80082b6:	4621      	mov	r1, r4
 80082b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082bc:	3b30      	subs	r3, #48	; 0x30
 80082be:	2b09      	cmp	r3, #9
 80082c0:	d94e      	bls.n	8008360 <_vfiprintf_r+0x1c4>
 80082c2:	b1b0      	cbz	r0, 80082f2 <_vfiprintf_r+0x156>
 80082c4:	9207      	str	r2, [sp, #28]
 80082c6:	e014      	b.n	80082f2 <_vfiprintf_r+0x156>
 80082c8:	eba0 0308 	sub.w	r3, r0, r8
 80082cc:	fa09 f303 	lsl.w	r3, r9, r3
 80082d0:	4313      	orrs	r3, r2
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	46a2      	mov	sl, r4
 80082d6:	e7d2      	b.n	800827e <_vfiprintf_r+0xe2>
 80082d8:	9b03      	ldr	r3, [sp, #12]
 80082da:	1d19      	adds	r1, r3, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	9103      	str	r1, [sp, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bfbb      	ittet	lt
 80082e4:	425b      	neglt	r3, r3
 80082e6:	f042 0202 	orrlt.w	r2, r2, #2
 80082ea:	9307      	strge	r3, [sp, #28]
 80082ec:	9307      	strlt	r3, [sp, #28]
 80082ee:	bfb8      	it	lt
 80082f0:	9204      	strlt	r2, [sp, #16]
 80082f2:	7823      	ldrb	r3, [r4, #0]
 80082f4:	2b2e      	cmp	r3, #46	; 0x2e
 80082f6:	d10c      	bne.n	8008312 <_vfiprintf_r+0x176>
 80082f8:	7863      	ldrb	r3, [r4, #1]
 80082fa:	2b2a      	cmp	r3, #42	; 0x2a
 80082fc:	d135      	bne.n	800836a <_vfiprintf_r+0x1ce>
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	1d1a      	adds	r2, r3, #4
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	9203      	str	r2, [sp, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfb8      	it	lt
 800830a:	f04f 33ff 	movlt.w	r3, #4294967295
 800830e:	3402      	adds	r4, #2
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083f8 <_vfiprintf_r+0x25c>
 8008316:	7821      	ldrb	r1, [r4, #0]
 8008318:	2203      	movs	r2, #3
 800831a:	4650      	mov	r0, sl
 800831c:	f7f7 ff68 	bl	80001f0 <memchr>
 8008320:	b140      	cbz	r0, 8008334 <_vfiprintf_r+0x198>
 8008322:	2340      	movs	r3, #64	; 0x40
 8008324:	eba0 000a 	sub.w	r0, r0, sl
 8008328:	fa03 f000 	lsl.w	r0, r3, r0
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	4303      	orrs	r3, r0
 8008330:	3401      	adds	r4, #1
 8008332:	9304      	str	r3, [sp, #16]
 8008334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008338:	482c      	ldr	r0, [pc, #176]	; (80083ec <_vfiprintf_r+0x250>)
 800833a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800833e:	2206      	movs	r2, #6
 8008340:	f7f7 ff56 	bl	80001f0 <memchr>
 8008344:	2800      	cmp	r0, #0
 8008346:	d03f      	beq.n	80083c8 <_vfiprintf_r+0x22c>
 8008348:	4b29      	ldr	r3, [pc, #164]	; (80083f0 <_vfiprintf_r+0x254>)
 800834a:	bb1b      	cbnz	r3, 8008394 <_vfiprintf_r+0x1f8>
 800834c:	9b03      	ldr	r3, [sp, #12]
 800834e:	3307      	adds	r3, #7
 8008350:	f023 0307 	bic.w	r3, r3, #7
 8008354:	3308      	adds	r3, #8
 8008356:	9303      	str	r3, [sp, #12]
 8008358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835a:	443b      	add	r3, r7
 800835c:	9309      	str	r3, [sp, #36]	; 0x24
 800835e:	e767      	b.n	8008230 <_vfiprintf_r+0x94>
 8008360:	fb0c 3202 	mla	r2, ip, r2, r3
 8008364:	460c      	mov	r4, r1
 8008366:	2001      	movs	r0, #1
 8008368:	e7a5      	b.n	80082b6 <_vfiprintf_r+0x11a>
 800836a:	2300      	movs	r3, #0
 800836c:	3401      	adds	r4, #1
 800836e:	9305      	str	r3, [sp, #20]
 8008370:	4619      	mov	r1, r3
 8008372:	f04f 0c0a 	mov.w	ip, #10
 8008376:	4620      	mov	r0, r4
 8008378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800837c:	3a30      	subs	r2, #48	; 0x30
 800837e:	2a09      	cmp	r2, #9
 8008380:	d903      	bls.n	800838a <_vfiprintf_r+0x1ee>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0c5      	beq.n	8008312 <_vfiprintf_r+0x176>
 8008386:	9105      	str	r1, [sp, #20]
 8008388:	e7c3      	b.n	8008312 <_vfiprintf_r+0x176>
 800838a:	fb0c 2101 	mla	r1, ip, r1, r2
 800838e:	4604      	mov	r4, r0
 8008390:	2301      	movs	r3, #1
 8008392:	e7f0      	b.n	8008376 <_vfiprintf_r+0x1da>
 8008394:	ab03      	add	r3, sp, #12
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	462a      	mov	r2, r5
 800839a:	4b16      	ldr	r3, [pc, #88]	; (80083f4 <_vfiprintf_r+0x258>)
 800839c:	a904      	add	r1, sp, #16
 800839e:	4630      	mov	r0, r6
 80083a0:	f7fd ff9a 	bl	80062d8 <_printf_float>
 80083a4:	4607      	mov	r7, r0
 80083a6:	1c78      	adds	r0, r7, #1
 80083a8:	d1d6      	bne.n	8008358 <_vfiprintf_r+0x1bc>
 80083aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ac:	07d9      	lsls	r1, r3, #31
 80083ae:	d405      	bmi.n	80083bc <_vfiprintf_r+0x220>
 80083b0:	89ab      	ldrh	r3, [r5, #12]
 80083b2:	059a      	lsls	r2, r3, #22
 80083b4:	d402      	bmi.n	80083bc <_vfiprintf_r+0x220>
 80083b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083b8:	f000 faaf 	bl	800891a <__retarget_lock_release_recursive>
 80083bc:	89ab      	ldrh	r3, [r5, #12]
 80083be:	065b      	lsls	r3, r3, #25
 80083c0:	f53f af12 	bmi.w	80081e8 <_vfiprintf_r+0x4c>
 80083c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083c6:	e711      	b.n	80081ec <_vfiprintf_r+0x50>
 80083c8:	ab03      	add	r3, sp, #12
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	462a      	mov	r2, r5
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <_vfiprintf_r+0x258>)
 80083d0:	a904      	add	r1, sp, #16
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7fe fa24 	bl	8006820 <_printf_i>
 80083d8:	e7e4      	b.n	80083a4 <_vfiprintf_r+0x208>
 80083da:	bf00      	nop
 80083dc:	08008fb4 	.word	0x08008fb4
 80083e0:	08008fd4 	.word	0x08008fd4
 80083e4:	08008f94 	.word	0x08008f94
 80083e8:	08008e82 	.word	0x08008e82
 80083ec:	08008e8c 	.word	0x08008e8c
 80083f0:	080062d9 	.word	0x080062d9
 80083f4:	08008177 	.word	0x08008177
 80083f8:	08008e88 	.word	0x08008e88

080083fc <__swbuf_r>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	460e      	mov	r6, r1
 8008400:	4614      	mov	r4, r2
 8008402:	4605      	mov	r5, r0
 8008404:	b118      	cbz	r0, 800840e <__swbuf_r+0x12>
 8008406:	6983      	ldr	r3, [r0, #24]
 8008408:	b90b      	cbnz	r3, 800840e <__swbuf_r+0x12>
 800840a:	f000 f9e7 	bl	80087dc <__sinit>
 800840e:	4b21      	ldr	r3, [pc, #132]	; (8008494 <__swbuf_r+0x98>)
 8008410:	429c      	cmp	r4, r3
 8008412:	d12b      	bne.n	800846c <__swbuf_r+0x70>
 8008414:	686c      	ldr	r4, [r5, #4]
 8008416:	69a3      	ldr	r3, [r4, #24]
 8008418:	60a3      	str	r3, [r4, #8]
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	071a      	lsls	r2, r3, #28
 800841e:	d52f      	bpl.n	8008480 <__swbuf_r+0x84>
 8008420:	6923      	ldr	r3, [r4, #16]
 8008422:	b36b      	cbz	r3, 8008480 <__swbuf_r+0x84>
 8008424:	6923      	ldr	r3, [r4, #16]
 8008426:	6820      	ldr	r0, [r4, #0]
 8008428:	1ac0      	subs	r0, r0, r3
 800842a:	6963      	ldr	r3, [r4, #20]
 800842c:	b2f6      	uxtb	r6, r6
 800842e:	4283      	cmp	r3, r0
 8008430:	4637      	mov	r7, r6
 8008432:	dc04      	bgt.n	800843e <__swbuf_r+0x42>
 8008434:	4621      	mov	r1, r4
 8008436:	4628      	mov	r0, r5
 8008438:	f000 f93c 	bl	80086b4 <_fflush_r>
 800843c:	bb30      	cbnz	r0, 800848c <__swbuf_r+0x90>
 800843e:	68a3      	ldr	r3, [r4, #8]
 8008440:	3b01      	subs	r3, #1
 8008442:	60a3      	str	r3, [r4, #8]
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	6022      	str	r2, [r4, #0]
 800844a:	701e      	strb	r6, [r3, #0]
 800844c:	6963      	ldr	r3, [r4, #20]
 800844e:	3001      	adds	r0, #1
 8008450:	4283      	cmp	r3, r0
 8008452:	d004      	beq.n	800845e <__swbuf_r+0x62>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	07db      	lsls	r3, r3, #31
 8008458:	d506      	bpl.n	8008468 <__swbuf_r+0x6c>
 800845a:	2e0a      	cmp	r6, #10
 800845c:	d104      	bne.n	8008468 <__swbuf_r+0x6c>
 800845e:	4621      	mov	r1, r4
 8008460:	4628      	mov	r0, r5
 8008462:	f000 f927 	bl	80086b4 <_fflush_r>
 8008466:	b988      	cbnz	r0, 800848c <__swbuf_r+0x90>
 8008468:	4638      	mov	r0, r7
 800846a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800846c:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <__swbuf_r+0x9c>)
 800846e:	429c      	cmp	r4, r3
 8008470:	d101      	bne.n	8008476 <__swbuf_r+0x7a>
 8008472:	68ac      	ldr	r4, [r5, #8]
 8008474:	e7cf      	b.n	8008416 <__swbuf_r+0x1a>
 8008476:	4b09      	ldr	r3, [pc, #36]	; (800849c <__swbuf_r+0xa0>)
 8008478:	429c      	cmp	r4, r3
 800847a:	bf08      	it	eq
 800847c:	68ec      	ldreq	r4, [r5, #12]
 800847e:	e7ca      	b.n	8008416 <__swbuf_r+0x1a>
 8008480:	4621      	mov	r1, r4
 8008482:	4628      	mov	r0, r5
 8008484:	f000 f81a 	bl	80084bc <__swsetup_r>
 8008488:	2800      	cmp	r0, #0
 800848a:	d0cb      	beq.n	8008424 <__swbuf_r+0x28>
 800848c:	f04f 37ff 	mov.w	r7, #4294967295
 8008490:	e7ea      	b.n	8008468 <__swbuf_r+0x6c>
 8008492:	bf00      	nop
 8008494:	08008fb4 	.word	0x08008fb4
 8008498:	08008fd4 	.word	0x08008fd4
 800849c:	08008f94 	.word	0x08008f94

080084a0 <__ascii_wctomb>:
 80084a0:	b149      	cbz	r1, 80084b6 <__ascii_wctomb+0x16>
 80084a2:	2aff      	cmp	r2, #255	; 0xff
 80084a4:	bf85      	ittet	hi
 80084a6:	238a      	movhi	r3, #138	; 0x8a
 80084a8:	6003      	strhi	r3, [r0, #0]
 80084aa:	700a      	strbls	r2, [r1, #0]
 80084ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80084b0:	bf98      	it	ls
 80084b2:	2001      	movls	r0, #1
 80084b4:	4770      	bx	lr
 80084b6:	4608      	mov	r0, r1
 80084b8:	4770      	bx	lr
	...

080084bc <__swsetup_r>:
 80084bc:	4b32      	ldr	r3, [pc, #200]	; (8008588 <__swsetup_r+0xcc>)
 80084be:	b570      	push	{r4, r5, r6, lr}
 80084c0:	681d      	ldr	r5, [r3, #0]
 80084c2:	4606      	mov	r6, r0
 80084c4:	460c      	mov	r4, r1
 80084c6:	b125      	cbz	r5, 80084d2 <__swsetup_r+0x16>
 80084c8:	69ab      	ldr	r3, [r5, #24]
 80084ca:	b913      	cbnz	r3, 80084d2 <__swsetup_r+0x16>
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 f985 	bl	80087dc <__sinit>
 80084d2:	4b2e      	ldr	r3, [pc, #184]	; (800858c <__swsetup_r+0xd0>)
 80084d4:	429c      	cmp	r4, r3
 80084d6:	d10f      	bne.n	80084f8 <__swsetup_r+0x3c>
 80084d8:	686c      	ldr	r4, [r5, #4]
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084e0:	0719      	lsls	r1, r3, #28
 80084e2:	d42c      	bmi.n	800853e <__swsetup_r+0x82>
 80084e4:	06dd      	lsls	r5, r3, #27
 80084e6:	d411      	bmi.n	800850c <__swsetup_r+0x50>
 80084e8:	2309      	movs	r3, #9
 80084ea:	6033      	str	r3, [r6, #0]
 80084ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084f0:	81a3      	strh	r3, [r4, #12]
 80084f2:	f04f 30ff 	mov.w	r0, #4294967295
 80084f6:	e03e      	b.n	8008576 <__swsetup_r+0xba>
 80084f8:	4b25      	ldr	r3, [pc, #148]	; (8008590 <__swsetup_r+0xd4>)
 80084fa:	429c      	cmp	r4, r3
 80084fc:	d101      	bne.n	8008502 <__swsetup_r+0x46>
 80084fe:	68ac      	ldr	r4, [r5, #8]
 8008500:	e7eb      	b.n	80084da <__swsetup_r+0x1e>
 8008502:	4b24      	ldr	r3, [pc, #144]	; (8008594 <__swsetup_r+0xd8>)
 8008504:	429c      	cmp	r4, r3
 8008506:	bf08      	it	eq
 8008508:	68ec      	ldreq	r4, [r5, #12]
 800850a:	e7e6      	b.n	80084da <__swsetup_r+0x1e>
 800850c:	0758      	lsls	r0, r3, #29
 800850e:	d512      	bpl.n	8008536 <__swsetup_r+0x7a>
 8008510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008512:	b141      	cbz	r1, 8008526 <__swsetup_r+0x6a>
 8008514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008518:	4299      	cmp	r1, r3
 800851a:	d002      	beq.n	8008522 <__swsetup_r+0x66>
 800851c:	4630      	mov	r0, r6
 800851e:	f7ff fcd5 	bl	8007ecc <_free_r>
 8008522:	2300      	movs	r3, #0
 8008524:	6363      	str	r3, [r4, #52]	; 0x34
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800852c:	81a3      	strh	r3, [r4, #12]
 800852e:	2300      	movs	r3, #0
 8008530:	6063      	str	r3, [r4, #4]
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	f043 0308 	orr.w	r3, r3, #8
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	b94b      	cbnz	r3, 8008556 <__swsetup_r+0x9a>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800854c:	d003      	beq.n	8008556 <__swsetup_r+0x9a>
 800854e:	4621      	mov	r1, r4
 8008550:	4630      	mov	r0, r6
 8008552:	f000 fa09 	bl	8008968 <__smakebuf_r>
 8008556:	89a0      	ldrh	r0, [r4, #12]
 8008558:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800855c:	f010 0301 	ands.w	r3, r0, #1
 8008560:	d00a      	beq.n	8008578 <__swsetup_r+0xbc>
 8008562:	2300      	movs	r3, #0
 8008564:	60a3      	str	r3, [r4, #8]
 8008566:	6963      	ldr	r3, [r4, #20]
 8008568:	425b      	negs	r3, r3
 800856a:	61a3      	str	r3, [r4, #24]
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	b943      	cbnz	r3, 8008582 <__swsetup_r+0xc6>
 8008570:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008574:	d1ba      	bne.n	80084ec <__swsetup_r+0x30>
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	0781      	lsls	r1, r0, #30
 800857a:	bf58      	it	pl
 800857c:	6963      	ldrpl	r3, [r4, #20]
 800857e:	60a3      	str	r3, [r4, #8]
 8008580:	e7f4      	b.n	800856c <__swsetup_r+0xb0>
 8008582:	2000      	movs	r0, #0
 8008584:	e7f7      	b.n	8008576 <__swsetup_r+0xba>
 8008586:	bf00      	nop
 8008588:	2000000c 	.word	0x2000000c
 800858c:	08008fb4 	.word	0x08008fb4
 8008590:	08008fd4 	.word	0x08008fd4
 8008594:	08008f94 	.word	0x08008f94

08008598 <abort>:
 8008598:	b508      	push	{r3, lr}
 800859a:	2006      	movs	r0, #6
 800859c:	f000 fa4c 	bl	8008a38 <raise>
 80085a0:	2001      	movs	r0, #1
 80085a2:	f7f8 feb5 	bl	8001310 <_exit>
	...

080085a8 <__sflush_r>:
 80085a8:	898a      	ldrh	r2, [r1, #12]
 80085aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ae:	4605      	mov	r5, r0
 80085b0:	0710      	lsls	r0, r2, #28
 80085b2:	460c      	mov	r4, r1
 80085b4:	d458      	bmi.n	8008668 <__sflush_r+0xc0>
 80085b6:	684b      	ldr	r3, [r1, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dc05      	bgt.n	80085c8 <__sflush_r+0x20>
 80085bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dc02      	bgt.n	80085c8 <__sflush_r+0x20>
 80085c2:	2000      	movs	r0, #0
 80085c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085ca:	2e00      	cmp	r6, #0
 80085cc:	d0f9      	beq.n	80085c2 <__sflush_r+0x1a>
 80085ce:	2300      	movs	r3, #0
 80085d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085d4:	682f      	ldr	r7, [r5, #0]
 80085d6:	602b      	str	r3, [r5, #0]
 80085d8:	d032      	beq.n	8008640 <__sflush_r+0x98>
 80085da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	075a      	lsls	r2, r3, #29
 80085e0:	d505      	bpl.n	80085ee <__sflush_r+0x46>
 80085e2:	6863      	ldr	r3, [r4, #4]
 80085e4:	1ac0      	subs	r0, r0, r3
 80085e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085e8:	b10b      	cbz	r3, 80085ee <__sflush_r+0x46>
 80085ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085ec:	1ac0      	subs	r0, r0, r3
 80085ee:	2300      	movs	r3, #0
 80085f0:	4602      	mov	r2, r0
 80085f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085f4:	6a21      	ldr	r1, [r4, #32]
 80085f6:	4628      	mov	r0, r5
 80085f8:	47b0      	blx	r6
 80085fa:	1c43      	adds	r3, r0, #1
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	d106      	bne.n	800860e <__sflush_r+0x66>
 8008600:	6829      	ldr	r1, [r5, #0]
 8008602:	291d      	cmp	r1, #29
 8008604:	d82c      	bhi.n	8008660 <__sflush_r+0xb8>
 8008606:	4a2a      	ldr	r2, [pc, #168]	; (80086b0 <__sflush_r+0x108>)
 8008608:	40ca      	lsrs	r2, r1
 800860a:	07d6      	lsls	r6, r2, #31
 800860c:	d528      	bpl.n	8008660 <__sflush_r+0xb8>
 800860e:	2200      	movs	r2, #0
 8008610:	6062      	str	r2, [r4, #4]
 8008612:	04d9      	lsls	r1, r3, #19
 8008614:	6922      	ldr	r2, [r4, #16]
 8008616:	6022      	str	r2, [r4, #0]
 8008618:	d504      	bpl.n	8008624 <__sflush_r+0x7c>
 800861a:	1c42      	adds	r2, r0, #1
 800861c:	d101      	bne.n	8008622 <__sflush_r+0x7a>
 800861e:	682b      	ldr	r3, [r5, #0]
 8008620:	b903      	cbnz	r3, 8008624 <__sflush_r+0x7c>
 8008622:	6560      	str	r0, [r4, #84]	; 0x54
 8008624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008626:	602f      	str	r7, [r5, #0]
 8008628:	2900      	cmp	r1, #0
 800862a:	d0ca      	beq.n	80085c2 <__sflush_r+0x1a>
 800862c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008630:	4299      	cmp	r1, r3
 8008632:	d002      	beq.n	800863a <__sflush_r+0x92>
 8008634:	4628      	mov	r0, r5
 8008636:	f7ff fc49 	bl	8007ecc <_free_r>
 800863a:	2000      	movs	r0, #0
 800863c:	6360      	str	r0, [r4, #52]	; 0x34
 800863e:	e7c1      	b.n	80085c4 <__sflush_r+0x1c>
 8008640:	6a21      	ldr	r1, [r4, #32]
 8008642:	2301      	movs	r3, #1
 8008644:	4628      	mov	r0, r5
 8008646:	47b0      	blx	r6
 8008648:	1c41      	adds	r1, r0, #1
 800864a:	d1c7      	bne.n	80085dc <__sflush_r+0x34>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0c4      	beq.n	80085dc <__sflush_r+0x34>
 8008652:	2b1d      	cmp	r3, #29
 8008654:	d001      	beq.n	800865a <__sflush_r+0xb2>
 8008656:	2b16      	cmp	r3, #22
 8008658:	d101      	bne.n	800865e <__sflush_r+0xb6>
 800865a:	602f      	str	r7, [r5, #0]
 800865c:	e7b1      	b.n	80085c2 <__sflush_r+0x1a>
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	e7ad      	b.n	80085c4 <__sflush_r+0x1c>
 8008668:	690f      	ldr	r7, [r1, #16]
 800866a:	2f00      	cmp	r7, #0
 800866c:	d0a9      	beq.n	80085c2 <__sflush_r+0x1a>
 800866e:	0793      	lsls	r3, r2, #30
 8008670:	680e      	ldr	r6, [r1, #0]
 8008672:	bf08      	it	eq
 8008674:	694b      	ldreq	r3, [r1, #20]
 8008676:	600f      	str	r7, [r1, #0]
 8008678:	bf18      	it	ne
 800867a:	2300      	movne	r3, #0
 800867c:	eba6 0807 	sub.w	r8, r6, r7
 8008680:	608b      	str	r3, [r1, #8]
 8008682:	f1b8 0f00 	cmp.w	r8, #0
 8008686:	dd9c      	ble.n	80085c2 <__sflush_r+0x1a>
 8008688:	6a21      	ldr	r1, [r4, #32]
 800868a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800868c:	4643      	mov	r3, r8
 800868e:	463a      	mov	r2, r7
 8008690:	4628      	mov	r0, r5
 8008692:	47b0      	blx	r6
 8008694:	2800      	cmp	r0, #0
 8008696:	dc06      	bgt.n	80086a6 <__sflush_r+0xfe>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869e:	81a3      	strh	r3, [r4, #12]
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295
 80086a4:	e78e      	b.n	80085c4 <__sflush_r+0x1c>
 80086a6:	4407      	add	r7, r0
 80086a8:	eba8 0800 	sub.w	r8, r8, r0
 80086ac:	e7e9      	b.n	8008682 <__sflush_r+0xda>
 80086ae:	bf00      	nop
 80086b0:	20400001 	.word	0x20400001

080086b4 <_fflush_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	690b      	ldr	r3, [r1, #16]
 80086b8:	4605      	mov	r5, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	b913      	cbnz	r3, 80086c4 <_fflush_r+0x10>
 80086be:	2500      	movs	r5, #0
 80086c0:	4628      	mov	r0, r5
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	b118      	cbz	r0, 80086ce <_fflush_r+0x1a>
 80086c6:	6983      	ldr	r3, [r0, #24]
 80086c8:	b90b      	cbnz	r3, 80086ce <_fflush_r+0x1a>
 80086ca:	f000 f887 	bl	80087dc <__sinit>
 80086ce:	4b14      	ldr	r3, [pc, #80]	; (8008720 <_fflush_r+0x6c>)
 80086d0:	429c      	cmp	r4, r3
 80086d2:	d11b      	bne.n	800870c <_fflush_r+0x58>
 80086d4:	686c      	ldr	r4, [r5, #4]
 80086d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0ef      	beq.n	80086be <_fflush_r+0xa>
 80086de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086e0:	07d0      	lsls	r0, r2, #31
 80086e2:	d404      	bmi.n	80086ee <_fflush_r+0x3a>
 80086e4:	0599      	lsls	r1, r3, #22
 80086e6:	d402      	bmi.n	80086ee <_fflush_r+0x3a>
 80086e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ea:	f000 f915 	bl	8008918 <__retarget_lock_acquire_recursive>
 80086ee:	4628      	mov	r0, r5
 80086f0:	4621      	mov	r1, r4
 80086f2:	f7ff ff59 	bl	80085a8 <__sflush_r>
 80086f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086f8:	07da      	lsls	r2, r3, #31
 80086fa:	4605      	mov	r5, r0
 80086fc:	d4e0      	bmi.n	80086c0 <_fflush_r+0xc>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	059b      	lsls	r3, r3, #22
 8008702:	d4dd      	bmi.n	80086c0 <_fflush_r+0xc>
 8008704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008706:	f000 f908 	bl	800891a <__retarget_lock_release_recursive>
 800870a:	e7d9      	b.n	80086c0 <_fflush_r+0xc>
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <_fflush_r+0x70>)
 800870e:	429c      	cmp	r4, r3
 8008710:	d101      	bne.n	8008716 <_fflush_r+0x62>
 8008712:	68ac      	ldr	r4, [r5, #8]
 8008714:	e7df      	b.n	80086d6 <_fflush_r+0x22>
 8008716:	4b04      	ldr	r3, [pc, #16]	; (8008728 <_fflush_r+0x74>)
 8008718:	429c      	cmp	r4, r3
 800871a:	bf08      	it	eq
 800871c:	68ec      	ldreq	r4, [r5, #12]
 800871e:	e7da      	b.n	80086d6 <_fflush_r+0x22>
 8008720:	08008fb4 	.word	0x08008fb4
 8008724:	08008fd4 	.word	0x08008fd4
 8008728:	08008f94 	.word	0x08008f94

0800872c <std>:
 800872c:	2300      	movs	r3, #0
 800872e:	b510      	push	{r4, lr}
 8008730:	4604      	mov	r4, r0
 8008732:	e9c0 3300 	strd	r3, r3, [r0]
 8008736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800873a:	6083      	str	r3, [r0, #8]
 800873c:	8181      	strh	r1, [r0, #12]
 800873e:	6643      	str	r3, [r0, #100]	; 0x64
 8008740:	81c2      	strh	r2, [r0, #14]
 8008742:	6183      	str	r3, [r0, #24]
 8008744:	4619      	mov	r1, r3
 8008746:	2208      	movs	r2, #8
 8008748:	305c      	adds	r0, #92	; 0x5c
 800874a:	f7fd fd1d 	bl	8006188 <memset>
 800874e:	4b05      	ldr	r3, [pc, #20]	; (8008764 <std+0x38>)
 8008750:	6263      	str	r3, [r4, #36]	; 0x24
 8008752:	4b05      	ldr	r3, [pc, #20]	; (8008768 <std+0x3c>)
 8008754:	62a3      	str	r3, [r4, #40]	; 0x28
 8008756:	4b05      	ldr	r3, [pc, #20]	; (800876c <std+0x40>)
 8008758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800875a:	4b05      	ldr	r3, [pc, #20]	; (8008770 <std+0x44>)
 800875c:	6224      	str	r4, [r4, #32]
 800875e:	6323      	str	r3, [r4, #48]	; 0x30
 8008760:	bd10      	pop	{r4, pc}
 8008762:	bf00      	nop
 8008764:	08008a71 	.word	0x08008a71
 8008768:	08008a93 	.word	0x08008a93
 800876c:	08008acb 	.word	0x08008acb
 8008770:	08008aef 	.word	0x08008aef

08008774 <_cleanup_r>:
 8008774:	4901      	ldr	r1, [pc, #4]	; (800877c <_cleanup_r+0x8>)
 8008776:	f000 b8af 	b.w	80088d8 <_fwalk_reent>
 800877a:	bf00      	nop
 800877c:	080086b5 	.word	0x080086b5

08008780 <__sfmoreglue>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	2268      	movs	r2, #104	; 0x68
 8008784:	1e4d      	subs	r5, r1, #1
 8008786:	4355      	muls	r5, r2
 8008788:	460e      	mov	r6, r1
 800878a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800878e:	f7ff fc09 	bl	8007fa4 <_malloc_r>
 8008792:	4604      	mov	r4, r0
 8008794:	b140      	cbz	r0, 80087a8 <__sfmoreglue+0x28>
 8008796:	2100      	movs	r1, #0
 8008798:	e9c0 1600 	strd	r1, r6, [r0]
 800879c:	300c      	adds	r0, #12
 800879e:	60a0      	str	r0, [r4, #8]
 80087a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087a4:	f7fd fcf0 	bl	8006188 <memset>
 80087a8:	4620      	mov	r0, r4
 80087aa:	bd70      	pop	{r4, r5, r6, pc}

080087ac <__sfp_lock_acquire>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__sfp_lock_acquire+0x8>)
 80087ae:	f000 b8b3 	b.w	8008918 <__retarget_lock_acquire_recursive>
 80087b2:	bf00      	nop
 80087b4:	20000421 	.word	0x20000421

080087b8 <__sfp_lock_release>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__sfp_lock_release+0x8>)
 80087ba:	f000 b8ae 	b.w	800891a <__retarget_lock_release_recursive>
 80087be:	bf00      	nop
 80087c0:	20000421 	.word	0x20000421

080087c4 <__sinit_lock_acquire>:
 80087c4:	4801      	ldr	r0, [pc, #4]	; (80087cc <__sinit_lock_acquire+0x8>)
 80087c6:	f000 b8a7 	b.w	8008918 <__retarget_lock_acquire_recursive>
 80087ca:	bf00      	nop
 80087cc:	20000422 	.word	0x20000422

080087d0 <__sinit_lock_release>:
 80087d0:	4801      	ldr	r0, [pc, #4]	; (80087d8 <__sinit_lock_release+0x8>)
 80087d2:	f000 b8a2 	b.w	800891a <__retarget_lock_release_recursive>
 80087d6:	bf00      	nop
 80087d8:	20000422 	.word	0x20000422

080087dc <__sinit>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	4604      	mov	r4, r0
 80087e0:	f7ff fff0 	bl	80087c4 <__sinit_lock_acquire>
 80087e4:	69a3      	ldr	r3, [r4, #24]
 80087e6:	b11b      	cbz	r3, 80087f0 <__sinit+0x14>
 80087e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ec:	f7ff bff0 	b.w	80087d0 <__sinit_lock_release>
 80087f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087f4:	6523      	str	r3, [r4, #80]	; 0x50
 80087f6:	4b13      	ldr	r3, [pc, #76]	; (8008844 <__sinit+0x68>)
 80087f8:	4a13      	ldr	r2, [pc, #76]	; (8008848 <__sinit+0x6c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80087fe:	42a3      	cmp	r3, r4
 8008800:	bf04      	itt	eq
 8008802:	2301      	moveq	r3, #1
 8008804:	61a3      	streq	r3, [r4, #24]
 8008806:	4620      	mov	r0, r4
 8008808:	f000 f820 	bl	800884c <__sfp>
 800880c:	6060      	str	r0, [r4, #4]
 800880e:	4620      	mov	r0, r4
 8008810:	f000 f81c 	bl	800884c <__sfp>
 8008814:	60a0      	str	r0, [r4, #8]
 8008816:	4620      	mov	r0, r4
 8008818:	f000 f818 	bl	800884c <__sfp>
 800881c:	2200      	movs	r2, #0
 800881e:	60e0      	str	r0, [r4, #12]
 8008820:	2104      	movs	r1, #4
 8008822:	6860      	ldr	r0, [r4, #4]
 8008824:	f7ff ff82 	bl	800872c <std>
 8008828:	68a0      	ldr	r0, [r4, #8]
 800882a:	2201      	movs	r2, #1
 800882c:	2109      	movs	r1, #9
 800882e:	f7ff ff7d 	bl	800872c <std>
 8008832:	68e0      	ldr	r0, [r4, #12]
 8008834:	2202      	movs	r2, #2
 8008836:	2112      	movs	r1, #18
 8008838:	f7ff ff78 	bl	800872c <std>
 800883c:	2301      	movs	r3, #1
 800883e:	61a3      	str	r3, [r4, #24]
 8008840:	e7d2      	b.n	80087e8 <__sinit+0xc>
 8008842:	bf00      	nop
 8008844:	08008c18 	.word	0x08008c18
 8008848:	08008775 	.word	0x08008775

0800884c <__sfp>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	4607      	mov	r7, r0
 8008850:	f7ff ffac 	bl	80087ac <__sfp_lock_acquire>
 8008854:	4b1e      	ldr	r3, [pc, #120]	; (80088d0 <__sfp+0x84>)
 8008856:	681e      	ldr	r6, [r3, #0]
 8008858:	69b3      	ldr	r3, [r6, #24]
 800885a:	b913      	cbnz	r3, 8008862 <__sfp+0x16>
 800885c:	4630      	mov	r0, r6
 800885e:	f7ff ffbd 	bl	80087dc <__sinit>
 8008862:	3648      	adds	r6, #72	; 0x48
 8008864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008868:	3b01      	subs	r3, #1
 800886a:	d503      	bpl.n	8008874 <__sfp+0x28>
 800886c:	6833      	ldr	r3, [r6, #0]
 800886e:	b30b      	cbz	r3, 80088b4 <__sfp+0x68>
 8008870:	6836      	ldr	r6, [r6, #0]
 8008872:	e7f7      	b.n	8008864 <__sfp+0x18>
 8008874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008878:	b9d5      	cbnz	r5, 80088b0 <__sfp+0x64>
 800887a:	4b16      	ldr	r3, [pc, #88]	; (80088d4 <__sfp+0x88>)
 800887c:	60e3      	str	r3, [r4, #12]
 800887e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008882:	6665      	str	r5, [r4, #100]	; 0x64
 8008884:	f000 f847 	bl	8008916 <__retarget_lock_init_recursive>
 8008888:	f7ff ff96 	bl	80087b8 <__sfp_lock_release>
 800888c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008894:	6025      	str	r5, [r4, #0]
 8008896:	61a5      	str	r5, [r4, #24]
 8008898:	2208      	movs	r2, #8
 800889a:	4629      	mov	r1, r5
 800889c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088a0:	f7fd fc72 	bl	8006188 <memset>
 80088a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088ac:	4620      	mov	r0, r4
 80088ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088b0:	3468      	adds	r4, #104	; 0x68
 80088b2:	e7d9      	b.n	8008868 <__sfp+0x1c>
 80088b4:	2104      	movs	r1, #4
 80088b6:	4638      	mov	r0, r7
 80088b8:	f7ff ff62 	bl	8008780 <__sfmoreglue>
 80088bc:	4604      	mov	r4, r0
 80088be:	6030      	str	r0, [r6, #0]
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d1d5      	bne.n	8008870 <__sfp+0x24>
 80088c4:	f7ff ff78 	bl	80087b8 <__sfp_lock_release>
 80088c8:	230c      	movs	r3, #12
 80088ca:	603b      	str	r3, [r7, #0]
 80088cc:	e7ee      	b.n	80088ac <__sfp+0x60>
 80088ce:	bf00      	nop
 80088d0:	08008c18 	.word	0x08008c18
 80088d4:	ffff0001 	.word	0xffff0001

080088d8 <_fwalk_reent>:
 80088d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088dc:	4606      	mov	r6, r0
 80088de:	4688      	mov	r8, r1
 80088e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088e4:	2700      	movs	r7, #0
 80088e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088ea:	f1b9 0901 	subs.w	r9, r9, #1
 80088ee:	d505      	bpl.n	80088fc <_fwalk_reent+0x24>
 80088f0:	6824      	ldr	r4, [r4, #0]
 80088f2:	2c00      	cmp	r4, #0
 80088f4:	d1f7      	bne.n	80088e6 <_fwalk_reent+0xe>
 80088f6:	4638      	mov	r0, r7
 80088f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fc:	89ab      	ldrh	r3, [r5, #12]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d907      	bls.n	8008912 <_fwalk_reent+0x3a>
 8008902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008906:	3301      	adds	r3, #1
 8008908:	d003      	beq.n	8008912 <_fwalk_reent+0x3a>
 800890a:	4629      	mov	r1, r5
 800890c:	4630      	mov	r0, r6
 800890e:	47c0      	blx	r8
 8008910:	4307      	orrs	r7, r0
 8008912:	3568      	adds	r5, #104	; 0x68
 8008914:	e7e9      	b.n	80088ea <_fwalk_reent+0x12>

08008916 <__retarget_lock_init_recursive>:
 8008916:	4770      	bx	lr

08008918 <__retarget_lock_acquire_recursive>:
 8008918:	4770      	bx	lr

0800891a <__retarget_lock_release_recursive>:
 800891a:	4770      	bx	lr

0800891c <__swhatbuf_r>:
 800891c:	b570      	push	{r4, r5, r6, lr}
 800891e:	460e      	mov	r6, r1
 8008920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008924:	2900      	cmp	r1, #0
 8008926:	b096      	sub	sp, #88	; 0x58
 8008928:	4614      	mov	r4, r2
 800892a:	461d      	mov	r5, r3
 800892c:	da08      	bge.n	8008940 <__swhatbuf_r+0x24>
 800892e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	602a      	str	r2, [r5, #0]
 8008936:	061a      	lsls	r2, r3, #24
 8008938:	d410      	bmi.n	800895c <__swhatbuf_r+0x40>
 800893a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800893e:	e00e      	b.n	800895e <__swhatbuf_r+0x42>
 8008940:	466a      	mov	r2, sp
 8008942:	f000 f8fb 	bl	8008b3c <_fstat_r>
 8008946:	2800      	cmp	r0, #0
 8008948:	dbf1      	blt.n	800892e <__swhatbuf_r+0x12>
 800894a:	9a01      	ldr	r2, [sp, #4]
 800894c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008954:	425a      	negs	r2, r3
 8008956:	415a      	adcs	r2, r3
 8008958:	602a      	str	r2, [r5, #0]
 800895a:	e7ee      	b.n	800893a <__swhatbuf_r+0x1e>
 800895c:	2340      	movs	r3, #64	; 0x40
 800895e:	2000      	movs	r0, #0
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	b016      	add	sp, #88	; 0x58
 8008964:	bd70      	pop	{r4, r5, r6, pc}
	...

08008968 <__smakebuf_r>:
 8008968:	898b      	ldrh	r3, [r1, #12]
 800896a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800896c:	079d      	lsls	r5, r3, #30
 800896e:	4606      	mov	r6, r0
 8008970:	460c      	mov	r4, r1
 8008972:	d507      	bpl.n	8008984 <__smakebuf_r+0x1c>
 8008974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	6123      	str	r3, [r4, #16]
 800897c:	2301      	movs	r3, #1
 800897e:	6163      	str	r3, [r4, #20]
 8008980:	b002      	add	sp, #8
 8008982:	bd70      	pop	{r4, r5, r6, pc}
 8008984:	ab01      	add	r3, sp, #4
 8008986:	466a      	mov	r2, sp
 8008988:	f7ff ffc8 	bl	800891c <__swhatbuf_r>
 800898c:	9900      	ldr	r1, [sp, #0]
 800898e:	4605      	mov	r5, r0
 8008990:	4630      	mov	r0, r6
 8008992:	f7ff fb07 	bl	8007fa4 <_malloc_r>
 8008996:	b948      	cbnz	r0, 80089ac <__smakebuf_r+0x44>
 8008998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800899c:	059a      	lsls	r2, r3, #22
 800899e:	d4ef      	bmi.n	8008980 <__smakebuf_r+0x18>
 80089a0:	f023 0303 	bic.w	r3, r3, #3
 80089a4:	f043 0302 	orr.w	r3, r3, #2
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	e7e3      	b.n	8008974 <__smakebuf_r+0xc>
 80089ac:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <__smakebuf_r+0x7c>)
 80089ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	6020      	str	r0, [r4, #0]
 80089b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	9b00      	ldr	r3, [sp, #0]
 80089bc:	6163      	str	r3, [r4, #20]
 80089be:	9b01      	ldr	r3, [sp, #4]
 80089c0:	6120      	str	r0, [r4, #16]
 80089c2:	b15b      	cbz	r3, 80089dc <__smakebuf_r+0x74>
 80089c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089c8:	4630      	mov	r0, r6
 80089ca:	f000 f8c9 	bl	8008b60 <_isatty_r>
 80089ce:	b128      	cbz	r0, 80089dc <__smakebuf_r+0x74>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	f023 0303 	bic.w	r3, r3, #3
 80089d6:	f043 0301 	orr.w	r3, r3, #1
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	89a0      	ldrh	r0, [r4, #12]
 80089de:	4305      	orrs	r5, r0
 80089e0:	81a5      	strh	r5, [r4, #12]
 80089e2:	e7cd      	b.n	8008980 <__smakebuf_r+0x18>
 80089e4:	08008775 	.word	0x08008775

080089e8 <_raise_r>:
 80089e8:	291f      	cmp	r1, #31
 80089ea:	b538      	push	{r3, r4, r5, lr}
 80089ec:	4604      	mov	r4, r0
 80089ee:	460d      	mov	r5, r1
 80089f0:	d904      	bls.n	80089fc <_raise_r+0x14>
 80089f2:	2316      	movs	r3, #22
 80089f4:	6003      	str	r3, [r0, #0]
 80089f6:	f04f 30ff 	mov.w	r0, #4294967295
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089fe:	b112      	cbz	r2, 8008a06 <_raise_r+0x1e>
 8008a00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a04:	b94b      	cbnz	r3, 8008a1a <_raise_r+0x32>
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 f830 	bl	8008a6c <_getpid_r>
 8008a0c:	462a      	mov	r2, r5
 8008a0e:	4601      	mov	r1, r0
 8008a10:	4620      	mov	r0, r4
 8008a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a16:	f000 b817 	b.w	8008a48 <_kill_r>
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d00a      	beq.n	8008a34 <_raise_r+0x4c>
 8008a1e:	1c59      	adds	r1, r3, #1
 8008a20:	d103      	bne.n	8008a2a <_raise_r+0x42>
 8008a22:	2316      	movs	r3, #22
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	2001      	movs	r0, #1
 8008a28:	e7e7      	b.n	80089fa <_raise_r+0x12>
 8008a2a:	2400      	movs	r4, #0
 8008a2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a30:	4628      	mov	r0, r5
 8008a32:	4798      	blx	r3
 8008a34:	2000      	movs	r0, #0
 8008a36:	e7e0      	b.n	80089fa <_raise_r+0x12>

08008a38 <raise>:
 8008a38:	4b02      	ldr	r3, [pc, #8]	; (8008a44 <raise+0xc>)
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	f7ff bfd3 	b.w	80089e8 <_raise_r>
 8008a42:	bf00      	nop
 8008a44:	2000000c 	.word	0x2000000c

08008a48 <_kill_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d07      	ldr	r5, [pc, #28]	; (8008a68 <_kill_r+0x20>)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	4611      	mov	r1, r2
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	f7f8 fc4b 	bl	80012f0 <_kill>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	d102      	bne.n	8008a64 <_kill_r+0x1c>
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	b103      	cbz	r3, 8008a64 <_kill_r+0x1c>
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	bd38      	pop	{r3, r4, r5, pc}
 8008a66:	bf00      	nop
 8008a68:	2000041c 	.word	0x2000041c

08008a6c <_getpid_r>:
 8008a6c:	f7f8 bc38 	b.w	80012e0 <_getpid>

08008a70 <__sread>:
 8008a70:	b510      	push	{r4, lr}
 8008a72:	460c      	mov	r4, r1
 8008a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a78:	f000 f894 	bl	8008ba4 <_read_r>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	bfab      	itete	ge
 8008a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a82:	89a3      	ldrhlt	r3, [r4, #12]
 8008a84:	181b      	addge	r3, r3, r0
 8008a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a8a:	bfac      	ite	ge
 8008a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a8e:	81a3      	strhlt	r3, [r4, #12]
 8008a90:	bd10      	pop	{r4, pc}

08008a92 <__swrite>:
 8008a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a96:	461f      	mov	r7, r3
 8008a98:	898b      	ldrh	r3, [r1, #12]
 8008a9a:	05db      	lsls	r3, r3, #23
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	4616      	mov	r6, r2
 8008aa2:	d505      	bpl.n	8008ab0 <__swrite+0x1e>
 8008aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f000 f868 	bl	8008b80 <_lseek_r>
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aba:	81a3      	strh	r3, [r4, #12]
 8008abc:	4632      	mov	r2, r6
 8008abe:	463b      	mov	r3, r7
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac6:	f000 b817 	b.w	8008af8 <_write_r>

08008aca <__sseek>:
 8008aca:	b510      	push	{r4, lr}
 8008acc:	460c      	mov	r4, r1
 8008ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad2:	f000 f855 	bl	8008b80 <_lseek_r>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	bf15      	itete	ne
 8008adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ae6:	81a3      	strheq	r3, [r4, #12]
 8008ae8:	bf18      	it	ne
 8008aea:	81a3      	strhne	r3, [r4, #12]
 8008aec:	bd10      	pop	{r4, pc}

08008aee <__sclose>:
 8008aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af2:	f000 b813 	b.w	8008b1c <_close_r>
	...

08008af8 <_write_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d07      	ldr	r5, [pc, #28]	; (8008b18 <_write_r+0x20>)
 8008afc:	4604      	mov	r4, r0
 8008afe:	4608      	mov	r0, r1
 8008b00:	4611      	mov	r1, r2
 8008b02:	2200      	movs	r2, #0
 8008b04:	602a      	str	r2, [r5, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f7f8 fc29 	bl	800135e <_write>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	d102      	bne.n	8008b16 <_write_r+0x1e>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	b103      	cbz	r3, 8008b16 <_write_r+0x1e>
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	2000041c 	.word	0x2000041c

08008b1c <_close_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4d06      	ldr	r5, [pc, #24]	; (8008b38 <_close_r+0x1c>)
 8008b20:	2300      	movs	r3, #0
 8008b22:	4604      	mov	r4, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	602b      	str	r3, [r5, #0]
 8008b28:	f7f8 fc35 	bl	8001396 <_close>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_close_r+0x1a>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_close_r+0x1a>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	2000041c 	.word	0x2000041c

08008b3c <_fstat_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d07      	ldr	r5, [pc, #28]	; (8008b5c <_fstat_r+0x20>)
 8008b40:	2300      	movs	r3, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	f7f8 fc30 	bl	80013ae <_fstat>
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	d102      	bne.n	8008b58 <_fstat_r+0x1c>
 8008b52:	682b      	ldr	r3, [r5, #0]
 8008b54:	b103      	cbz	r3, 8008b58 <_fstat_r+0x1c>
 8008b56:	6023      	str	r3, [r4, #0]
 8008b58:	bd38      	pop	{r3, r4, r5, pc}
 8008b5a:	bf00      	nop
 8008b5c:	2000041c 	.word	0x2000041c

08008b60 <_isatty_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d06      	ldr	r5, [pc, #24]	; (8008b7c <_isatty_r+0x1c>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	602b      	str	r3, [r5, #0]
 8008b6c:	f7f8 fc2f 	bl	80013ce <_isatty>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_isatty_r+0x1a>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_isatty_r+0x1a>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	2000041c 	.word	0x2000041c

08008b80 <_lseek_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	; (8008ba0 <_lseek_r+0x20>)
 8008b84:	4604      	mov	r4, r0
 8008b86:	4608      	mov	r0, r1
 8008b88:	4611      	mov	r1, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	602a      	str	r2, [r5, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f7f8 fc28 	bl	80013e4 <_lseek>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_lseek_r+0x1e>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_lseek_r+0x1e>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	2000041c 	.word	0x2000041c

08008ba4 <_read_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	; (8008bc4 <_read_r+0x20>)
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f7f8 fbb6 	bl	8001324 <_read>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_read_r+0x1e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_read_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	2000041c 	.word	0x2000041c

08008bc8 <_init>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	bf00      	nop
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr

08008bd4 <_fini>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr
