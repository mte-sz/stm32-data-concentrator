
Interrupts_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f5c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004128  08004128  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004128  08004128  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004128  08004128  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000014c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b724  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d56  00000000  00000000  0002b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0002d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000720  00000000  00000000  0002dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002025a  00000000  00000000  0002e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bfed  00000000  00000000  0004e61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0204  00000000  00000000  0005a607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a80b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001df8  00000000  00000000  0011a85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080040d8 	.word	0x080040d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080040d8 	.word	0x080040d8

080001d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <MX_DMA_Init+0x48>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a0f      	ldr	r2, [pc, #60]	; (800021c <MX_DMA_Init+0x48>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <MX_DMA_Init+0x48>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	2010      	movs	r0, #16
 80001f8:	f000 fc23 	bl	8000a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001fc:	2010      	movs	r0, #16
 80001fe:	f000 fc3c 	bl	8000a7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000202:	2200      	movs	r2, #0
 8000204:	2100      	movs	r1, #0
 8000206:	2011      	movs	r0, #17
 8000208:	f000 fc1b 	bl	8000a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800020c:	2011      	movs	r0, #17
 800020e:	f000 fc34 	bl	8000a7a <HAL_NVIC_EnableIRQ>

}
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b2f      	ldr	r3, [pc, #188]	; (80002f4 <MX_GPIO_Init+0xd4>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4a2e      	ldr	r2, [pc, #184]	; (80002f4 <MX_GPIO_Init+0xd4>)
 800023c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000240:	6153      	str	r3, [r2, #20]
 8000242:	4b2c      	ldr	r3, [pc, #176]	; (80002f4 <MX_GPIO_Init+0xd4>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800024a:	613b      	str	r3, [r7, #16]
 800024c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800024e:	4b29      	ldr	r3, [pc, #164]	; (80002f4 <MX_GPIO_Init+0xd4>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	4a28      	ldr	r2, [pc, #160]	; (80002f4 <MX_GPIO_Init+0xd4>)
 8000254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000258:	6153      	str	r3, [r2, #20]
 800025a:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <MX_GPIO_Init+0xd4>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b23      	ldr	r3, [pc, #140]	; (80002f4 <MX_GPIO_Init+0xd4>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a22      	ldr	r2, [pc, #136]	; (80002f4 <MX_GPIO_Init+0xd4>)
 800026c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b20      	ldr	r3, [pc, #128]	; (80002f4 <MX_GPIO_Init+0xd4>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027e:	4b1d      	ldr	r3, [pc, #116]	; (80002f4 <MX_GPIO_Init+0xd4>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a1c      	ldr	r2, [pc, #112]	; (80002f4 <MX_GPIO_Init+0xd4>)
 8000284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <MX_GPIO_Init+0xd4>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2120      	movs	r1, #32
 800029a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029e:	f000 ffbb 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80002ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	4619      	mov	r1, r3
 80002b8:	480f      	ldr	r0, [pc, #60]	; (80002f8 <MX_GPIO_Init+0xd8>)
 80002ba:	f000 fe23 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002be:	2320      	movs	r3, #32
 80002c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ca:	2300      	movs	r3, #0
 80002cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002ce:	f107 0314 	add.w	r3, r7, #20
 80002d2:	4619      	mov	r1, r3
 80002d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d8:	f000 fe14 	bl	8000f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 80002dc:	2200      	movs	r2, #0
 80002de:	2108      	movs	r1, #8
 80002e0:	2028      	movs	r0, #40	; 0x28
 80002e2:	f000 fbae 	bl	8000a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002e6:	2028      	movs	r0, #40	; 0x28
 80002e8:	f000 fbc7 	bl	8000a7a <HAL_NVIC_EnableIRQ>

}
 80002ec:	bf00      	nop
 80002ee:	3728      	adds	r7, #40	; 0x28
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40021000 	.word	0x40021000
 80002f8:	48000800 	.word	0x48000800

080002fc <HAL_UART_TxHalfCpltCallback>:
uint8_t data[20];
uint8_t Rx_data[10];
uint8_t HalfTransmit[] = "halfTransmit";

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	  for(int i=0; i<10; i++){
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	e007      	b.n	800031a <HAL_UART_TxHalfCpltCallback+0x1e>
		  data[i]='a';
 800030a:	4a09      	ldr	r2, [pc, #36]	; (8000330 <HAL_UART_TxHalfCpltCallback+0x34>)
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	4413      	add	r3, r2
 8000310:	2261      	movs	r2, #97	; 0x61
 8000312:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<10; i++){
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3301      	adds	r3, #1
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	2b09      	cmp	r3, #9
 800031e:	ddf4      	ble.n	800030a <HAL_UART_TxHalfCpltCallback+0xe>
	  }

}
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	20000028 	.word	0x20000028

08000334 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	  for(int i=10;i<20;i++){
 800033c:	230a      	movs	r3, #10
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e007      	b.n	8000352 <HAL_UART_TxCpltCallback+0x1e>
		  data[i]='b';
 8000342:	4a09      	ldr	r2, [pc, #36]	; (8000368 <HAL_UART_TxCpltCallback+0x34>)
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	4413      	add	r3, r2
 8000348:	2262      	movs	r2, #98	; 0x62
 800034a:	701a      	strb	r2, [r3, #0]
	  for(int i=10;i<20;i++){
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b13      	cmp	r3, #19
 8000356:	ddf4      	ble.n	8000342 <HAL_UART_TxCpltCallback+0xe>
	  }
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	20000028 	.word	0x20000028

0800036c <HAL_UART_RxHalfCpltCallback>:


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
		//HAL_UART_Transmit_DMA(&huart2, HalfTransmit, sizeof(HalfTransmit));


}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	 HAL_UART_Receive_DMA(&huart2, Rx_data, 10);
 8000388:	220a      	movs	r2, #10
 800038a:	4904      	ldr	r1, [pc, #16]	; (800039c <HAL_UART_RxCpltCallback+0x1c>)
 800038c:	4804      	ldr	r0, [pc, #16]	; (80003a0 <HAL_UART_RxCpltCallback+0x20>)
 800038e:	f002 fcf9 	bl	8002d84 <HAL_UART_Receive_DMA>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	2000003c 	.word	0x2000003c
 80003a0:	20000048 	.word	0x20000048

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 fa0a 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f810 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f7ff ff36 	bl	8000220 <MX_GPIO_Init>
  MX_DMA_Init();
 80003b4:	f7ff ff0e 	bl	80001d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003b8:	f000 f90a 	bl	80005d0 <MX_USART2_UART_Init>
 /* for (int i=0; i<2000; i++)
   {
     data[i] = 'x';
   }*/

	HAL_UART_Receive_DMA(&huart2, Rx_data, 10);
 80003bc:	220a      	movs	r2, #10
 80003be:	4902      	ldr	r1, [pc, #8]	; (80003c8 <main+0x24>)
 80003c0:	4802      	ldr	r0, [pc, #8]	; (80003cc <main+0x28>)
 80003c2:	f002 fcdf 	bl	8002d84 <HAL_UART_Receive_DMA>

  while (1)
 80003c6:	e7fe      	b.n	80003c6 <main+0x22>
 80003c8:	2000003c 	.word	0x2000003c
 80003cc:	20000048 	.word	0x20000048

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b0a6      	sub	sp, #152	; 0x98
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003da:	2228      	movs	r2, #40	; 0x28
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f003 fe72 	bl	80040c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2258      	movs	r2, #88	; 0x58
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f003 fe64 	bl	80040c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000400:	2302      	movs	r3, #2
 8000402:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000404:	2301      	movs	r3, #1
 8000406:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000408:	2310      	movs	r3, #16
 800040a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040e:	2302      	movs	r3, #2
 8000410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800042e:	4618      	mov	r0, r3
 8000430:	f000 ff22 	bl	8001278 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800043a:	f000 f83d 	bl	80004b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000442:	2302      	movs	r3, #2
 8000444:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000454:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000458:	2102      	movs	r1, #2
 800045a:	4618      	mov	r0, r3
 800045c:	f001 ff60 	bl	8002320 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000466:	f000 f827 	bl	80004b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800046a:	2302      	movs	r3, #2
 800046c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	4618      	mov	r0, r3
 8000476:	f002 f989 	bl	800278c <HAL_RCCEx_PeriphCLKConfig>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000480:	f000 f81a 	bl	80004b8 <Error_Handler>
  }
}
 8000484:	bf00      	nop
 8000486:	3798      	adds	r7, #152	; 0x98
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void	HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800049c:	d104      	bne.n	80004a8 <HAL_GPIO_EXTI_Callback+0x1c>
	 	HAL_UART_Transmit_DMA(&huart2, data, sizeof(data));
 800049e:	2214      	movs	r2, #20
 80004a0:	4903      	ldr	r1, [pc, #12]	; (80004b0 <HAL_GPIO_EXTI_Callback+0x24>)
 80004a2:	4804      	ldr	r0, [pc, #16]	; (80004b4 <HAL_GPIO_EXTI_Callback+0x28>)
 80004a4:	f002 fbde 	bl	8002c64 <HAL_UART_Transmit_DMA>
	}
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000028 	.word	0x20000028
 80004b4:	20000048 	.word	0x20000048

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <Error_Handler+0x8>
	...

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x44>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x44>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_MspInit+0x44>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <HAL_MspInit+0x44>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_MspInit+0x44>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 f978 	bl	800084c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <DMA1_Channel6_IRQHandler+0x10>)
 8000566:	f000 fbbf 	bl	8000ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000110 	.word	0x20000110

08000574 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <DMA1_Channel7_IRQHandler+0x10>)
 800057a:	f000 fbb5 	bl	8000ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000cc 	.word	0x200000cc

08000588 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <USART2_IRQHandler+0x10>)
 800058e:	f002 fc47 	bl	8002e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000048 	.word	0x20000048

0800059c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005a4:	f000 fe50 	bl	8001248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <SystemInit+0x20>)
 80005b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <SystemInit+0x20>)
 80005b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <MX_USART2_UART_Init+0x5c>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000614:	f002 fad8 	bl	8002bc8 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061e:	f7ff ff4b 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000048 	.word	0x20000048
 800062c:	40004400 	.word	0x40004400

08000630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a41      	ldr	r2, [pc, #260]	; (8000754 <HAL_UART_MspInit+0x124>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d17c      	bne.n	800074c <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000652:	4b41      	ldr	r3, [pc, #260]	; (8000758 <HAL_UART_MspInit+0x128>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a40      	ldr	r2, [pc, #256]	; (8000758 <HAL_UART_MspInit+0x128>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b3e      	ldr	r3, [pc, #248]	; (8000758 <HAL_UART_MspInit+0x128>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <HAL_UART_MspInit+0x128>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a3a      	ldr	r2, [pc, #232]	; (8000758 <HAL_UART_MspInit+0x128>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b38      	ldr	r3, [pc, #224]	; (8000758 <HAL_UART_MspInit+0x128>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000682:	230c      	movs	r3, #12
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000692:	2307      	movs	r3, #7
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f000 fc30 	bl	8000f04 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80006a4:	4b2d      	ldr	r3, [pc, #180]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006a6:	4a2e      	ldr	r2, [pc, #184]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006ac:	2210      	movs	r2, #16
 80006ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006b6:	4b29      	ldr	r3, [pc, #164]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006c2:	4b26      	ldr	r3, [pc, #152]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80006d4:	4821      	ldr	r0, [pc, #132]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006d6:	f000 f9ea 	bl	8000aae <HAL_DMA_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80006e0:	f7ff feea 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a1d      	ldr	r2, [pc, #116]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <HAL_UART_MspInit+0x134>)
 80006f2:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <HAL_UART_MspInit+0x138>)
 80006f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <HAL_UART_MspInit+0x134>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <HAL_UART_MspInit+0x134>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_UART_MspInit+0x134>)
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <HAL_UART_MspInit+0x134>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_UART_MspInit+0x134>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <HAL_UART_MspInit+0x134>)
 8000716:	2220      	movs	r2, #32
 8000718:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_UART_MspInit+0x134>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <HAL_UART_MspInit+0x134>)
 8000722:	f000 f9c4 	bl	8000aae <HAL_DMA_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 800072c:	f7ff fec4 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <HAL_UART_MspInit+0x134>)
 8000734:	671a      	str	r2, [r3, #112]	; 0x70
 8000736:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <HAL_UART_MspInit+0x134>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	210c      	movs	r1, #12
 8000740:	2026      	movs	r0, #38	; 0x26
 8000742:	f000 f97e 	bl	8000a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000746:	2026      	movs	r0, #38	; 0x26
 8000748:	f000 f997 	bl	8000a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40004400 	.word	0x40004400
 8000758:	40021000 	.word	0x40021000
 800075c:	200000cc 	.word	0x200000cc
 8000760:	40020080 	.word	0x40020080
 8000764:	20000110 	.word	0x20000110
 8000768:	4002006c 	.word	0x4002006c

0800076c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000772:	490e      	ldr	r1, [pc, #56]	; (80007ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000774:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <LoopForever+0xe>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000788:	4c0b      	ldr	r4, [pc, #44]	; (80007b8 <LoopForever+0x16>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000796:	f7ff ff09 	bl	80005ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079a:	f003 fc71 	bl	8004080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800079e:	f7ff fe01 	bl	80003a4 <main>

080007a2 <LoopForever>:

LoopForever:
    b LoopForever
 80007a2:	e7fe      	b.n	80007a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b0:	08004130 	.word	0x08004130
  ldr r2, =_sbss
 80007b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007b8:	20000158 	.word	0x20000158

080007bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_2_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_Init+0x28>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_Init+0x28>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f92b 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f808 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff fe72 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_InitTick+0x54>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_InitTick+0x58>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	fbb3 f3f1 	udiv	r3, r3, r1
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f943 	bl	8000a96 <HAL_SYSTICK_Config>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e00e      	b.n	8000838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d80a      	bhi.n	8000836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000820:	2200      	movs	r2, #0
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f000 f90b 	bl	8000a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <HAL_InitTick+0x5c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	e000      	b.n	8000838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000000 	.word	0x20000000
 8000844:	20000008 	.word	0x20000008
 8000848:	20000004 	.word	0x20000004

0800084c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_IncTick+0x20>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_IncTick+0x24>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_IncTick+0x24>)
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000008 	.word	0x20000008
 8000870:	20000154 	.word	0x20000154

08000874 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return uwTick;  
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <HAL_GetTick+0x14>)
 800087a:	681b      	ldr	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000154 	.word	0x20000154

0800088c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	60d3      	str	r3, [r2, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <__NVIC_GetPriorityGrouping+0x18>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	f003 0307 	and.w	r3, r3, #7
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db0b      	blt.n	800091a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 021f 	and.w	r2, r3, #31
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <__NVIC_EnableIRQ+0x38>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	095b      	lsrs	r3, r3, #5
 8000910:	2001      	movs	r0, #1
 8000912:	fa00 f202 	lsl.w	r2, r0, r2
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f8:	d301      	bcc.n	80009fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00f      	b.n	8000a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <SysTick_Config+0x40>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a06:	210f      	movs	r1, #15
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f7ff ff8e 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SysTick_Config+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SysTick_Config+0x40>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff29 	bl	800088c <__NVIC_SetPriorityGrouping>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff3e 	bl	80008d4 <__NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff8e 	bl	8000980 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5d 	bl	800092c <__NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff31 	bl	80008f0 <__NVIC_EnableIRQ>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffa2 	bl	80009e8 <SysTick_Config>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e037      	b.n	8000b34 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ada:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ade:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 f9b8 	bl	8000e8c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
}  
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d101      	bne.n	8000b5c <HAL_DMA_Start_IT+0x20>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e04a      	b.n	8000bf2 <HAL_DMA_Start_IT+0xb6>
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d13a      	bne.n	8000be4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2202      	movs	r2, #2
 8000b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f022 0201 	bic.w	r2, r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f000 f94b 	bl	8000e2e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d008      	beq.n	8000bb2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f042 020e 	orr.w	r2, r2, #14
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	e00f      	b.n	8000bd2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f042 020a 	orr.w	r2, r2, #10
 8000bc0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0204 	bic.w	r2, r2, #4
 8000bd0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f042 0201 	orr.w	r2, r2, #1
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	e005      	b.n	8000bf0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000bec:	2302      	movs	r3, #2
 8000bee:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d008      	beq.n	8000c1e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2204      	movs	r2, #4
 8000c10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e020      	b.n	8000c60 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 020e 	bic.w	r2, r2, #14
 8000c2c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0201 	bic.w	r2, r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d005      	beq.n	8000c8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2204      	movs	r2, #4
 8000c86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e027      	b.n	8000cde <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 020e 	bic.w	r2, r2, #14
 8000c9c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 0201 	bic.w	r2, r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	4798      	blx	r3
    } 
  }
  return status;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	2204      	movs	r2, #4
 8000d06:	409a      	lsls	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d024      	beq.n	8000d5a <HAL_DMA_IRQHandler+0x72>
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d01f      	beq.n	8000d5a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d107      	bne.n	8000d38 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0204 	bic.w	r2, r2, #4
 8000d36:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d40:	2104      	movs	r1, #4
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d06a      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d58:	e065      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	2202      	movs	r2, #2
 8000d60:	409a      	lsls	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d02c      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0xdc>
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d027      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0320 	and.w	r3, r3, #32
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10b      	bne.n	8000d9a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 020a 	bic.w	r2, r2, #10
 8000d90:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da2:	2102      	movs	r1, #2
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d035      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000dc2:	e030      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	2208      	movs	r2, #8
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d028      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13e>
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d023      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 020e 	bic.w	r2, r2, #14
 8000dec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d004      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	4798      	blx	r3
    }
  }
}  
 8000e24:	e7ff      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13e>
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b085      	sub	sp, #20
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e44:	2101      	movs	r1, #1
 8000e46:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b10      	cmp	r3, #16
 8000e5a:	d108      	bne.n	8000e6e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e6c:	e007      	b.n	8000e7e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	60da      	str	r2, [r3, #12]
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <DMA_CalcBaseAndBitshift+0x60>)
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d80f      	bhi.n	8000ec0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <DMA_CalcBaseAndBitshift+0x64>)
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <DMA_CalcBaseAndBitshift+0x68>)
 8000eac:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	009a      	lsls	r2, r3, #2
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <DMA_CalcBaseAndBitshift+0x6c>)
 8000ebc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000ebe:	e00e      	b.n	8000ede <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <DMA_CalcBaseAndBitshift+0x70>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <DMA_CalcBaseAndBitshift+0x68>)
 8000ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	009a      	lsls	r2, r3, #2
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <DMA_CalcBaseAndBitshift+0x74>)
 8000edc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40020407 	.word	0x40020407
 8000ef0:	bffdfff8 	.word	0xbffdfff8
 8000ef4:	cccccccd 	.word	0xcccccccd
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	bffdfbf8 	.word	0xbffdfbf8
 8000f00:	40020400 	.word	0x40020400

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f12:	e160      	b.n	80011d6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 8152 	beq.w	80011d0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d005      	beq.n	8000f44 <HAL_GPIO_Init+0x40>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d130      	bne.n	8000fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 0201 	and.w	r2, r3, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d017      	beq.n	8000fe2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d123      	bne.n	8001036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	6939      	ldr	r1, [r7, #16]
 8001032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0203 	and.w	r2, r3, #3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80ac 	beq.w	80011d0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001078:	4b5e      	ldr	r3, [pc, #376]	; (80011f4 <HAL_GPIO_Init+0x2f0>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a5d      	ldr	r2, [pc, #372]	; (80011f4 <HAL_GPIO_Init+0x2f0>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <HAL_GPIO_Init+0x2f0>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001090:	4a59      	ldr	r2, [pc, #356]	; (80011f8 <HAL_GPIO_Init+0x2f4>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ba:	d025      	beq.n	8001108 <HAL_GPIO_Init+0x204>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a4f      	ldr	r2, [pc, #316]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d01f      	beq.n	8001104 <HAL_GPIO_Init+0x200>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a4e      	ldr	r2, [pc, #312]	; (8001200 <HAL_GPIO_Init+0x2fc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d019      	beq.n	8001100 <HAL_GPIO_Init+0x1fc>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a4d      	ldr	r2, [pc, #308]	; (8001204 <HAL_GPIO_Init+0x300>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d013      	beq.n	80010fc <HAL_GPIO_Init+0x1f8>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a4c      	ldr	r2, [pc, #304]	; (8001208 <HAL_GPIO_Init+0x304>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d00d      	beq.n	80010f8 <HAL_GPIO_Init+0x1f4>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a4b      	ldr	r2, [pc, #300]	; (800120c <HAL_GPIO_Init+0x308>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d007      	beq.n	80010f4 <HAL_GPIO_Init+0x1f0>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a4a      	ldr	r2, [pc, #296]	; (8001210 <HAL_GPIO_Init+0x30c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d101      	bne.n	80010f0 <HAL_GPIO_Init+0x1ec>
 80010ec:	2306      	movs	r3, #6
 80010ee:	e00c      	b.n	800110a <HAL_GPIO_Init+0x206>
 80010f0:	2307      	movs	r3, #7
 80010f2:	e00a      	b.n	800110a <HAL_GPIO_Init+0x206>
 80010f4:	2305      	movs	r3, #5
 80010f6:	e008      	b.n	800110a <HAL_GPIO_Init+0x206>
 80010f8:	2304      	movs	r3, #4
 80010fa:	e006      	b.n	800110a <HAL_GPIO_Init+0x206>
 80010fc:	2303      	movs	r3, #3
 80010fe:	e004      	b.n	800110a <HAL_GPIO_Init+0x206>
 8001100:	2302      	movs	r3, #2
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0x206>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <HAL_GPIO_Init+0x206>
 8001108:	2300      	movs	r3, #0
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	f002 0203 	and.w	r2, r2, #3
 8001110:	0092      	lsls	r2, r2, #2
 8001112:	4093      	lsls	r3, r2
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800111a:	4937      	ldr	r1, [pc, #220]	; (80011f8 <HAL_GPIO_Init+0x2f4>)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001128:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <HAL_GPIO_Init+0x310>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800114c:	4a31      	ldr	r2, [pc, #196]	; (8001214 <HAL_GPIO_Init+0x310>)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_GPIO_Init+0x310>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001176:	4a27      	ldr	r2, [pc, #156]	; (8001214 <HAL_GPIO_Init+0x310>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_GPIO_Init+0x310>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011a0:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <HAL_GPIO_Init+0x310>)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_GPIO_Init+0x310>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <HAL_GPIO_Init+0x310>)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa22 f303 	lsr.w	r3, r2, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f47f ae97 	bne.w	8000f14 <HAL_GPIO_Init+0x10>
  }
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	371c      	adds	r7, #28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	48000400 	.word	0x48000400
 8001200:	48000800 	.word	0x48000800
 8001204:	48000c00 	.word	0x48000c00
 8001208:	48001000 	.word	0x48001000
 800120c:	48001400 	.word	0x48001400
 8001210:	48001800 	.word	0x48001800
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001234:	e002      	b.n	800123c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f910 	bl	800048c <HAL_GPIO_EXTI_Callback>
  }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40010400 	.word	0x40010400

08001278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800127e:	af00      	add	r7, sp, #0
 8001280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001284:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001288:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800128a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800128e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	f001 b83a 	b.w	8002312 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 816f 	beq.w	8001592 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012b4:	4bb5      	ldr	r3, [pc, #724]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d00c      	beq.n	80012da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c0:	4bb2      	ldr	r3, [pc, #712]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d15c      	bne.n	8001386 <HAL_RCC_OscConfig+0x10e>
 80012cc:	4baf      	ldr	r3, [pc, #700]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d155      	bne.n	8001386 <HAL_RCC_OscConfig+0x10e>
 80012da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	095b      	lsrs	r3, r3, #5
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <HAL_RCC_OscConfig+0x94>
 8001306:	4ba1      	ldr	r3, [pc, #644]	; (800158c <HAL_RCC_OscConfig+0x314>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	e015      	b.n	8001338 <HAL_RCC_OscConfig+0xc0>
 800130c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001310:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001314:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001324:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001328:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800132c:	fa93 f3a3 	rbit	r3, r3
 8001330:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001334:	4b95      	ldr	r3, [pc, #596]	; (800158c <HAL_RCC_OscConfig+0x314>)
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800133c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001340:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001344:	fa92 f2a2 	rbit	r2, r2
 8001348:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800134c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001350:	fab2 f282 	clz	r2, r2
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	f042 0220 	orr.w	r2, r2, #32
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	f002 021f 	and.w	r2, r2, #31
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 8111 	beq.w	8001590 <HAL_RCC_OscConfig+0x318>
 800136e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001372:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 8108 	bne.w	8001590 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	f000 bfc6 	b.w	8002312 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800138a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001396:	d106      	bne.n	80013a6 <HAL_RCC_OscConfig+0x12e>
 8001398:	4b7c      	ldr	r3, [pc, #496]	; (800158c <HAL_RCC_OscConfig+0x314>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a7b      	ldr	r2, [pc, #492]	; (800158c <HAL_RCC_OscConfig+0x314>)
 800139e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e036      	b.n	8001414 <HAL_RCC_OscConfig+0x19c>
 80013a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x158>
 80013b6:	4b75      	ldr	r3, [pc, #468]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a74      	ldr	r2, [pc, #464]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80013bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b72      	ldr	r3, [pc, #456]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a71      	ldr	r2, [pc, #452]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80013c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e021      	b.n	8001414 <HAL_RCC_OscConfig+0x19c>
 80013d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x184>
 80013e2:	4b6a      	ldr	r3, [pc, #424]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a69      	ldr	r2, [pc, #420]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b67      	ldr	r3, [pc, #412]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a66      	ldr	r2, [pc, #408]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0x19c>
 80013fc:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a62      	ldr	r2, [pc, #392]	; (800158c <HAL_RCC_OscConfig+0x314>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b60      	ldr	r3, [pc, #384]	; (800158c <HAL_RCC_OscConfig+0x314>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a5f      	ldr	r2, [pc, #380]	; (800158c <HAL_RCC_OscConfig+0x314>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001418:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d059      	beq.n	80014d8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fa26 	bl	8000874 <HAL_GetTick>
 8001428:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142e:	f7ff fa21 	bl	8000874 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d902      	bls.n	8001444 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	f000 bf67 	b.w	8002312 <HAL_RCC_OscConfig+0x109a>
 8001444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001448:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001458:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d102      	bne.n	8001476 <HAL_RCC_OscConfig+0x1fe>
 8001470:	4b46      	ldr	r3, [pc, #280]	; (800158c <HAL_RCC_OscConfig+0x314>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x22a>
 8001476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800147a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800148a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800148e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001492:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014a6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80014aa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80014ae:	fa92 f2a2 	rbit	r2, r2
 80014b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80014b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80014ba:	fab2 f282 	clz	r2, r2
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	f042 0220 	orr.w	r2, r2, #32
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	f002 021f 	and.w	r2, r2, #31
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0ab      	beq.n	800142e <HAL_RCC_OscConfig+0x1b6>
 80014d6:	e05c      	b.n	8001592 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff f9cc 	bl	8000874 <HAL_GetTick>
 80014dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff f9c7 	bl	8000874 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d902      	bls.n	80014f8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	f000 bf0d 	b.w	8002312 <HAL_RCC_OscConfig+0x109a>
 80014f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800150c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d102      	bne.n	800152a <HAL_RCC_OscConfig+0x2b2>
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_OscConfig+0x314>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x2de>
 800152a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800152e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001536:	fa93 f3a3 	rbit	r3, r3
 800153a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800153e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001542:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001546:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_RCC_OscConfig+0x314>)
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800155a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800155e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001562:	fa92 f2a2 	rbit	r2, r2
 8001566:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800156a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800156e:	fab2 f282 	clz	r2, r2
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	f042 0220 	orr.w	r2, r2, #32
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	f002 021f 	and.w	r2, r2, #31
 800157e:	2101      	movs	r1, #1
 8001580:	fa01 f202 	lsl.w	r2, r1, r2
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ab      	bne.n	80014e2 <HAL_RCC_OscConfig+0x26a>
 800158a:	e002      	b.n	8001592 <HAL_RCC_OscConfig+0x31a>
 800158c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001596:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 817f 	beq.w	80018a6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015a8:	4ba7      	ldr	r3, [pc, #668]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00c      	beq.n	80015ce <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015b4:	4ba4      	ldr	r3, [pc, #656]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d173      	bne.n	80016a8 <HAL_RCC_OscConfig+0x430>
 80015c0:	4ba1      	ldr	r3, [pc, #644]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80015c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015cc:	d16c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x430>
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80015e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d102      	bne.n	80015fe <HAL_RCC_OscConfig+0x386>
 80015f8:	4b93      	ldr	r3, [pc, #588]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	e013      	b.n	8001626 <HAL_RCC_OscConfig+0x3ae>
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001610:	2302      	movs	r3, #2
 8001612:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001616:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001622:	4b89      	ldr	r3, [pc, #548]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	2202      	movs	r2, #2
 8001628:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800162c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001630:	fa92 f2a2 	rbit	r2, r2
 8001634:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001638:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800163c:	fab2 f282 	clz	r2, r2
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	f042 0220 	orr.w	r2, r2, #32
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	f002 021f 	and.w	r2, r2, #31
 800164c:	2101      	movs	r1, #1
 800164e:	fa01 f202 	lsl.w	r2, r1, r2
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00a      	beq.n	800166e <HAL_RCC_OscConfig+0x3f6>
 8001658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d002      	beq.n	800166e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	f000 be52 	b.w	8002312 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	4b76      	ldr	r3, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	21f8      	movs	r1, #248	; 0xf8
 8001684:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800168c:	fa91 f1a1 	rbit	r1, r1
 8001690:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001694:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001698:	fab1 f181 	clz	r1, r1
 800169c:	b2c9      	uxtb	r1, r1
 800169e:	408b      	lsls	r3, r1
 80016a0:	4969      	ldr	r1, [pc, #420]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	e0fe      	b.n	80018a6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8088 	beq.w	80017ca <HAL_RCC_OscConfig+0x552>
 80016ba:	2301      	movs	r3, #1
 80016bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80016cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	461a      	mov	r2, r3
 80016e2:	2301      	movs	r3, #1
 80016e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f8c5 	bl	8000874 <HAL_GetTick>
 80016ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff f8c0 	bl	8000874 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d902      	bls.n	8001706 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	f000 be06 	b.w	8002312 <HAL_RCC_OscConfig+0x109a>
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001718:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	fab3 f383 	clz	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d102      	bne.n	8001736 <HAL_RCC_OscConfig+0x4be>
 8001730:	4b45      	ldr	r3, [pc, #276]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	e013      	b.n	800175e <HAL_RCC_OscConfig+0x4e6>
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001748:	2302      	movs	r3, #2
 800174a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800174e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800175a:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	2202      	movs	r2, #2
 8001760:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001764:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001768:	fa92 f2a2 	rbit	r2, r2
 800176c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001770:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001774:	fab2 f282 	clz	r2, r2
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	f042 0220 	orr.w	r2, r2, #32
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	f002 021f 	and.w	r2, r2, #31
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0af      	beq.n	80016f0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	21f8      	movs	r1, #248	; 0xf8
 80017a6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80017ae:	fa91 f1a1 	rbit	r1, r1
 80017b2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80017b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017ba:	fab1 f181 	clz	r1, r1
 80017be:	b2c9      	uxtb	r1, r1
 80017c0:	408b      	lsls	r3, r1
 80017c2:	4921      	ldr	r1, [pc, #132]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
 80017c8:	e06d      	b.n	80018a6 <HAL_RCC_OscConfig+0x62e>
 80017ca:	2301      	movs	r3, #1
 80017cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80017dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	461a      	mov	r2, r3
 80017f2:	2300      	movs	r3, #0
 80017f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff f83d 	bl	8000874 <HAL_GetTick>
 80017fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff f838 	bl	8000874 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d902      	bls.n	8001816 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	f000 bd7e 	b.w	8002312 <HAL_RCC_OscConfig+0x109a>
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001828:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x5d4>
 8001840:	4b01      	ldr	r3, [pc, #4]	; (8001848 <HAL_RCC_OscConfig+0x5d0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	e016      	b.n	8001874 <HAL_RCC_OscConfig+0x5fc>
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	2302      	movs	r3, #2
 800184e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800185e:	2302      	movs	r3, #2
 8001860:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001864:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001870:	4bbf      	ldr	r3, [pc, #764]	; (8001b70 <HAL_RCC_OscConfig+0x8f8>)
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	2202      	movs	r2, #2
 8001876:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800187a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800187e:	fa92 f2a2 	rbit	r2, r2
 8001882:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001886:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800188a:	fab2 f282 	clz	r2, r2
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	f042 0220 	orr.w	r2, r2, #32
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	f002 021f 	and.w	r2, r2, #31
 800189a:	2101      	movs	r1, #1
 800189c:	fa01 f202 	lsl.w	r2, r1, r2
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ac      	bne.n	8001800 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8113 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d07c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x74e>
 80018cc:	2301      	movs	r3, #1
 80018ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80018de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	4ba2      	ldr	r3, [pc, #648]	; (8001b74 <HAL_RCC_OscConfig+0x8fc>)
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	461a      	mov	r2, r3
 80018f2:	2301      	movs	r3, #1
 80018f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7fe ffbd 	bl	8000874 <HAL_GetTick>
 80018fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001900:	f7fe ffb8 	bl	8000874 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d902      	bls.n	8001916 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	f000 bcfe 	b.w	8002312 <HAL_RCC_OscConfig+0x109a>
 8001916:	2302      	movs	r3, #2
 8001918:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001928:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001936:	2202      	movs	r2, #2
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001956:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800195a:	2202      	movs	r2, #2
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001962:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001970:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001974:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001976:	4b7e      	ldr	r3, [pc, #504]	; (8001b70 <HAL_RCC_OscConfig+0x8f8>)
 8001978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001982:	2102      	movs	r1, #2
 8001984:	6019      	str	r1, [r3, #0]
 8001986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f1a3 	rbit	r1, r3
 8001994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001998:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800199c:	6019      	str	r1, [r3, #0]
  return result;
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	2101      	movs	r1, #1
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d09d      	beq.n	8001900 <HAL_RCC_OscConfig+0x688>
 80019c4:	e08d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x86a>
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f2a3 	rbit	r2, r3
 80019e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019e8:	601a      	str	r2, [r3, #0]
  return result;
 80019ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019f2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x8fc>)
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	461a      	mov	r2, r3
 8001a04:	2300      	movs	r3, #0
 8001a06:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7fe ff34 	bl	8000874 <HAL_GetTick>
 8001a0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a12:	f7fe ff2f 	bl	8000874 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d902      	bls.n	8001a28 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	f000 bc75 	b.w	8002312 <HAL_RCC_OscConfig+0x109a>
 8001a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a30:	2202      	movs	r2, #2
 8001a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a54:	2202      	movs	r2, #2
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a74:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a78:	2202      	movs	r2, #2
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCC_OscConfig+0x8f8>)
 8001a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	6019      	str	r1, [r3, #0]
 8001aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f1a3 	rbit	r1, r3
 8001ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001aba:	6019      	str	r1, [r3, #0]
  return result;
 8001abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d197      	bne.n	8001a12 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 81a5 	beq.w	8001e42 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_RCC_OscConfig+0x8f8>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d116      	bne.n	8001b38 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_RCC_OscConfig+0x8f8>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_RCC_OscConfig+0x8f8>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	61d3      	str	r3, [r2, #28]
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_RCC_OscConfig+0x8f8>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b30:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_RCC_OscConfig+0x900>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d121      	bne.n	8001b88 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_RCC_OscConfig+0x900>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x900>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b50:	f7fe fe90 	bl	8000874 <HAL_GetTick>
 8001b54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	e010      	b.n	8001b7c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5a:	f7fe fe8b 	bl	8000874 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d908      	bls.n	8001b7c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e3d1      	b.n	8002312 <HAL_RCC_OscConfig+0x109a>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	10908120 	.word	0x10908120
 8001b78:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b8d      	ldr	r3, [pc, #564]	; (8001db4 <HAL_RCC_OscConfig+0xb3c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0e8      	beq.n	8001b5a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x92e>
 8001b98:	4b87      	ldr	r3, [pc, #540]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a86      	ldr	r2, [pc, #536]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	e035      	b.n	8001c12 <HAL_RCC_OscConfig+0x99a>
 8001ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001baa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x958>
 8001bb6:	4b80      	ldr	r3, [pc, #512]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a7f      	ldr	r2, [pc, #508]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a7c      	ldr	r2, [pc, #496]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	6213      	str	r3, [r2, #32]
 8001bce:	e020      	b.n	8001c12 <HAL_RCC_OscConfig+0x99a>
 8001bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d10c      	bne.n	8001bfa <HAL_RCC_OscConfig+0x982>
 8001be0:	4b75      	ldr	r3, [pc, #468]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4a74      	ldr	r2, [pc, #464]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6213      	str	r3, [r2, #32]
 8001bec:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	4a71      	ldr	r2, [pc, #452]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6213      	str	r3, [r2, #32]
 8001bf8:	e00b      	b.n	8001c12 <HAL_RCC_OscConfig+0x99a>
 8001bfa:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a6e      	ldr	r2, [pc, #440]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	4b6c      	ldr	r3, [pc, #432]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a6b      	ldr	r2, [pc, #428]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8081 	beq.w	8001d26 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7fe fe26 	bl	8000874 <HAL_GetTick>
 8001c28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	e00b      	b.n	8001c46 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7fe fe21 	bl	8000874 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e365      	b.n	8002312 <HAL_RCC_OscConfig+0x109a>
 8001c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c4e:	2202      	movs	r2, #2
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c72:	2202      	movs	r2, #2
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c8c:	601a      	str	r2, [r3, #0]
  return result;
 8001c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c92:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f043 0302 	orr.w	r3, r3, #2
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_OscConfig+0xa3a>
 8001cac:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	e013      	b.n	8001cda <HAL_RCC_OscConfig+0xa62>
 8001cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001cba:	2202      	movs	r2, #2
 8001cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cde:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	6011      	str	r1, [r2, #0]
 8001ce6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	fa92 f1a2 	rbit	r1, r2
 8001cf4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cf8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001cfc:	6011      	str	r1, [r2, #0]
  return result;
 8001cfe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d02:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	fab2 f282 	clz	r2, r2
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f002 021f 	and.w	r2, r2, #31
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d084      	beq.n	8001c2e <HAL_RCC_OscConfig+0x9b6>
 8001d24:	e083      	b.n	8001e2e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7fe fda5 	bl	8000874 <HAL_GetTick>
 8001d2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7fe fda0 	bl	8000874 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e2e4      	b.n	8002312 <HAL_RCC_OscConfig+0x109a>
 8001d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d50:	2202      	movs	r2, #2
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d58:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d74:	2202      	movs	r2, #2
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	fa93 f2a3 	rbit	r2, r3
 8001d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d8e:	601a      	str	r2, [r3, #0]
  return result;
 8001d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d94:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d106      	bne.n	8001dbc <HAL_RCC_OscConfig+0xb44>
 8001dae:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <HAL_RCC_OscConfig+0xb40>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	e017      	b.n	8001de4 <HAL_RCC_OscConfig+0xb6c>
 8001db4:	40007000 	.word	0x40007000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dcc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	fa93 f2a3 	rbit	r2, r3
 8001dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dda:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4bb3      	ldr	r3, [pc, #716]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001de8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001dec:	2102      	movs	r1, #2
 8001dee:	6011      	str	r1, [r2, #0]
 8001df0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001df4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	fa92 f1a2 	rbit	r1, r2
 8001dfe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e02:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001e06:	6011      	str	r1, [r2, #0]
  return result;
 8001e08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e0c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	fab2 f282 	clz	r2, r2
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	f002 021f 	and.w	r2, r2, #31
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f202 	lsl.w	r2, r1, r2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d180      	bne.n	8001d30 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e2e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b9e      	ldr	r3, [pc, #632]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a9d      	ldr	r2, [pc, #628]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 825e 	beq.w	8002310 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	4b96      	ldr	r3, [pc, #600]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	f000 821f 	beq.w	80022a0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	f040 8170 	bne.w	8002154 <HAL_RCC_OscConfig+0xedc>
 8001e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e78:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	fa93 f2a3 	rbit	r2, r3
 8001e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e98:	601a      	str	r2, [r3, #0]
  return result;
 8001e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ea2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7fe fcdb 	bl	8000874 <HAL_GetTick>
 8001ebe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	e009      	b.n	8001ed8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe fcd6 	bl	8000874 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e21c      	b.n	8002312 <HAL_RCC_OscConfig+0x109a>
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001efc:	601a      	str	r2, [r3, #0]
  return result;
 8001efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d102      	bne.n	8001f22 <HAL_RCC_OscConfig+0xcaa>
 8001f1c:	4b64      	ldr	r3, [pc, #400]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	e027      	b.n	8001f72 <HAL_RCC_OscConfig+0xcfa>
 8001f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f34:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f42:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f76:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f7e:	6011      	str	r1, [r2, #0]
 8001f80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f84:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	fa92 f1a2 	rbit	r1, r2
 8001f8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f92:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f96:	6011      	str	r1, [r2, #0]
  return result;
 8001f98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f9c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	fab2 f282 	clz	r2, r2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f042 0220 	orr.w	r2, r2, #32
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	f002 021f 	and.w	r2, r2, #31
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d182      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fbe:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	f023 020f 	bic.w	r2, r3, #15
 8001fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	4937      	ldr	r1, [pc, #220]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001fd8:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a19      	ldr	r1, [r3, #32]
 8001fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	492d      	ldr	r1, [pc, #180]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002004:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002020:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002024:	601a      	str	r2, [r3, #0]
  return result;
 8002026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800202e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800203a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	461a      	mov	r2, r3
 8002042:	2301      	movs	r3, #1
 8002044:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe fc15 	bl	8000874 <HAL_GetTick>
 800204a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204e:	e009      	b.n	8002064 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7fe fc10 	bl	8000874 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e156      	b.n	8002312 <HAL_RCC_OscConfig+0x109a>
 8002064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002068:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800206c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002076:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fa93 f2a3 	rbit	r2, r3
 8002080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002084:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002088:	601a      	str	r2, [r3, #0]
  return result;
 800208a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002092:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_OscConfig+0xe3c>
 80020a8:	4b01      	ldr	r3, [pc, #4]	; (80020b0 <HAL_RCC_OscConfig+0xe38>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	e02a      	b.n	8002104 <HAL_RCC_OscConfig+0xe8c>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80020bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	fa93 f2a3 	rbit	r2, r3
 80020d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80020e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	4b86      	ldr	r3, [pc, #536]	; (800231c <HAL_RCC_OscConfig+0x10a4>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002108:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800210c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002110:	6011      	str	r1, [r2, #0]
 8002112:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002116:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	fa92 f1a2 	rbit	r1, r2
 8002120:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002124:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002128:	6011      	str	r1, [r2, #0]
  return result;
 800212a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800212e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	fab2 f282 	clz	r2, r2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	f042 0220 	orr.w	r2, r2, #32
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	f002 021f 	and.w	r2, r2, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f202 	lsl.w	r2, r1, r2
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	f43f af7f 	beq.w	8002050 <HAL_RCC_OscConfig+0xdd8>
 8002152:	e0dd      	b.n	8002310 <HAL_RCC_OscConfig+0x1098>
 8002154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002158:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800215c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002166:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002178:	601a      	str	r2, [r3, #0]
  return result;
 800217a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002182:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800218e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	461a      	mov	r2, r3
 8002196:	2300      	movs	r3, #0
 8002198:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe fb6b 	bl	8000874 <HAL_GetTick>
 800219e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a2:	e009      	b.n	80021b8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fb66 	bl	8000874 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0ac      	b.n	8002312 <HAL_RCC_OscConfig+0x109a>
 80021b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80021c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	fa93 f2a3 	rbit	r2, r3
 80021d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021dc:	601a      	str	r2, [r3, #0]
  return result;
 80021de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d102      	bne.n	8002202 <HAL_RCC_OscConfig+0xf8a>
 80021fc:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_RCC_OscConfig+0x10a4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	e027      	b.n	8002252 <HAL_RCC_OscConfig+0xfda>
 8002202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002206:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800220a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002214:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002222:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002230:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <HAL_RCC_OscConfig+0x10a4>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002256:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800225a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800225e:	6011      	str	r1, [r2, #0]
 8002260:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002264:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	fa92 f1a2 	rbit	r1, r2
 800226e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002272:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002276:	6011      	str	r1, [r2, #0]
  return result;
 8002278:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800227c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	fab2 f282 	clz	r2, r2
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	f042 0220 	orr.w	r2, r2, #32
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f002 021f 	and.w	r2, r2, #31
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f202 	lsl.w	r2, r1, r2
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d182      	bne.n	80021a4 <HAL_RCC_OscConfig+0xf2c>
 800229e:	e037      	b.n	8002310 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e02e      	b.n	8002312 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_RCC_OscConfig+0x10a4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_RCC_OscConfig+0x10a4>)
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80022c8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80022cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d117      	bne.n	800230c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80022e0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d10b      	bne.n	800230c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80022f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022f8:	f003 020f 	and.w	r2, r3, #15
 80022fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002300:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b09e      	sub	sp, #120	; 0x78
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e162      	b.n	80025fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b90      	ldr	r3, [pc, #576]	; (800257c <HAL_RCC_ClockConfig+0x25c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d910      	bls.n	8002368 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b8d      	ldr	r3, [pc, #564]	; (800257c <HAL_RCC_ClockConfig+0x25c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0207 	bic.w	r2, r3, #7
 800234e:	498b      	ldr	r1, [pc, #556]	; (800257c <HAL_RCC_ClockConfig+0x25c>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b89      	ldr	r3, [pc, #548]	; (800257c <HAL_RCC_ClockConfig+0x25c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e14a      	b.n	80025fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b82      	ldr	r3, [pc, #520]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	497f      	ldr	r1, [pc, #508]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80dc 	beq.w	800254c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d13c      	bne.n	8002416 <HAL_RCC_ClockConfig+0xf6>
 800239c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xa6>
 80023c0:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	e00f      	b.n	80023e6 <HAL_RCC_ClockConfig+0xc6>
 80023c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	667b      	str	r3, [r7, #100]	; 0x64
 80023d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d8:	663b      	str	r3, [r7, #96]	; 0x60
 80023da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023e2:	4b67      	ldr	r3, [pc, #412]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80023ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023ee:	fa92 f2a2 	rbit	r2, r2
 80023f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80023f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f042 0220 	orr.w	r2, r2, #32
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f002 021f 	and.w	r2, r2, #31
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d17b      	bne.n	800250a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0f3      	b.n	80025fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d13c      	bne.n	8002498 <HAL_RCC_ClockConfig+0x178>
 800241e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002422:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800242c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_RCC_ClockConfig+0x128>
 8002442:	4b4f      	ldr	r3, [pc, #316]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	e00f      	b.n	8002468 <HAL_RCC_ClockConfig+0x148>
 8002448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	647b      	str	r3, [r7, #68]	; 0x44
 8002456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800245a:	643b      	str	r3, [r7, #64]	; 0x40
 800245c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002464:	4b46      	ldr	r3, [pc, #280]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800246c:	63ba      	str	r2, [r7, #56]	; 0x38
 800246e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002470:	fa92 f2a2 	rbit	r2, r2
 8002474:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f002 021f 	and.w	r2, r2, #31
 8002488:	2101      	movs	r1, #1
 800248a:	fa01 f202 	lsl.w	r2, r1, r2
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d13a      	bne.n	800250a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0b2      	b.n	80025fe <HAL_RCC_ClockConfig+0x2de>
 8002498:	2302      	movs	r3, #2
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x1a0>
 80024ba:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	e00d      	b.n	80024dc <HAL_RCC_ClockConfig+0x1bc>
 80024c0:	2302      	movs	r3, #2
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	2302      	movs	r3, #2
 80024ce:	623b      	str	r3, [r7, #32]
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	2202      	movs	r2, #2
 80024de:	61ba      	str	r2, [r7, #24]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	fa92 f2a2 	rbit	r2, r2
 80024e6:	617a      	str	r2, [r7, #20]
  return result;
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f042 0220 	orr.w	r2, r2, #32
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f002 021f 	and.w	r2, r2, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e079      	b.n	80025fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	491a      	ldr	r1, [pc, #104]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7fe f9aa 	bl	8000874 <HAL_GetTick>
 8002520:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe f9a6 	bl	8000874 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e061      	b.n	80025fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_RCC_ClockConfig+0x260>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_ClockConfig+0x25c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d214      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCC_ClockConfig+0x25c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	4906      	ldr	r1, [pc, #24]	; (800257c <HAL_RCC_ClockConfig+0x25c>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <HAL_RCC_ClockConfig+0x25c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e040      	b.n	80025fe <HAL_RCC_ClockConfig+0x2de>
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_ClockConfig+0x2e8>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	491a      	ldr	r1, [pc, #104]	; (8002608 <HAL_RCC_ClockConfig+0x2e8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_RCC_ClockConfig+0x2e8>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4912      	ldr	r1, [pc, #72]	; (8002608 <HAL_RCC_ClockConfig+0x2e8>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025c2:	f000 f829 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 80025c6:	4601      	mov	r1, r0
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_RCC_ClockConfig+0x2e8>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d0:	22f0      	movs	r2, #240	; 0xf0
 80025d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	fa92 f2a2 	rbit	r2, r2
 80025da:	60fa      	str	r2, [r7, #12]
  return result;
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	fab2 f282 	clz	r2, r2
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	40d3      	lsrs	r3, r2
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x2ec>)
 80025e8:	5cd3      	ldrb	r3, [r2, r3]
 80025ea:	fa21 f303 	lsr.w	r3, r1, r3
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <HAL_RCC_ClockConfig+0x2f0>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_RCC_ClockConfig+0x2f4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe f8f8 	bl	80007ec <HAL_InitTick>
  
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3778      	adds	r7, #120	; 0x78
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	080040f0 	.word	0x080040f0
 8002610:	20000000 	.word	0x20000000
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002618:	b480      	push	{r7}
 800261a:	b08b      	sub	sp, #44	; 0x2c
 800261c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b04      	cmp	r3, #4
 8002640:	d002      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x30>
 8002642:	2b08      	cmp	r3, #8
 8002644:	d003      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x36>
 8002646:	e03f      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800264a:	623b      	str	r3, [r7, #32]
      break;
 800264c:	e03f      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002654:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002658:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	fa92 f2a2 	rbit	r2, r2
 8002660:	607a      	str	r2, [r7, #4]
  return result;
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	40d3      	lsrs	r3, r2
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	220f      	movs	r2, #15
 800267c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	fa92 f2a2 	rbit	r2, r2
 8002684:	60fa      	str	r2, [r7, #12]
  return result;
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	fab2 f282 	clz	r2, r2
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	40d3      	lsrs	r3, r2
 8002690:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026a0:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	e007      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026b2:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	623b      	str	r3, [r7, #32]
      break;
 80026c6:	e002      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026ca:	623b      	str	r3, [r7, #32]
      break;
 80026cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ce:	6a3b      	ldr	r3, [r7, #32]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	372c      	adds	r7, #44	; 0x2c
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	40021000 	.word	0x40021000
 80026e0:	007a1200 	.word	0x007a1200
 80026e4:	08004108 	.word	0x08004108
 80026e8:	08004118 	.word	0x08004118

080026ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_RCC_GetHCLKFreq+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000000 	.word	0x20000000

08002704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800270a:	f7ff ffef 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 800270e:	4601      	mov	r1, r0
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002718:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800271c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	fa92 f2a2 	rbit	r2, r2
 8002724:	603a      	str	r2, [r7, #0]
  return result;
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	fab2 f282 	clz	r2, r2
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	40d3      	lsrs	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002732:	5cd3      	ldrb	r3, [r2, r3]
 8002734:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	08004100 	.word	0x08004100

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800274e:	f7ff ffcd 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 8002752:	4601      	mov	r1, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800275c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002760:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	fa92 f2a2 	rbit	r2, r2
 8002768:	603a      	str	r2, [r7, #0]
  return result;
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	fab2 f282 	clz	r2, r2
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	40d3      	lsrs	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	08004100 	.word	0x08004100

0800278c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b092      	sub	sp, #72	; 0x48
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80d4 	beq.w	8002958 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b0:	4b4e      	ldr	r3, [pc, #312]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10e      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	4b4b      	ldr	r3, [pc, #300]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4a4a      	ldr	r2, [pc, #296]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c6:	61d3      	str	r3, [r2, #28]
 80027c8:	4b48      	ldr	r3, [pc, #288]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027da:	4b45      	ldr	r3, [pc, #276]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d118      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e6:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a41      	ldr	r2, [pc, #260]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f2:	f7fe f83f 	bl	8000874 <HAL_GetTick>
 80027f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	e008      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fa:	f7fe f83b 	bl	8000874 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	d901      	bls.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1d6      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002820:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8084 	beq.w	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002834:	429a      	cmp	r2, r3
 8002836:	d07c      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002838:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	461a      	mov	r2, r3
 8002862:	2301      	movs	r3, #1
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800286a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	461a      	mov	r2, r3
 8002886:	2300      	movs	r3, #0
 8002888:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800288a:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800288e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d04b      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fd ffeb 	bl	8000874 <HAL_GetTick>
 800289e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fd ffe7 	bl	8000874 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e180      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80028b8:	2302      	movs	r3, #2
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	2302      	movs	r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	61fb      	str	r3, [r7, #28]
  return result;
 80028d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d108      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028e6:	4b01      	ldr	r3, [pc, #4]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	e00d      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
 80028f4:	10908100 	.word	0x10908100
 80028f8:	2302      	movs	r3, #2
 80028fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	4b9a      	ldr	r3, [pc, #616]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	2202      	movs	r2, #2
 800290a:	613a      	str	r2, [r7, #16]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	60fa      	str	r2, [r7, #12]
  return result;
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	fab2 f282 	clz	r2, r2
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f002 021f 	and.w	r2, r2, #31
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f202 	lsl.w	r2, r1, r2
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0b7      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002932:	4b8f      	ldr	r3, [pc, #572]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	498c      	ldr	r1, [pc, #560]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002944:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294c:	4b88      	ldr	r3, [pc, #544]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	4a87      	ldr	r2, [pc, #540]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002956:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002964:	4b82      	ldr	r3, [pc, #520]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	f023 0203 	bic.w	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	497f      	ldr	r1, [pc, #508]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002982:	4b7b      	ldr	r3, [pc, #492]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4978      	ldr	r1, [pc, #480]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002990:	4313      	orrs	r3, r2
 8002992:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029a0:	4b73      	ldr	r3, [pc, #460]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4970      	ldr	r1, [pc, #448]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029be:	4b6c      	ldr	r3, [pc, #432]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f023 0210 	bic.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4969      	ldr	r1, [pc, #420]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029dc:	4b64      	ldr	r3, [pc, #400]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	4961      	ldr	r1, [pc, #388]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029fa:	4b5d      	ldr	r3, [pc, #372]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f023 0220 	bic.w	r2, r3, #32
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	495a      	ldr	r1, [pc, #360]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a18:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	4952      	ldr	r1, [pc, #328]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a36:	4b4e      	ldr	r3, [pc, #312]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	494b      	ldr	r1, [pc, #300]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a54:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4943      	ldr	r1, [pc, #268]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a72:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	493c      	ldr	r1, [pc, #240]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a90:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	4934      	ldr	r1, [pc, #208]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002aae:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	492d      	ldr	r1, [pc, #180]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002acc:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	4925      	ldr	r1, [pc, #148]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	491e      	ldr	r1, [pc, #120]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	4916      	ldr	r1, [pc, #88]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	490f      	ldr	r1, [pc, #60]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	4907      	ldr	r1, [pc, #28]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00c      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b62:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	e002      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b76:	4913      	ldr	r1, [pc, #76]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b94:	490b      	ldr	r1, [pc, #44]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	4904      	ldr	r1, [pc, #16]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3748      	adds	r7, #72	; 0x48
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e040      	b.n	8002c5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fd fd20 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2224      	movs	r2, #36	; 0x24
 8002bf4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fbfe 	bl	8003408 <UART_SetConfig>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e022      	b.n	8002c5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fdc8 	bl	80037b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fe4f 	bl	80038f8 <UART_CheckIdleState>
 8002c5a:	4603      	mov	r3, r0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	d178      	bne.n	8002d6c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_UART_Transmit_DMA+0x22>
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e071      	b.n	8002d6e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_UART_Transmit_DMA+0x34>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e06a      	b.n	8002d6e <HAL_UART_Transmit_DMA+0x10a>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2221      	movs	r2, #33	; 0x21
 8002cc2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02b      	beq.n	8002d24 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd0:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <HAL_UART_Transmit_DMA+0x114>)
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd8:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <HAL_UART_Transmit_DMA+0x118>)
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <HAL_UART_Transmit_DMA+0x11c>)
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3328      	adds	r3, #40	; 0x28
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	f7fd ff1c 	bl	8000b3c <HAL_DMA_Start_IT>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00c      	beq.n	8002d24 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e024      	b.n	8002d6e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3308      	adds	r3, #8
 8002d3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	613b      	str	r3, [r7, #16]
   return(result);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3308      	adds	r3, #8
 8002d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d54:	623a      	str	r2, [r7, #32]
 8002d56:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	69f9      	ldr	r1, [r7, #28]
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	e841 2300 	strex	r3, r2, [r1]
 8002d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e5      	bne.n	8002d34 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e000      	b.n	8002d6e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3728      	adds	r7, #40	; 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	08003d6b 	.word	0x08003d6b
 8002d7c:	08003dff 	.word	0x08003dff
 8002d80:	08003f71 	.word	0x08003f71

08002d84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d13d      	bne.n	8002e16 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_UART_Receive_DMA+0x22>
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e036      	b.n	8002e18 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_UART_Receive_DMA+0x34>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e02f      	b.n	8002e18 <HAL_UART_Receive_DMA+0x94>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d018      	beq.n	8002e06 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	613b      	str	r3, [r7, #16]
   return(result);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	69f9      	ldr	r1, [r7, #28]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e6      	bne.n	8002dd4 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fe81 	bl	8003b14 <UART_Start_Receive_DMA>
 8002e12:	4603      	mov	r3, r0
 8002e14:	e000      	b.n	8002e18 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b0ba      	sub	sp, #232	; 0xe8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e4e:	4013      	ands	r3, r2
 8002e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d115      	bne.n	8002e88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00f      	beq.n	8002e88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d009      	beq.n	8002e88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 82a3 	beq.w	80033c4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
      }
      return;
 8002e86:	e29d      	b.n	80033c4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8117 	beq.w	80030c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ea2:	4b85      	ldr	r3, [pc, #532]	; (80030b8 <HAL_UART_IRQHandler+0x298>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 810a 	beq.w	80030c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d011      	beq.n	8002edc <HAL_UART_IRQHandler+0xbc>
 8002eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d011      	beq.n	8002f0c <HAL_UART_IRQHandler+0xec>
 8002ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f02:	f043 0204 	orr.w	r2, r3, #4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d011      	beq.n	8002f3c <HAL_UART_IRQHandler+0x11c>
 8002f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00b      	beq.n	8002f3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f32:	f043 0202 	orr.w	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d017      	beq.n	8002f78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2208      	movs	r2, #8
 8002f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6e:	f043 0208 	orr.w	r2, r3, #8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_UART_IRQHandler+0x18a>
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00c      	beq.n	8002faa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8209 	beq.w	80033c8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d005      	beq.n	8003002 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ffa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d04f      	beq.n	80030a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fe4e 	bl	8003ca4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d141      	bne.n	800309a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3308      	adds	r3, #8
 800301c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800302c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3308      	adds	r3, #8
 800303e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003042:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800304e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003052:	e841 2300 	strex	r3, r2, [r1]
 8003056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800305a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1d9      	bne.n	8003016 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	2b00      	cmp	r3, #0
 8003068:	d013      	beq.n	8003092 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a13      	ldr	r2, [pc, #76]	; (80030bc <HAL_UART_IRQHandler+0x29c>)
 8003070:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fdf8 	bl	8000c6c <HAL_DMA_Abort_IT>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d017      	beq.n	80030b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800308c:	4610      	mov	r0, r2
 800308e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003090:	e00f      	b.n	80030b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f9a2 	bl	80033dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003098:	e00b      	b.n	80030b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f99e 	bl	80033dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a0:	e007      	b.n	80030b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f99a 	bl	80033dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80030b0:	e18a      	b.n	80033c8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b2:	bf00      	nop
    return;
 80030b4:	e188      	b.n	80033c8 <HAL_UART_IRQHandler+0x5a8>
 80030b6:	bf00      	nop
 80030b8:	04000120 	.word	0x04000120
 80030bc:	08003fed 	.word	0x08003fed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 8143 	bne.w	8003350 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 813c 	beq.w	8003350 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8135 	beq.w	8003350 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2210      	movs	r2, #16
 80030ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	f040 80b1 	bne.w	8003260 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800310a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 815c 	beq.w	80033cc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800311a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800311e:	429a      	cmp	r2, r3
 8003120:	f080 8154 	bcs.w	80033cc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800312a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b20      	cmp	r3, #32
 8003136:	f000 8085 	beq.w	8003244 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800314e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003156:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003164:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003168:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003170:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800317c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1da      	bne.n	800313a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3308      	adds	r3, #8
 800318a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318e:	e853 3f00 	ldrex	r3, [r3]
 8003192:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003194:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3308      	adds	r3, #8
 80031a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e1      	bne.n	8003184 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3308      	adds	r3, #8
 80031c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ca:	e853 3f00 	ldrex	r3, [r3]
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e3      	bne.n	80031c0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003214:	f023 0310 	bic.w	r3, r3, #16
 8003218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003226:	65bb      	str	r3, [r7, #88]	; 0x58
 8003228:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800322c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e4      	bne.n	8003204 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd fcdb 	bl	8000bfa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003250:	b29b      	uxth	r3, r3
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	b29b      	uxth	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8c9 	bl	80033f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800325e:	e0b5      	b.n	80033cc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800326c:	b29b      	uxth	r3, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80a7 	beq.w	80033d0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80a2 	beq.w	80033d0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
 80032b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e4      	bne.n	800328c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3308      	adds	r3, #8
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	623b      	str	r3, [r7, #32]
   return(result);
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3308      	adds	r3, #8
 80032e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032e6:	633a      	str	r2, [r7, #48]	; 0x30
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e3      	bne.n	80032c2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	60fb      	str	r3, [r7, #12]
   return(result);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f023 0310 	bic.w	r3, r3, #16
 8003320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	617b      	str	r3, [r7, #20]
   return(result);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e4      	bne.n	800330c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f851 	bl	80033f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800334e:	e03f      	b.n	80033d0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <HAL_UART_IRQHandler+0x55a>
 800335c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fe7a 	bl	800406c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003378:	e02d      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00e      	beq.n	80033a4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01c      	beq.n	80033d4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
    }
    return;
 80033a2:	e017      	b.n	80033d4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
 80033b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fe2b 	bl	8004018 <UART_EndTransmit_IT>
    return;
 80033c2:	e008      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80033c4:	bf00      	nop
 80033c6:	e006      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80033c8:	bf00      	nop
 80033ca:	e004      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80033cc:	bf00      	nop
 80033ce:	e002      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80033d4:	bf00      	nop
  }

}
 80033d6:	37e8      	adds	r7, #232	; 0xe8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b92      	ldr	r3, [pc, #584]	; (800367c <UART_SetConfig+0x274>)
 8003434:	4013      	ands	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	6979      	ldr	r1, [r7, #20]
 800343c:	430b      	orrs	r3, r1
 800343e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a80      	ldr	r2, [pc, #512]	; (8003680 <UART_SetConfig+0x278>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d120      	bne.n	80034c6 <UART_SetConfig+0xbe>
 8003484:	4b7f      	ldr	r3, [pc, #508]	; (8003684 <UART_SetConfig+0x27c>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b03      	cmp	r3, #3
 800348e:	d817      	bhi.n	80034c0 <UART_SetConfig+0xb8>
 8003490:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <UART_SetConfig+0x90>)
 8003492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003496:	bf00      	nop
 8003498:	080034a9 	.word	0x080034a9
 800349c:	080034b5 	.word	0x080034b5
 80034a0:	080034bb 	.word	0x080034bb
 80034a4:	080034af 	.word	0x080034af
 80034a8:	2301      	movs	r3, #1
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e0b5      	b.n	800361a <UART_SetConfig+0x212>
 80034ae:	2302      	movs	r3, #2
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e0b2      	b.n	800361a <UART_SetConfig+0x212>
 80034b4:	2304      	movs	r3, #4
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e0af      	b.n	800361a <UART_SetConfig+0x212>
 80034ba:	2308      	movs	r3, #8
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e0ac      	b.n	800361a <UART_SetConfig+0x212>
 80034c0:	2310      	movs	r3, #16
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e0a9      	b.n	800361a <UART_SetConfig+0x212>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6f      	ldr	r2, [pc, #444]	; (8003688 <UART_SetConfig+0x280>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d124      	bne.n	800351a <UART_SetConfig+0x112>
 80034d0:	4b6c      	ldr	r3, [pc, #432]	; (8003684 <UART_SetConfig+0x27c>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034dc:	d011      	beq.n	8003502 <UART_SetConfig+0xfa>
 80034de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034e2:	d817      	bhi.n	8003514 <UART_SetConfig+0x10c>
 80034e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034e8:	d011      	beq.n	800350e <UART_SetConfig+0x106>
 80034ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034ee:	d811      	bhi.n	8003514 <UART_SetConfig+0x10c>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <UART_SetConfig+0xf4>
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f8:	d006      	beq.n	8003508 <UART_SetConfig+0x100>
 80034fa:	e00b      	b.n	8003514 <UART_SetConfig+0x10c>
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e08b      	b.n	800361a <UART_SetConfig+0x212>
 8003502:	2302      	movs	r3, #2
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e088      	b.n	800361a <UART_SetConfig+0x212>
 8003508:	2304      	movs	r3, #4
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e085      	b.n	800361a <UART_SetConfig+0x212>
 800350e:	2308      	movs	r3, #8
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e082      	b.n	800361a <UART_SetConfig+0x212>
 8003514:	2310      	movs	r3, #16
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e07f      	b.n	800361a <UART_SetConfig+0x212>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a5b      	ldr	r2, [pc, #364]	; (800368c <UART_SetConfig+0x284>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d124      	bne.n	800356e <UART_SetConfig+0x166>
 8003524:	4b57      	ldr	r3, [pc, #348]	; (8003684 <UART_SetConfig+0x27c>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800352c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003530:	d011      	beq.n	8003556 <UART_SetConfig+0x14e>
 8003532:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003536:	d817      	bhi.n	8003568 <UART_SetConfig+0x160>
 8003538:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800353c:	d011      	beq.n	8003562 <UART_SetConfig+0x15a>
 800353e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003542:	d811      	bhi.n	8003568 <UART_SetConfig+0x160>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <UART_SetConfig+0x148>
 8003548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800354c:	d006      	beq.n	800355c <UART_SetConfig+0x154>
 800354e:	e00b      	b.n	8003568 <UART_SetConfig+0x160>
 8003550:	2300      	movs	r3, #0
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e061      	b.n	800361a <UART_SetConfig+0x212>
 8003556:	2302      	movs	r3, #2
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e05e      	b.n	800361a <UART_SetConfig+0x212>
 800355c:	2304      	movs	r3, #4
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e05b      	b.n	800361a <UART_SetConfig+0x212>
 8003562:	2308      	movs	r3, #8
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e058      	b.n	800361a <UART_SetConfig+0x212>
 8003568:	2310      	movs	r3, #16
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e055      	b.n	800361a <UART_SetConfig+0x212>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a47      	ldr	r2, [pc, #284]	; (8003690 <UART_SetConfig+0x288>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d124      	bne.n	80035c2 <UART_SetConfig+0x1ba>
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <UART_SetConfig+0x27c>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003580:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003584:	d011      	beq.n	80035aa <UART_SetConfig+0x1a2>
 8003586:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800358a:	d817      	bhi.n	80035bc <UART_SetConfig+0x1b4>
 800358c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003590:	d011      	beq.n	80035b6 <UART_SetConfig+0x1ae>
 8003592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003596:	d811      	bhi.n	80035bc <UART_SetConfig+0x1b4>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <UART_SetConfig+0x19c>
 800359c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035a0:	d006      	beq.n	80035b0 <UART_SetConfig+0x1a8>
 80035a2:	e00b      	b.n	80035bc <UART_SetConfig+0x1b4>
 80035a4:	2300      	movs	r3, #0
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e037      	b.n	800361a <UART_SetConfig+0x212>
 80035aa:	2302      	movs	r3, #2
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e034      	b.n	800361a <UART_SetConfig+0x212>
 80035b0:	2304      	movs	r3, #4
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e031      	b.n	800361a <UART_SetConfig+0x212>
 80035b6:	2308      	movs	r3, #8
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	e02e      	b.n	800361a <UART_SetConfig+0x212>
 80035bc:	2310      	movs	r3, #16
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e02b      	b.n	800361a <UART_SetConfig+0x212>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a33      	ldr	r2, [pc, #204]	; (8003694 <UART_SetConfig+0x28c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d124      	bne.n	8003616 <UART_SetConfig+0x20e>
 80035cc:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <UART_SetConfig+0x27c>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80035d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035d8:	d011      	beq.n	80035fe <UART_SetConfig+0x1f6>
 80035da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035de:	d817      	bhi.n	8003610 <UART_SetConfig+0x208>
 80035e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e4:	d011      	beq.n	800360a <UART_SetConfig+0x202>
 80035e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ea:	d811      	bhi.n	8003610 <UART_SetConfig+0x208>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <UART_SetConfig+0x1f0>
 80035f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f4:	d006      	beq.n	8003604 <UART_SetConfig+0x1fc>
 80035f6:	e00b      	b.n	8003610 <UART_SetConfig+0x208>
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e00d      	b.n	800361a <UART_SetConfig+0x212>
 80035fe:	2302      	movs	r3, #2
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e00a      	b.n	800361a <UART_SetConfig+0x212>
 8003604:	2304      	movs	r3, #4
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e007      	b.n	800361a <UART_SetConfig+0x212>
 800360a:	2308      	movs	r3, #8
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e004      	b.n	800361a <UART_SetConfig+0x212>
 8003610:	2310      	movs	r3, #16
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e001      	b.n	800361a <UART_SetConfig+0x212>
 8003616:	2310      	movs	r3, #16
 8003618:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003622:	d16c      	bne.n	80036fe <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8003624:	7ffb      	ldrb	r3, [r7, #31]
 8003626:	2b08      	cmp	r3, #8
 8003628:	d838      	bhi.n	800369c <UART_SetConfig+0x294>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <UART_SetConfig+0x228>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003655 	.word	0x08003655
 8003634:	0800365d 	.word	0x0800365d
 8003638:	08003665 	.word	0x08003665
 800363c:	0800369d 	.word	0x0800369d
 8003640:	0800366b 	.word	0x0800366b
 8003644:	0800369d 	.word	0x0800369d
 8003648:	0800369d 	.word	0x0800369d
 800364c:	0800369d 	.word	0x0800369d
 8003650:	08003673 	.word	0x08003673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003654:	f7ff f856 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8003658:	61b8      	str	r0, [r7, #24]
        break;
 800365a:	e024      	b.n	80036a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800365c:	f7ff f874 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8003660:	61b8      	str	r0, [r7, #24]
        break;
 8003662:	e020      	b.n	80036a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <UART_SetConfig+0x290>)
 8003666:	61bb      	str	r3, [r7, #24]
        break;
 8003668:	e01d      	b.n	80036a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800366a:	f7fe ffd5 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 800366e:	61b8      	str	r0, [r7, #24]
        break;
 8003670:	e019      	b.n	80036a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003676:	61bb      	str	r3, [r7, #24]
        break;
 8003678:	e015      	b.n	80036a6 <UART_SetConfig+0x29e>
 800367a:	bf00      	nop
 800367c:	efff69f3 	.word	0xefff69f3
 8003680:	40013800 	.word	0x40013800
 8003684:	40021000 	.word	0x40021000
 8003688:	40004400 	.word	0x40004400
 800368c:	40004800 	.word	0x40004800
 8003690:	40004c00 	.word	0x40004c00
 8003694:	40005000 	.word	0x40005000
 8003698:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77bb      	strb	r3, [r7, #30]
        break;
 80036a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d075      	beq.n	8003798 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	005a      	lsls	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	441a      	add	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b0f      	cmp	r3, #15
 80036c8:	d916      	bls.n	80036f8 <UART_SetConfig+0x2f0>
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d212      	bcs.n	80036f8 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f023 030f 	bic.w	r3, r3, #15
 80036da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	89fb      	ldrh	r3, [r7, #14]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	89fa      	ldrh	r2, [r7, #14]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	e04f      	b.n	8003798 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77bb      	strb	r3, [r7, #30]
 80036fc:	e04c      	b.n	8003798 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036fe:	7ffb      	ldrb	r3, [r7, #31]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d828      	bhi.n	8003756 <UART_SetConfig+0x34e>
 8003704:	a201      	add	r2, pc, #4	; (adr r2, 800370c <UART_SetConfig+0x304>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	08003731 	.word	0x08003731
 8003710:	08003739 	.word	0x08003739
 8003714:	08003741 	.word	0x08003741
 8003718:	08003757 	.word	0x08003757
 800371c:	08003747 	.word	0x08003747
 8003720:	08003757 	.word	0x08003757
 8003724:	08003757 	.word	0x08003757
 8003728:	08003757 	.word	0x08003757
 800372c:	0800374f 	.word	0x0800374f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003730:	f7fe ffe8 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8003734:	61b8      	str	r0, [r7, #24]
        break;
 8003736:	e013      	b.n	8003760 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003738:	f7ff f806 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 800373c:	61b8      	str	r0, [r7, #24]
        break;
 800373e:	e00f      	b.n	8003760 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <UART_SetConfig+0x3a8>)
 8003742:	61bb      	str	r3, [r7, #24]
        break;
 8003744:	e00c      	b.n	8003760 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003746:	f7fe ff67 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 800374a:	61b8      	str	r0, [r7, #24]
        break;
 800374c:	e008      	b.n	8003760 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003752:	61bb      	str	r3, [r7, #24]
        break;
 8003754:	e004      	b.n	8003760 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	77bb      	strb	r3, [r7, #30]
        break;
 800375e:	bf00      	nop
    }

    if (pclk != 0U)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d018      	beq.n	8003798 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	085a      	lsrs	r2, r3, #1
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	441a      	add	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	b29b      	uxth	r3, r3
 800377a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	d908      	bls.n	8003794 <UART_SetConfig+0x38c>
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d204      	bcs.n	8003794 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	e001      	b.n	8003798 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	007a1200 	.word	0x007a1200

080037b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01a      	beq.n	80038ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b2:	d10a      	bne.n	80038ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003908:	f7fc ffb4 	bl	8000874 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b08      	cmp	r3, #8
 800391a:	d10e      	bne.n	800393a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800391c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f82d 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e023      	b.n	8003982 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b04      	cmp	r3, #4
 8003946:	d10e      	bne.n	8003966 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f817 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e00d      	b.n	8003982 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b09c      	sub	sp, #112	; 0x70
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399a:	e0a5      	b.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	f000 80a1 	beq.w	8003ae8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fc ff65 	bl	8000874 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <UART_WaitOnFlagUntilTimeout+0x32>
 80039b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d13e      	bne.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039d0:	667b      	str	r3, [r7, #100]	; 0x64
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e6      	bne.n	80039bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3308      	adds	r3, #8
 80039f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	663b      	str	r3, [r7, #96]	; 0x60
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e5      	bne.n	80039ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e067      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d04f      	beq.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a56:	d147      	bne.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
 8003a82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e6      	bne.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ab4:	623a      	str	r2, [r7, #32]
 8003ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	69f9      	ldr	r1, [r7, #28]
 8003aba:	6a3a      	ldr	r2, [r7, #32]
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e5      	bne.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e010      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4013      	ands	r3, r2
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	f43f af4a 	beq.w	800399c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3770      	adds	r7, #112	; 0x70
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b096      	sub	sp, #88	; 0x58
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2222      	movs	r2, #34	; 0x22
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d02b      	beq.n	8003b9e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a40      	ldr	r2, [pc, #256]	; (8003c4c <UART_Start_Receive_DMA+0x138>)
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a3f      	ldr	r2, [pc, #252]	; (8003c50 <UART_Start_Receive_DMA+0x13c>)
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a3e      	ldr	r2, [pc, #248]	; (8003c54 <UART_Start_Receive_DMA+0x140>)
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	2200      	movs	r2, #0
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3324      	adds	r3, #36	; 0x24
 8003b70:	4619      	mov	r1, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	461a      	mov	r2, r3
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	f7fc ffdf 	bl	8000b3c <HAL_DMA_Start_IT>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00c      	beq.n	8003b9e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2210      	movs	r2, #16
 8003b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e051      	b.n	8003c42 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bba:	657b      	str	r3, [r7, #84]	; 0x54
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bc6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e6      	bne.n	8003ba6 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	653b      	str	r3, [r7, #80]	; 0x50
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bf8:	637a      	str	r2, [r7, #52]	; 0x34
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e5      	bne.n	8003bd8 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3308      	adds	r3, #8
 8003c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c2c:	623a      	str	r2, [r7, #32]
 8003c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	69f9      	ldr	r1, [r7, #28]
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e5      	bne.n	8003c0c <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3758      	adds	r7, #88	; 0x58
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	08003e1b 	.word	0x08003e1b
 8003c50:	08003f39 	.word	0x08003f39
 8003c54:	08003f71 	.word	0x08003f71

08003c58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6979      	ldr	r1, [r7, #20]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e6      	bne.n	8003c60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003c98:	bf00      	nop
 8003c9a:	3724      	adds	r7, #36	; 0x24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b095      	sub	sp, #84	; 0x54
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cca:	643b      	str	r3, [r7, #64]	; 0x40
 8003ccc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e6      	bne.n	8003cac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e5      	bne.n	8003cde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d118      	bne.n	8003d4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f023 0310 	bic.w	r3, r3, #16
 8003d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6979      	ldr	r1, [r7, #20]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	613b      	str	r3, [r7, #16]
   return(result);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e6      	bne.n	8003d1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d5e:	bf00      	nop
 8003d60:	3754      	adds	r7, #84	; 0x54
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b090      	sub	sp, #64	; 0x40
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d037      	beq.n	8003df0 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8003d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	623b      	str	r3, [r7, #32]
   return(result);
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3308      	adds	r3, #8
 8003da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da8:	633a      	str	r2, [r7, #48]	; 0x30
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e5      	bne.n	8003d88 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	69b9      	ldr	r1, [r7, #24]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	617b      	str	r3, [r7, #20]
   return(result);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e6      	bne.n	8003dbc <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dee:	e002      	b.n	8003df6 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8003df0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003df2:	f7fc fa9f 	bl	8000334 <HAL_UART_TxCpltCallback>
}
 8003df6:	bf00      	nop
 8003df8:	3740      	adds	r7, #64	; 0x40
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7fc fa75 	bl	80002fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b09c      	sub	sp, #112	; 0x70
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d070      	beq.n	8003f12 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8003e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e56:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e6      	bne.n	8003e38 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	667b      	str	r3, [r7, #100]	; 0x64
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3308      	adds	r3, #8
 8003e88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e8a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	623b      	str	r3, [r7, #32]
   return(result);
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8003eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3308      	adds	r3, #8
 8003ebc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ebe:	633a      	str	r2, [r7, #48]	; 0x30
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e5      	bne.n	8003e9e <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d118      	bne.n	8003f12 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f023 0310 	bic.w	r3, r3, #16
 8003ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	69b9      	ldr	r1, [r7, #24]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	617b      	str	r3, [r7, #20]
   return(result);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e6      	bne.n	8003ee0 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d107      	bne.n	8003f2a <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f20:	4619      	mov	r1, r3
 8003f22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f24:	f7ff fa64 	bl	80033f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f28:	e002      	b.n	8003f30 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8003f2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f2c:	f7fc fa28 	bl	8000380 <HAL_UART_RxCpltCallback>
}
 8003f30:	bf00      	nop
 8003f32:	3770      	adds	r7, #112	; 0x70
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d109      	bne.n	8003f62 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	4619      	mov	r1, r3
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff fa48 	bl	80033f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f60:	e002      	b.n	8003f68 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f7fc fa02 	bl	800036c <HAL_UART_RxHalfCpltCallback>
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f94:	2b80      	cmp	r3, #128	; 0x80
 8003f96:	d109      	bne.n	8003fac <UART_DMAError+0x3c>
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b21      	cmp	r3, #33	; 0x21
 8003f9c:	d106      	bne.n	8003fac <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003fa6:	6978      	ldr	r0, [r7, #20]
 8003fa8:	f7ff fe56 	bl	8003c58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	d109      	bne.n	8003fce <UART_DMAError+0x5e>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b22      	cmp	r3, #34	; 0x22
 8003fbe:	d106      	bne.n	8003fce <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003fc8:	6978      	ldr	r0, [r7, #20]
 8003fca:	f7ff fe6b 	bl	8003ca4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fd4:	f043 0210 	orr.w	r2, r3, #16
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fde:	6978      	ldr	r0, [r7, #20]
 8003fe0:	f7ff f9fc 	bl	80033dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fe4:	bf00      	nop
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff f9e6 	bl	80033dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	60bb      	str	r3, [r7, #8]
   return(result);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6979      	ldr	r1, [r7, #20]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	613b      	str	r3, [r7, #16]
   return(result);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e6      	bne.n	8004020 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fc f968 	bl	8000334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004064:	bf00      	nop
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <__libc_init_array>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	4d0d      	ldr	r5, [pc, #52]	; (80040b8 <__libc_init_array+0x38>)
 8004084:	4c0d      	ldr	r4, [pc, #52]	; (80040bc <__libc_init_array+0x3c>)
 8004086:	1b64      	subs	r4, r4, r5
 8004088:	10a4      	asrs	r4, r4, #2
 800408a:	2600      	movs	r6, #0
 800408c:	42a6      	cmp	r6, r4
 800408e:	d109      	bne.n	80040a4 <__libc_init_array+0x24>
 8004090:	4d0b      	ldr	r5, [pc, #44]	; (80040c0 <__libc_init_array+0x40>)
 8004092:	4c0c      	ldr	r4, [pc, #48]	; (80040c4 <__libc_init_array+0x44>)
 8004094:	f000 f820 	bl	80040d8 <_init>
 8004098:	1b64      	subs	r4, r4, r5
 800409a:	10a4      	asrs	r4, r4, #2
 800409c:	2600      	movs	r6, #0
 800409e:	42a6      	cmp	r6, r4
 80040a0:	d105      	bne.n	80040ae <__libc_init_array+0x2e>
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a8:	4798      	blx	r3
 80040aa:	3601      	adds	r6, #1
 80040ac:	e7ee      	b.n	800408c <__libc_init_array+0xc>
 80040ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b2:	4798      	blx	r3
 80040b4:	3601      	adds	r6, #1
 80040b6:	e7f2      	b.n	800409e <__libc_init_array+0x1e>
 80040b8:	08004128 	.word	0x08004128
 80040bc:	08004128 	.word	0x08004128
 80040c0:	08004128 	.word	0x08004128
 80040c4:	0800412c 	.word	0x0800412c

080040c8 <memset>:
 80040c8:	4402      	add	r2, r0
 80040ca:	4603      	mov	r3, r0
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d100      	bne.n	80040d2 <memset+0xa>
 80040d0:	4770      	bx	lr
 80040d2:	f803 1b01 	strb.w	r1, [r3], #1
 80040d6:	e7f9      	b.n	80040cc <memset+0x4>

080040d8 <_init>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr

080040e4 <_fini>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	bf00      	nop
 80040e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ea:	bc08      	pop	{r3}
 80040ec:	469e      	mov	lr, r3
 80040ee:	4770      	bx	lr
